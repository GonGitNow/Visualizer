{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\VideoExporter.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './VideoExporter.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoExporter = ({\n  visualizerRef,\n  audioFile,\n  isPlaying\n}) => {\n  _s();\n  const [isExporting, setIsExporting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [debug, setDebug] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startTimeRef = useRef(null);\n  const audioDurationRef = useRef(null);\n  const progressIntervalRef = useRef(null);\n  const audioElementRef = useRef(null);\n\n  // Get audio duration when audio file changes\n  useEffect(() => {\n    if (audioFile) {\n      // Use the same URL format as in Visualizer component\n      const timestamp = new Date().getTime();\n      const audioUrl = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\n      const audio = new Audio(audioUrl);\n      audio.addEventListener('loadedmetadata', () => {\n        audioDurationRef.current = audio.duration;\n        console.log('Audio duration loaded:', audioDurationRef.current);\n      });\n\n      // Add error handling\n      audio.addEventListener('error', e => {\n        console.error('Error loading audio for duration calculation:', e);\n      });\n    }\n    return () => {\n      if (progressIntervalRef.current) {\n        clearInterval(progressIntervalRef.current);\n      }\n    };\n  }, [audioFile]);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      if (audioElementRef.current) {\n        audioElementRef.current.pause();\n        audioElementRef.current.src = '';\n      }\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n        mediaRecorderRef.current.stop();\n      }\n    };\n  }, []);\n  const exportVideo = async () => {\n    if (!(visualizerRef !== null && visualizerRef !== void 0 && visualizerRef.current) || !audioFile) {\n      alert(\"Please upload an audio file first\");\n      return;\n    }\n    try {\n      setIsExporting(true);\n      setProgress(0);\n      setDebug('Starting export process...');\n      startTimeRef.current = Date.now();\n      chunksRef.current = [];\n\n      // Get the canvas element from the visualizer using the exposed method\n      const canvas = visualizerRef.current.getCanvas();\n      if (!canvas) {\n        throw new Error(\"Canvas element not found\");\n      }\n      setDebug('Canvas found, dimensions: ' + canvas.width + 'x' + canvas.height);\n\n      // Create a stream from the canvas\n      let stream;\n      try {\n        // Try standard method first\n        stream = canvas.captureStream(30);\n        setDebug('Canvas stream created with 30fps');\n      } catch (e) {\n        // Fallback for Firefox\n        try {\n          stream = canvas.mozCaptureStream ? canvas.mozCaptureStream(30) : null;\n          setDebug('Using Firefox mozCaptureStream fallback');\n        } catch (mozError) {\n          console.error('Error with mozCaptureStream:', mozError);\n          setDebug('Failed to create canvas stream with mozCaptureStream');\n          throw mozError;\n        }\n      }\n      if (!stream) {\n        throw new Error(\"Your browser doesn't support canvas streaming\");\n      }\n\n      // Verify we have video tracks\n      const videoTracks = stream.getVideoTracks();\n      if (videoTracks.length === 0) {\n        throw new Error(\"No video tracks found in canvas stream\");\n      }\n      setDebug(`Stream created with ${videoTracks.length} video tracks`);\n\n      // Create audio context and connect to stream\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n      // Use the same URL format as in Visualizer component\n      const timestamp = new Date().getTime();\n      const audioUrl = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\n      const audioElement = new Audio(audioUrl);\n      audioElementRef.current = audioElement;\n\n      // Add error handling for audio element\n      audioElement.addEventListener('error', e => {\n        console.error('Audio element error:', e);\n        setDebug(`Audio error: ${e.message || 'Unknown error'}`);\n        throw new Error(`Failed to load audio: ${e.message}`);\n      });\n\n      // Wait for audio to be loadable before proceeding\n      await new Promise((resolve, reject) => {\n        audioElement.addEventListener('canplaythrough', () => {\n          setDebug('Audio loaded and ready to play');\n          resolve();\n        }, {\n          once: true\n        });\n        audioElement.addEventListener('error', e => {\n          setDebug(`Audio load error: ${e.message || 'Unknown error'}`);\n          reject(new Error(`Audio load error: ${e.message}`));\n        }, {\n          once: true\n        });\n        audioElement.load();\n      });\n      const audioSource = audioContext.createMediaElementSource(audioElement);\n      const audioDestination = audioContext.createMediaStreamDestination();\n      audioSource.connect(audioDestination);\n      audioSource.connect(audioContext.destination); // Also connect to speakers\n\n      // Verify we have audio tracks\n      const audioTracks = audioDestination.stream.getAudioTracks();\n      if (audioTracks.length === 0) {\n        setDebug('Warning: No audio tracks found in audio stream');\n      } else {\n        setDebug(`Audio stream created with ${audioTracks.length} audio tracks`);\n      }\n\n      // Combine video and audio streams\n      const combinedStream = new MediaStream([...videoTracks, ...audioTracks]);\n\n      // Check if combined stream has tracks\n      if (combinedStream.getTracks().length === 0) {\n        throw new Error(\"Combined stream has no tracks\");\n      }\n      setDebug(`Combined stream created with ${combinedStream.getTracks().length} total tracks`);\n\n      // Create media recorder with appropriate MIME type\n      let mimeType = 'video/webm;codecs=vp9,opus';\n      if (!MediaRecorder.isTypeSupported(mimeType)) {\n        // Fallback to more compatible options\n        if (MediaRecorder.isTypeSupported('video/webm;codecs=vp8,opus')) {\n          mimeType = 'video/webm;codecs=vp8,opus';\n          setDebug('Using fallback MIME type: video/webm;codecs=vp8,opus');\n        } else if (MediaRecorder.isTypeSupported('video/webm')) {\n          mimeType = 'video/webm';\n          setDebug('Using basic MIME type: video/webm');\n        } else {\n          setDebug('Warning: No standard MIME types supported, trying without specifying codec');\n          mimeType = '';\n        }\n      } else {\n        setDebug('Using MIME type: video/webm;codecs=vp9,opus');\n      }\n\n      // Create MediaRecorder with appropriate options\n      const mediaRecorder = new MediaRecorder(combinedStream, mimeType ? {\n        mimeType\n      } : {\n        audioBitsPerSecond: 128000,\n        videoBitsPerSecond: 2500000\n      });\n      mediaRecorderRef.current = mediaRecorder;\n\n      // Log MediaRecorder state changes\n      mediaRecorder.addEventListener('start', () => {\n        console.log('MediaRecorder started');\n        setDebug('Recording started');\n      });\n      mediaRecorder.addEventListener('error', event => {\n        console.error('MediaRecorder error:', event);\n        setDebug(`MediaRecorder error: ${event.error || 'Unknown error'}`);\n      });\n\n      // Handle data available\n      mediaRecorder.ondataavailable = event => {\n        console.log('Data available event, size:', event.data.size);\n        setDebug(`Received data chunk: ${(event.data.size / 1024).toFixed(2)} KB`);\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n\n      // Handle recording stop\n      mediaRecorder.onstop = () => {\n        console.log('MediaRecorder stopped, chunks:', chunksRef.current.length);\n        setDebug(`Recording stopped with ${chunksRef.current.length} chunks`);\n        if (chunksRef.current.length === 0) {\n          setDebug('Error: No data chunks were recorded');\n          alert('Error: No video data was captured during recording.');\n          setIsExporting(false);\n          return;\n        }\n\n        // Calculate total size of all chunks\n        const totalSize = chunksRef.current.reduce((size, chunk) => size + chunk.size, 0);\n        setDebug(`Total data size: ${(totalSize / 1024).toFixed(2)} KB`);\n        if (totalSize === 0) {\n          setDebug('Error: Recorded data has zero size');\n          alert('Error: The recorded video has no data (0 bytes).');\n          setIsExporting(false);\n          return;\n        }\n\n        // Create blob from chunks\n        const blob = new Blob(chunksRef.current, {\n          type: mimeType || 'video/webm'\n        });\n        console.log('Created blob, size:', blob.size);\n        setDebug(`Created video blob: ${(blob.size / 1024).toFixed(2)} KB`);\n        if (blob.size === 0) {\n          setDebug('Error: Final blob has zero size');\n          alert('Error: The final video file has no data (0 bytes).');\n          setIsExporting(false);\n          return;\n        }\n        const url = URL.createObjectURL(blob);\n\n        // Create filename based on audio file name with fallback\n        let fileName = \"visualization.webm\";\n        if (audioFile && audioFile.name) {\n          fileName = audioFile.name.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n        } else if (audioFile && audioFile.path) {\n          // Extract filename from path as fallback\n          const pathParts = audioFile.path.split('/');\n          const pathFileName = pathParts[pathParts.length - 1];\n          fileName = pathFileName.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n        }\n\n        // Download the file\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = fileName;\n        a.click();\n\n        // Clean up\n        URL.revokeObjectURL(url);\n        setIsExporting(false);\n        setProgress(100);\n        setDebug('Export completed successfully');\n\n        // Clear progress interval\n        if (progressIntervalRef.current) {\n          clearInterval(progressIntervalRef.current);\n          progressIntervalRef.current = null;\n        }\n\n        // Stop and clean up audio element\n        if (audioElementRef.current) {\n          audioElementRef.current.pause();\n          audioElementRef.current.src = '';\n        }\n      };\n\n      // Start recording with smaller timeslice for more frequent ondataavailable events\n      mediaRecorder.start(500); // Capture in 500ms chunks\n      setDebug('MediaRecorder started with 500ms timeslice');\n\n      // Start audio playback\n      try {\n        await audioElement.play();\n        setDebug('Audio playback started');\n      } catch (playError) {\n        console.error('Error playing audio:', playError);\n        setDebug(`Failed to play audio: ${playError.message || 'Unknown error'}`);\n        throw new Error(`Failed to play audio: ${playError.message}`);\n      }\n\n      // Update progress based on audio time\n      progressIntervalRef.current = setInterval(() => {\n        if (audioDurationRef.current) {\n          const elapsed = (Date.now() - startTimeRef.current) / 1000;\n          const percentage = Math.min(Math.floor(elapsed / audioDurationRef.current * 100), 99);\n          setProgress(percentage);\n\n          // Log data chunks periodically\n          setDebug(`Progress: ${percentage}%, Chunks: ${chunksRef.current.length}, Duration: ${elapsed.toFixed(1)}s/${audioDurationRef.current.toFixed(1)}s`);\n        }\n      }, 500);\n\n      // Stop recording when audio ends\n      audioElement.onended = () => {\n        setDebug('Audio playback ended, stopping recording');\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n          // Force one last dataavailable event before stopping\n          mediaRecorderRef.current.requestData();\n\n          // Small delay to ensure the last data is captured\n          setTimeout(() => {\n            mediaRecorderRef.current.stop();\n            audioElement.onended = null;\n          }, 500);\n        }\n      };\n    } catch (error) {\n      console.error(\"Error exporting video:\", error);\n      setDebug(`Export error: ${error.message || 'Unknown error'}`);\n      alert(`Error exporting video: ${error.message}`);\n      setIsExporting(false);\n\n      // Clean up on error\n      if (audioElementRef.current) {\n        audioElementRef.current.pause();\n        audioElementRef.current.src = '';\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-exporter\",\n    children: isExporting ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-text\",\n        children: [progress, \"% Exporting...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        children: debug\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"export-button\",\n      onClick: exportVideo,\n      disabled: !visualizerRef || !audioFile || isPlaying,\n      children: \"Export Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoExporter, \"8j3bNp0WxG1WZqhNVGBN6IuWe+g=\");\n_c = VideoExporter;\nexport default VideoExporter;\nvar _c;\n$RefreshReg$(_c, \"VideoExporter\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","VideoExporter","visualizerRef","audioFile","isPlaying","_s","isExporting","setIsExporting","progress","setProgress","debug","setDebug","mediaRecorderRef","chunksRef","startTimeRef","audioDurationRef","progressIntervalRef","audioElementRef","timestamp","Date","getTime","audioUrl","path","audio","Audio","addEventListener","current","duration","console","log","e","error","clearInterval","pause","src","state","stop","exportVideo","alert","now","canvas","getCanvas","Error","width","height","stream","captureStream","mozCaptureStream","mozError","videoTracks","getVideoTracks","length","audioContext","window","AudioContext","webkitAudioContext","audioElement","message","Promise","resolve","reject","once","load","audioSource","createMediaElementSource","audioDestination","createMediaStreamDestination","connect","destination","audioTracks","getAudioTracks","combinedStream","MediaStream","getTracks","mimeType","MediaRecorder","isTypeSupported","mediaRecorder","audioBitsPerSecond","videoBitsPerSecond","event","ondataavailable","data","size","toFixed","push","onstop","totalSize","reduce","chunk","blob","Blob","type","url","URL","createObjectURL","fileName","name","replace","pathParts","split","pathFileName","a","document","createElement","href","download","click","revokeObjectURL","start","play","playError","setInterval","elapsed","percentage","Math","min","floor","onended","requestData","setTimeout","className","children","style","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/VideoExporter.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport './VideoExporter.css';\n\nconst VideoExporter = ({ visualizerRef, audioFile, isPlaying }) => {\n  const [isExporting, setIsExporting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [debug, setDebug] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startTimeRef = useRef(null);\n  const audioDurationRef = useRef(null);\n  const progressIntervalRef = useRef(null);\n  const audioElementRef = useRef(null);\n\n  // Get audio duration when audio file changes\n  useEffect(() => {\n    if (audioFile) {\n      // Use the same URL format as in Visualizer component\n      const timestamp = new Date().getTime();\n      const audioUrl = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\n      const audio = new Audio(audioUrl);\n      \n      audio.addEventListener('loadedmetadata', () => {\n        audioDurationRef.current = audio.duration;\n        console.log('Audio duration loaded:', audioDurationRef.current);\n      });\n      \n      // Add error handling\n      audio.addEventListener('error', (e) => {\n        console.error('Error loading audio for duration calculation:', e);\n      });\n    }\n    return () => {\n      if (progressIntervalRef.current) {\n        clearInterval(progressIntervalRef.current);\n      }\n    };\n  }, [audioFile]);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      if (audioElementRef.current) {\n        audioElementRef.current.pause();\n        audioElementRef.current.src = '';\n      }\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n        mediaRecorderRef.current.stop();\n      }\n    };\n  }, []);\n\n  const exportVideo = async () => {\n    if (!visualizerRef?.current || !audioFile) {\n      alert(\"Please upload an audio file first\");\n      return;\n    }\n\n    try {\n      setIsExporting(true);\n      setProgress(0);\n      setDebug('Starting export process...');\n      startTimeRef.current = Date.now();\n      chunksRef.current = [];\n\n      // Get the canvas element from the visualizer using the exposed method\n      const canvas = visualizerRef.current.getCanvas();\n      if (!canvas) {\n        throw new Error(\"Canvas element not found\");\n      }\n      setDebug('Canvas found, dimensions: ' + canvas.width + 'x' + canvas.height);\n\n      // Create a stream from the canvas\n      let stream;\n      try {\n        // Try standard method first\n        stream = canvas.captureStream(30);\n        setDebug('Canvas stream created with 30fps');\n      } catch (e) {\n        // Fallback for Firefox\n        try {\n          stream = canvas.mozCaptureStream ? canvas.mozCaptureStream(30) : null;\n          setDebug('Using Firefox mozCaptureStream fallback');\n        } catch (mozError) {\n          console.error('Error with mozCaptureStream:', mozError);\n          setDebug('Failed to create canvas stream with mozCaptureStream');\n          throw mozError;\n        }\n      }\n\n      if (!stream) {\n        throw new Error(\"Your browser doesn't support canvas streaming\");\n      }\n\n      // Verify we have video tracks\n      const videoTracks = stream.getVideoTracks();\n      if (videoTracks.length === 0) {\n        throw new Error(\"No video tracks found in canvas stream\");\n      }\n      setDebug(`Stream created with ${videoTracks.length} video tracks`);\n\n      // Create audio context and connect to stream\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      \n      // Use the same URL format as in Visualizer component\n      const timestamp = new Date().getTime();\n      const audioUrl = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\n      const audioElement = new Audio(audioUrl);\n      audioElementRef.current = audioElement;\n      \n      // Add error handling for audio element\n      audioElement.addEventListener('error', (e) => {\n        console.error('Audio element error:', e);\n        setDebug(`Audio error: ${e.message || 'Unknown error'}`);\n        throw new Error(`Failed to load audio: ${e.message}`);\n      });\n      \n      // Wait for audio to be loadable before proceeding\n      await new Promise((resolve, reject) => {\n        audioElement.addEventListener('canplaythrough', () => {\n          setDebug('Audio loaded and ready to play');\n          resolve();\n        }, { once: true });\n        audioElement.addEventListener('error', (e) => {\n          setDebug(`Audio load error: ${e.message || 'Unknown error'}`);\n          reject(new Error(`Audio load error: ${e.message}`));\n        }, { once: true });\n        audioElement.load();\n      });\n      \n      const audioSource = audioContext.createMediaElementSource(audioElement);\n      const audioDestination = audioContext.createMediaStreamDestination();\n      audioSource.connect(audioDestination);\n      audioSource.connect(audioContext.destination); // Also connect to speakers\n\n      // Verify we have audio tracks\n      const audioTracks = audioDestination.stream.getAudioTracks();\n      if (audioTracks.length === 0) {\n        setDebug('Warning: No audio tracks found in audio stream');\n      } else {\n        setDebug(`Audio stream created with ${audioTracks.length} audio tracks`);\n      }\n\n      // Combine video and audio streams\n      const combinedStream = new MediaStream([\n        ...videoTracks,\n        ...audioTracks\n      ]);\n\n      // Check if combined stream has tracks\n      if (combinedStream.getTracks().length === 0) {\n        throw new Error(\"Combined stream has no tracks\");\n      }\n      setDebug(`Combined stream created with ${combinedStream.getTracks().length} total tracks`);\n\n      // Create media recorder with appropriate MIME type\n      let mimeType = 'video/webm;codecs=vp9,opus';\n      if (!MediaRecorder.isTypeSupported(mimeType)) {\n        // Fallback to more compatible options\n        if (MediaRecorder.isTypeSupported('video/webm;codecs=vp8,opus')) {\n          mimeType = 'video/webm;codecs=vp8,opus';\n          setDebug('Using fallback MIME type: video/webm;codecs=vp8,opus');\n        } else if (MediaRecorder.isTypeSupported('video/webm')) {\n          mimeType = 'video/webm';\n          setDebug('Using basic MIME type: video/webm');\n        } else {\n          setDebug('Warning: No standard MIME types supported, trying without specifying codec');\n          mimeType = '';\n        }\n      } else {\n        setDebug('Using MIME type: video/webm;codecs=vp9,opus');\n      }\n      \n      // Create MediaRecorder with appropriate options\n      const mediaRecorder = new MediaRecorder(combinedStream, \n        mimeType ? { mimeType } : { audioBitsPerSecond: 128000, videoBitsPerSecond: 2500000 }\n      );\n      mediaRecorderRef.current = mediaRecorder;\n\n      // Log MediaRecorder state changes\n      mediaRecorder.addEventListener('start', () => {\n        console.log('MediaRecorder started');\n        setDebug('Recording started');\n      });\n\n      mediaRecorder.addEventListener('error', (event) => {\n        console.error('MediaRecorder error:', event);\n        setDebug(`MediaRecorder error: ${event.error || 'Unknown error'}`);\n      });\n\n      // Handle data available\n      mediaRecorder.ondataavailable = (event) => {\n        console.log('Data available event, size:', event.data.size);\n        setDebug(`Received data chunk: ${(event.data.size / 1024).toFixed(2)} KB`);\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n\n      // Handle recording stop\n      mediaRecorder.onstop = () => {\n        console.log('MediaRecorder stopped, chunks:', chunksRef.current.length);\n        setDebug(`Recording stopped with ${chunksRef.current.length} chunks`);\n        \n        if (chunksRef.current.length === 0) {\n          setDebug('Error: No data chunks were recorded');\n          alert('Error: No video data was captured during recording.');\n          setIsExporting(false);\n          return;\n        }\n        \n        // Calculate total size of all chunks\n        const totalSize = chunksRef.current.reduce((size, chunk) => size + chunk.size, 0);\n        setDebug(`Total data size: ${(totalSize / 1024).toFixed(2)} KB`);\n        \n        if (totalSize === 0) {\n          setDebug('Error: Recorded data has zero size');\n          alert('Error: The recorded video has no data (0 bytes).');\n          setIsExporting(false);\n          return;\n        }\n\n        // Create blob from chunks\n        const blob = new Blob(chunksRef.current, { type: mimeType || 'video/webm' });\n        console.log('Created blob, size:', blob.size);\n        setDebug(`Created video blob: ${(blob.size / 1024).toFixed(2)} KB`);\n        \n        if (blob.size === 0) {\n          setDebug('Error: Final blob has zero size');\n          alert('Error: The final video file has no data (0 bytes).');\n          setIsExporting(false);\n          return;\n        }\n        \n        const url = URL.createObjectURL(blob);\n        \n        // Create filename based on audio file name with fallback\n        let fileName = \"visualization.webm\";\n        if (audioFile && audioFile.name) {\n          fileName = audioFile.name.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n        } else if (audioFile && audioFile.path) {\n          // Extract filename from path as fallback\n          const pathParts = audioFile.path.split('/');\n          const pathFileName = pathParts[pathParts.length - 1];\n          fileName = pathFileName.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n        }\n        \n        // Download the file\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = fileName;\n        a.click();\n        \n        // Clean up\n        URL.revokeObjectURL(url);\n        setIsExporting(false);\n        setProgress(100);\n        setDebug('Export completed successfully');\n        \n        // Clear progress interval\n        if (progressIntervalRef.current) {\n          clearInterval(progressIntervalRef.current);\n          progressIntervalRef.current = null;\n        }\n        \n        // Stop and clean up audio element\n        if (audioElementRef.current) {\n          audioElementRef.current.pause();\n          audioElementRef.current.src = '';\n        }\n      };\n\n      // Start recording with smaller timeslice for more frequent ondataavailable events\n      mediaRecorder.start(500); // Capture in 500ms chunks\n      setDebug('MediaRecorder started with 500ms timeslice');\n\n      // Start audio playback\n      try {\n        await audioElement.play();\n        setDebug('Audio playback started');\n      } catch (playError) {\n        console.error('Error playing audio:', playError);\n        setDebug(`Failed to play audio: ${playError.message || 'Unknown error'}`);\n        throw new Error(`Failed to play audio: ${playError.message}`);\n      }\n\n      // Update progress based on audio time\n      progressIntervalRef.current = setInterval(() => {\n        if (audioDurationRef.current) {\n          const elapsed = (Date.now() - startTimeRef.current) / 1000;\n          const percentage = Math.min(Math.floor((elapsed / audioDurationRef.current) * 100), 99);\n          setProgress(percentage);\n          \n          // Log data chunks periodically\n          setDebug(`Progress: ${percentage}%, Chunks: ${chunksRef.current.length}, Duration: ${elapsed.toFixed(1)}s/${audioDurationRef.current.toFixed(1)}s`);\n        }\n      }, 500);\n\n      // Stop recording when audio ends\n      audioElement.onended = () => {\n        setDebug('Audio playback ended, stopping recording');\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n          // Force one last dataavailable event before stopping\n          mediaRecorderRef.current.requestData();\n          \n          // Small delay to ensure the last data is captured\n          setTimeout(() => {\n            mediaRecorderRef.current.stop();\n            audioElement.onended = null;\n          }, 500);\n        }\n      };\n\n    } catch (error) {\n      console.error(\"Error exporting video:\", error);\n      setDebug(`Export error: ${error.message || 'Unknown error'}`);\n      alert(`Error exporting video: ${error.message}`);\n      setIsExporting(false);\n      \n      // Clean up on error\n      if (audioElementRef.current) {\n        audioElementRef.current.pause();\n        audioElementRef.current.src = '';\n      }\n    }\n  };\n\n  return (\n    <div className=\"video-exporter\">\n      {isExporting ? (\n        <div className=\"export-progress\">\n          <div className=\"progress-bar\">\n            <div className=\"progress-fill\" style={{ width: `${progress}%` }}></div>\n          </div>\n          <div className=\"progress-text\">{progress}% Exporting...</div>\n          <div className=\"debug-info\">{debug}</div>\n        </div>\n      ) : (\n        <button\n          className=\"export-button\"\n          onClick={exportVideo}\n          disabled={!visualizerRef || !audioFile || isPlaying}\n        >\n          Export Video\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default VideoExporter; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}