{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\Visualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState } from 'react';\nimport ThreeVisualizer from './ThreeVisualizer';\nimport './Visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RESOLUTIONS = {\n  '4K': {\n    width: 3840,\n    height: 2160,\n    className: 'aspect-ratio-4k'\n  },\n  '1080p': {\n    width: 1920,\n    height: 1080,\n    className: 'aspect-ratio-1080p'\n  },\n  '720p': {\n    width: 1280,\n    height: 720,\n    className: 'aspect-ratio-720p'\n  },\n  'Square': {\n    width: 720,\n    height: 720,\n    className: 'aspect-ratio-square'\n  },\n  'Vertical': {\n    width: 1080,\n    height: 1920,\n    className: 'aspect-ratio-vertical'\n  }\n};\nconst Visualizer = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  audioFile,\n  template,\n  isPlaying,\n  onAudioElementCreated\n}, ref) => {\n  _s();\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const sourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n  const particlesRef = useRef([]);\n  const [resolution, setResolution] = useState('1080p'); // Default to 1080p\n  const [audioData, setAudioData] = useState(null);\n  const [use3D, setUse3D] = useState(false);\n\n  // Check if template is a 3D visualization\n  useEffect(() => {\n    // Define which templates should use 3D rendering\n    const threeDTemplates = ['particles3d', 'waveform3d', 'spiral3d', 'kaleidoscope3d'];\n    setUse3D(threeDTemplates.includes(template));\n  }, [template]);\n\n  // Audio initialization effect\n  useEffect(() => {\n    if (!audioFile) return;\n    let isInitialized = false;\n    const initAudio = async () => {\n      try {\n        // Initialize audio context only on first load or if it doesn't exist\n        if (!audioContextRef.current) {\n          // Create context on user interaction\n          const context = new (window.AudioContext || window.webkitAudioContext)();\n          audioContextRef.current = context;\n\n          // Create analyzer\n          const analyser = context.createAnalyser();\n          analyser.fftSize = 2048;\n          analyserRef.current = analyser;\n        }\n\n        // Create and set up audio element\n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n\n        // Set the audio source\n        const timestamp = new Date().getTime();\n        audioElement.src = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\n\n        // Wait for audio to be loaded enough to play\n        await new Promise((resolve, reject) => {\n          const loadHandler = () => {\n            console.log('Audio loaded, duration:', audioElement.duration);\n            resolve();\n          };\n          const errorHandler = error => {\n            console.error('Audio load error:', error);\n            reject(error);\n          };\n          audioElement.addEventListener('canplaythrough', loadHandler, {\n            once: true\n          });\n          audioElement.addEventListener('error', errorHandler, {\n            once: true\n          });\n          audioElement.load();\n        });\n\n        // Only create new media source if not already connected\n        if (!isInitialized) {\n          // Ensure old source is disconnected\n          if (sourceRef.current) {\n            sourceRef.current.disconnect();\n          }\n\n          // Create and connect new media source\n          const mediaSource = audioContextRef.current.createMediaElementSource(audioElement);\n          sourceRef.current = mediaSource;\n          mediaSource.connect(analyserRef.current);\n          analyserRef.current.connect(audioContextRef.current.destination);\n          isInitialized = true;\n        }\n\n        // Set up event listeners\n        const onSeeking = () => {\n          console.log('Seeking:', audioElement.currentTime);\n          if (isPlaying) startVisualization();\n        };\n        const onTimeUpdate = () => {\n          console.log('Time update:', audioElement.currentTime);\n          if (isPlaying) startVisualization();\n        };\n        audioElement.addEventListener('seeking', onSeeking);\n        audioElement.addEventListener('seeked', onSeeking);\n        audioElement.addEventListener('timeupdate', onTimeUpdate);\n\n        // Store reference and notify parent\n        audioElementRef.current = audioElement;\n        onAudioElementCreated(audioElement);\n\n        // Resume audio context if suspended\n        if (audioContextRef.current.state === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n        return () => {\n          console.log('Cleaning up audio element');\n          audioElement.removeEventListener('seeking', onSeeking);\n          audioElement.removeEventListener('seeked', onSeeking);\n          audioElement.removeEventListener('timeupdate', onTimeUpdate);\n          audioElement.pause();\n          audioElement.src = '';\n          onAudioElementCreated(null);\n        };\n      } catch (error) {\n        console.error('Audio initialization error:', error);\n        alert('Error loading audio. Please try again.');\n      }\n    };\n    initAudio();\n  }, [audioFile]); // Remove isPlaying from dependencies\n\n  // Separate playback control effect\n  useEffect(() => {\n    const audioElement = audioElementRef.current;\n    if (!audioElement) return;\n    const playAudio = async () => {\n      try {\n        var _audioContextRef$curr;\n        // Ensure audio context is running\n        if (((_audioContextRef$curr = audioContextRef.current) === null || _audioContextRef$curr === void 0 ? void 0 : _audioContextRef$curr.state) === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n        console.log('Playing audio...');\n        await audioElement.play();\n        startVisualization();\n      } catch (error) {\n        console.error('Playback error:', error);\n        alert('Error playing audio. Please try again.');\n      }\n    };\n    if (isPlaying) {\n      playAudio();\n    } else {\n      console.log('Pausing audio...');\n      audioElement.pause();\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isPlaying]);\n\n  // Add effect to handle template changes\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Clear the entire canvas\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Restart visualization if playing\n    if (isPlaying) {\n      startVisualization();\n    }\n  }, [template]);\n\n  // Update canvas size based on selected resolution\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const {\n      width,\n      height\n    } = RESOLUTIONS[resolution];\n\n    // Set canvas dimensions to match the selected resolution\n    canvas.width = width;\n    canvas.height = height;\n\n    // Clear canvas with new dimensions\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Adjust container styles based on aspect ratio\n    if (containerRef.current) {\n      if (resolution === 'Vertical') {\n        containerRef.current.style.width = 'auto';\n        containerRef.current.style.height = '80vh';\n      } else if (resolution === 'Square') {\n        containerRef.current.style.width = '720px';\n        containerRef.current.style.height = '720px';\n        containerRef.current.style.maxWidth = '720px';\n        containerRef.current.style.maxHeight = '720px';\n      } else {\n        containerRef.current.style.width = '100%';\n        containerRef.current.style.height = 'auto';\n        containerRef.current.style.maxWidth = `${width}px`;\n        containerRef.current.style.maxHeight = `${height}px`;\n      }\n    }\n\n    // Restart visualization if playing\n    if (isPlaying) {\n      startVisualization();\n    }\n\n    // Initialize particles for the new canvas size\n    if (template === 'particles') {\n      initParticles(ctx);\n    }\n  }, [resolution, isPlaying, template]);\n\n  // Function to change resolution\n  const changeResolution = newResolution => {\n    if (RESOLUTIONS[newResolution]) {\n      setResolution(newResolution);\n    }\n  };\n\n  // Expose changeResolution to parent via ref\n  React.useImperativeHandle(ref, () => ({\n    changeResolution,\n    getCurrentResolution: () => resolution\n  }));\n  const initParticles = ctx => {\n    particlesRef.current = [];\n    const numParticles = 100;\n    for (let i = 0; i < numParticles; i++) {\n      particlesRef.current.push({\n        x: Math.random() * ctx.canvas.width,\n        y: Math.random() * ctx.canvas.height,\n        size: Math.random() * 4 + 2,\n        speedX: Math.random() * 4 - 2,\n        speedY: Math.random() * 4 - 2,\n        hue: Math.random() * 360\n      });\n    }\n  };\n  const updateAndDrawParticles = (ctx, dataArray, bufferLength) => {\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\n    const intensity = avgFreq / 256;\n    particlesRef.current.forEach((particle, i) => {\n      // Update position\n      particle.x += particle.speedX * (1 + intensity);\n      particle.y += particle.speedY * (1 + intensity);\n\n      // Wrap around screen\n      if (particle.x < 0) particle.x = ctx.canvas.width;\n      if (particle.x > ctx.canvas.width) particle.x = 0;\n      if (particle.y < 0) particle.y = ctx.canvas.height;\n      if (particle.y > ctx.canvas.height) particle.y = 0;\n\n      // Update color based on frequency\n      const freqIndex = Math.floor(i / particlesRef.current.length * bufferLength);\n      const freq = dataArray[freqIndex];\n      const hue = (particle.hue + freq / 2) % 360;\n\n      // Draw particle\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, particle.size * (1 + intensity * 0.5), 0, Math.PI * 2);\n      ctx.fillStyle = `hsla(${hue}, 100%, 50%, ${0.7 + intensity * 0.3})`;\n      ctx.fill();\n\n      // Draw connections\n      particlesRef.current.forEach((otherParticle, j) => {\n        if (i === j) return;\n        const dx = particle.x - otherParticle.x;\n        const dy = particle.y - otherParticle.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < 100) {\n          ctx.beginPath();\n          ctx.moveTo(particle.x, particle.y);\n          ctx.lineTo(otherParticle.x, otherParticle.y);\n          ctx.strokeStyle = `hsla(${hue}, 100%, 50%, ${(1 - distance / 100) * 0.2})`;\n          ctx.lineWidth = 1;\n          ctx.stroke();\n        }\n      });\n    });\n  };\n\n  // Start visualization\n  const startVisualization = () => {\n    if (!analyserRef.current || !canvasRef.current) return;\n    const analyser = analyserRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Create data arrays for audio analysis\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const timeArray = new Uint8Array(bufferLength);\n\n    // Get initial data\n    analyser.getByteFrequencyData(dataArray);\n    analyser.getByteTimeDomainData(timeArray);\n\n    // Update audio data for 3D visualizer\n    setAudioData({\n      dataArray: Array.from(dataArray),\n      timeArray: Array.from(timeArray),\n      bufferLength\n    });\n\n    // Cancel any existing animation frame\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n\n    // Skip 2D visualization if using 3D\n    if (use3D) {\n      // For 3D, we need to continuously update the audio data\n      const update3DAudio = () => {\n        animationFrameRef.current = requestAnimationFrame(update3DAudio);\n\n        // Get frequency and time domain data\n        analyser.getByteFrequencyData(dataArray);\n        analyser.getByteTimeDomainData(timeArray);\n\n        // Update audio data for 3D visualizer\n        setAudioData({\n          dataArray: Array.from(dataArray),\n          timeArray: Array.from(timeArray),\n          bufferLength\n        });\n      };\n      update3DAudio();\n      return;\n    }\n\n    // Animation function for 2D visualizations\n    const draw = () => {\n      animationFrameRef.current = requestAnimationFrame(draw);\n\n      // Get frequency and time domain data\n      analyser.getByteFrequencyData(dataArray);\n      analyser.getByteTimeDomainData(timeArray);\n\n      // Clear canvas\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw visualization based on template\n      switch (template) {\n        case 'waveform':\n          drawWaveform(ctx, dataArray, bufferLength);\n          break;\n        case 'bars':\n          drawBars(ctx, dataArray, bufferLength);\n          break;\n        case 'circles':\n          drawCircles(ctx, dataArray, bufferLength);\n          break;\n        case 'kaleidoscope':\n          drawKaleidoscope(ctx, dataArray, timeArray, bufferLength);\n          break;\n        case 'spiral':\n          drawSpiral(ctx, dataArray, timeArray, bufferLength);\n          break;\n        case 'particles':\n          updateAndDrawParticles(ctx, dataArray, bufferLength);\n          break;\n        default:\n          drawWaveform(ctx, dataArray, bufferLength);\n      }\n    };\n    draw();\n  };\n  const drawWaveform = (ctx, dataArray, bufferLength) => {\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'rgb(0, 255, 0)';\n    ctx.beginPath();\n    const sliceWidth = ctx.canvas.width / bufferLength;\n    let x = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      const v = dataArray[i] / 128.0;\n      const y = v * ctx.canvas.height / 2;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n      x += sliceWidth;\n    }\n    ctx.lineTo(ctx.canvas.width, ctx.canvas.height / 2);\n    ctx.stroke();\n  };\n  const drawBars = (ctx, dataArray, bufferLength) => {\n    const barWidth = ctx.canvas.width / bufferLength * 2.5;\n    let barHeight;\n    let x = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      barHeight = dataArray[i] / 2;\n      ctx.fillStyle = `rgb(${barHeight + 100}, 50, 50)`;\n      ctx.fillRect(x, ctx.canvas.height - barHeight, barWidth, barHeight);\n      x += barWidth + 1;\n    }\n  };\n  const drawCircles = (ctx, dataArray, bufferLength) => {\n    const centerX = ctx.canvas.width / 2;\n    const centerY = ctx.canvas.height / 2;\n    const maxRadius = Math.min(centerX, centerY) * 0.8;\n    for (let i = 0; i < bufferLength; i++) {\n      const radius = dataArray[i] / 255 * maxRadius;\n      const angle = i / bufferLength * Math.PI * 2;\n      const x = centerX + Math.cos(angle) * radius;\n      const y = centerY + Math.sin(angle) * radius;\n      ctx.beginPath();\n      ctx.arc(x, y, 2, 0, Math.PI * 2);\n      ctx.fillStyle = `hsl(${i / bufferLength * 360}, 100%, 50%)`;\n      ctx.fill();\n    }\n  };\n  const drawKaleidoscope = (ctx, dataArray, timeArray, bufferLength) => {\n    const centerX = ctx.canvas.width / 2;\n    const centerY = ctx.canvas.height / 2;\n    const segments = 8;\n    const angleStep = Math.PI * 2 / segments;\n\n    // Calculate average frequency for color\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\n    const hue = (avgFreq + performance.now() / 50) % 360;\n    ctx.save();\n    ctx.translate(centerX, centerY);\n    for (let s = 0; s < segments; s++) {\n      ctx.rotate(angleStep);\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      for (let i = 0; i < bufferLength; i += 4) {\n        const freq = dataArray[i];\n        const time = timeArray[i];\n        const x = i / bufferLength * 200;\n        const y = freq / 256 * 200;\n        const wave = Math.sin(time / 128 * Math.PI + x / 50) * 20;\n        ctx.lineTo(x, y + wave);\n      }\n      ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Mirror effect\n      ctx.scale(-1, 1);\n    }\n    ctx.restore();\n  };\n  const drawSpiral = (ctx, dataArray, timeArray, bufferLength) => {\n    const centerX = ctx.canvas.width / 2;\n    const centerY = ctx.canvas.height / 2;\n    const maxRadius = Math.min(centerX, centerY) * 0.9;\n\n    // Calculate average frequency for effects\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\n    const time = performance.now() / 1000;\n    ctx.save();\n    ctx.translate(centerX, centerY);\n    for (let i = 0; i < bufferLength; i += 2) {\n      const freq = dataArray[i];\n      const amplitude = freq / 256;\n\n      // Create spiral effect\n      const angle = i / bufferLength * Math.PI * 20 + time;\n      const radius = i / bufferLength * maxRadius * (1 + amplitude * 0.2);\n      const x = Math.cos(angle) * radius;\n      const y = Math.sin(angle) * radius;\n      const hue = (angle * 30 + time * 50) % 360;\n      const size = 2 + amplitude * 5;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fillStyle = `hsla(${hue}, 100%, 50%, ${0.5 + amplitude * 0.5})`;\n      ctx.fill();\n\n      // Add connecting lines for more psychedelic effect\n      if (i > 0) {\n        const prevAngle = (i - 2) / bufferLength * Math.PI * 20 + time;\n        const prevRadius = (i - 2) / bufferLength * maxRadius;\n        const prevX = Math.cos(prevAngle) * prevRadius;\n        const prevY = Math.sin(prevAngle) * prevRadius;\n        ctx.beginPath();\n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(x, y);\n        ctx.strokeStyle = `hsla(${hue}, 100%, 50%, 0.3)`;\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n    }\n    ctx.restore();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"visualizer-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: `visualizer-aspect-container ${RESOLUTIONS[resolution].className}`,\n      children: [use3D ? /*#__PURE__*/_jsxDEV(ThreeVisualizer, {\n        audioData: audioData,\n        template: template.replace('3d', '') // Remove '3d' suffix for the ThreeVisualizer\n        ,\n        isPlaying: isPlaying\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"visualizer-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resolution-indicator\",\n        children: [resolution, \" (\", RESOLUTIONS[resolution].width, \"\\xD7\", RESOLUTIONS[resolution].height, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 551,\n    columnNumber: 5\n  }, this);\n}, \"yphw8ce6beSd9NdRpFAlHUBWJXQ=\")), \"yphw8ce6beSd9NdRpFAlHUBWJXQ=\");\n_c2 = Visualizer;\nexport default Visualizer;\nvar _c, _c2;\n$RefreshReg$(_c, \"Visualizer$forwardRef\");\n$RefreshReg$(_c2, \"Visualizer\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","ThreeVisualizer","jsxDEV","_jsxDEV","RESOLUTIONS","width","height","className","Visualizer","_s","_c","audioFile","template","isPlaying","onAudioElementCreated","ref","canvasRef","containerRef","audioContextRef","analyserRef","animationFrameRef","sourceRef","audioElementRef","particlesRef","resolution","setResolution","audioData","setAudioData","use3D","setUse3D","threeDTemplates","includes","isInitialized","initAudio","current","context","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","audioElement","Audio","crossOrigin","preload","timestamp","Date","getTime","src","path","Promise","resolve","reject","loadHandler","console","log","duration","errorHandler","error","addEventListener","once","load","disconnect","mediaSource","createMediaElementSource","connect","destination","onSeeking","currentTime","startVisualization","onTimeUpdate","state","resume","removeEventListener","pause","alert","playAudio","_audioContextRef$curr","play","cancelAnimationFrame","canvas","ctx","getContext","fillStyle","fillRect","style","maxWidth","maxHeight","initParticles","changeResolution","newResolution","useImperativeHandle","getCurrentResolution","numParticles","i","push","x","Math","random","y","size","speedX","speedY","hue","updateAndDrawParticles","dataArray","bufferLength","avgFreq","reduce","a","b","intensity","forEach","particle","freqIndex","floor","length","freq","beginPath","arc","PI","fill","otherParticle","j","dx","dy","distance","sqrt","moveTo","lineTo","strokeStyle","lineWidth","stroke","frequencyBinCount","Uint8Array","timeArray","getByteFrequencyData","getByteTimeDomainData","Array","from","update3DAudio","requestAnimationFrame","draw","drawWaveform","drawBars","drawCircles","drawKaleidoscope","drawSpiral","sliceWidth","v","barWidth","barHeight","centerX","centerY","maxRadius","min","radius","angle","cos","sin","segments","angleStep","performance","now","save","translate","s","rotate","time","wave","scale","restore","amplitude","prevAngle","prevRadius","prevX","prevY","children","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/Visualizer.js"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState } from 'react';\r\nimport ThreeVisualizer from './ThreeVisualizer';\r\nimport './Visualizer.css';\r\n\r\nconst RESOLUTIONS = {\r\n  '4K': { width: 3840, height: 2160, className: 'aspect-ratio-4k' },\r\n  '1080p': { width: 1920, height: 1080, className: 'aspect-ratio-1080p' },\r\n  '720p': { width: 1280, height: 720, className: 'aspect-ratio-720p' },\r\n  'Square': { width: 720, height: 720, className: 'aspect-ratio-square' },\r\n  'Vertical': { width: 1080, height: 1920, className: 'aspect-ratio-vertical' }\r\n};\r\n\r\nconst Visualizer = forwardRef(({ audioFile, template, isPlaying, onAudioElementCreated }, ref) => {\r\n  const canvasRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const audioContextRef = useRef(null);\r\n  const analyserRef = useRef(null);\r\n  const animationFrameRef = useRef(null);\r\n  const sourceRef = useRef(null);\r\n  const audioElementRef = useRef(null);\r\n  const particlesRef = useRef([]);\r\n  const [resolution, setResolution] = useState('1080p'); // Default to 1080p\r\n  const [audioData, setAudioData] = useState(null);\r\n  const [use3D, setUse3D] = useState(false);\r\n\r\n  // Check if template is a 3D visualization\r\n  useEffect(() => {\r\n    // Define which templates should use 3D rendering\r\n    const threeDTemplates = ['particles3d', 'waveform3d', 'spiral3d', 'kaleidoscope3d'];\r\n    setUse3D(threeDTemplates.includes(template));\r\n  }, [template]);\r\n\r\n  // Audio initialization effect\r\n  useEffect(() => {\r\n    if (!audioFile) return;\r\n\r\n    let isInitialized = false;\r\n\r\n    const initAudio = async () => {\r\n      try {\r\n        // Initialize audio context only on first load or if it doesn't exist\r\n        if (!audioContextRef.current) {\r\n          // Create context on user interaction\r\n          const context = new (window.AudioContext || window.webkitAudioContext)();\r\n          audioContextRef.current = context;\r\n          \r\n          // Create analyzer\r\n          const analyser = context.createAnalyser();\r\n          analyser.fftSize = 2048;\r\n          analyserRef.current = analyser;\r\n        }\r\n\r\n        // Create and set up audio element\r\n        const audioElement = new Audio();\r\n        audioElement.crossOrigin = \"anonymous\";\r\n        audioElement.preload = \"auto\";\r\n\r\n        // Set the audio source\r\n        const timestamp = new Date().getTime();\r\n        audioElement.src = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\r\n\r\n        // Wait for audio to be loaded enough to play\r\n        await new Promise((resolve, reject) => {\r\n          const loadHandler = () => {\r\n            console.log('Audio loaded, duration:', audioElement.duration);\r\n            resolve();\r\n          };\r\n\r\n          const errorHandler = (error) => {\r\n            console.error('Audio load error:', error);\r\n            reject(error);\r\n          };\r\n\r\n          audioElement.addEventListener('canplaythrough', loadHandler, { once: true });\r\n          audioElement.addEventListener('error', errorHandler, { once: true });\r\n          audioElement.load();\r\n        });\r\n\r\n        // Only create new media source if not already connected\r\n        if (!isInitialized) {\r\n          // Ensure old source is disconnected\r\n          if (sourceRef.current) {\r\n            sourceRef.current.disconnect();\r\n          }\r\n\r\n          // Create and connect new media source\r\n          const mediaSource = audioContextRef.current.createMediaElementSource(audioElement);\r\n          sourceRef.current = mediaSource;\r\n          mediaSource.connect(analyserRef.current);\r\n          analyserRef.current.connect(audioContextRef.current.destination);\r\n          isInitialized = true;\r\n        }\r\n\r\n        // Set up event listeners\r\n        const onSeeking = () => {\r\n          console.log('Seeking:', audioElement.currentTime);\r\n          if (isPlaying) startVisualization();\r\n        };\r\n\r\n        const onTimeUpdate = () => {\r\n          console.log('Time update:', audioElement.currentTime);\r\n          if (isPlaying) startVisualization();\r\n        };\r\n\r\n        audioElement.addEventListener('seeking', onSeeking);\r\n        audioElement.addEventListener('seeked', onSeeking);\r\n        audioElement.addEventListener('timeupdate', onTimeUpdate);\r\n\r\n        // Store reference and notify parent\r\n        audioElementRef.current = audioElement;\r\n        onAudioElementCreated(audioElement);\r\n\r\n        // Resume audio context if suspended\r\n        if (audioContextRef.current.state === 'suspended') {\r\n          await audioContextRef.current.resume();\r\n        }\r\n\r\n        return () => {\r\n          console.log('Cleaning up audio element');\r\n          audioElement.removeEventListener('seeking', onSeeking);\r\n          audioElement.removeEventListener('seeked', onSeeking);\r\n          audioElement.removeEventListener('timeupdate', onTimeUpdate);\r\n          audioElement.pause();\r\n          audioElement.src = '';\r\n          onAudioElementCreated(null);\r\n        };\r\n      } catch (error) {\r\n        console.error('Audio initialization error:', error);\r\n        alert('Error loading audio. Please try again.');\r\n      }\r\n    };\r\n\r\n    initAudio();\r\n  }, [audioFile]); // Remove isPlaying from dependencies\r\n\r\n  // Separate playback control effect\r\n  useEffect(() => {\r\n    const audioElement = audioElementRef.current;\r\n    if (!audioElement) return;\r\n\r\n    const playAudio = async () => {\r\n      try {\r\n        // Ensure audio context is running\r\n        if (audioContextRef.current?.state === 'suspended') {\r\n          await audioContextRef.current.resume();\r\n        }\r\n        \r\n        console.log('Playing audio...');\r\n        await audioElement.play();\r\n        startVisualization();\r\n      } catch (error) {\r\n        console.error('Playback error:', error);\r\n        alert('Error playing audio. Please try again.');\r\n      }\r\n    };\r\n\r\n    if (isPlaying) {\r\n      playAudio();\r\n    } else {\r\n      console.log('Pausing audio...');\r\n      audioElement.pause();\r\n      cancelAnimationFrame(animationFrameRef.current);\r\n    }\r\n  }, [isPlaying]);\r\n\r\n  // Add effect to handle template changes\r\n  useEffect(() => {\r\n    if (!canvasRef.current) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    // Clear the entire canvas\r\n    ctx.fillStyle = 'rgb(0, 0, 0)';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Restart visualization if playing\r\n    if (isPlaying) {\r\n      startVisualization();\r\n    }\r\n  }, [template]);\r\n\r\n  // Update canvas size based on selected resolution\r\n  useEffect(() => {\r\n    if (!canvasRef.current) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const { width, height } = RESOLUTIONS[resolution];\r\n    \r\n    // Set canvas dimensions to match the selected resolution\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    \r\n    // Clear canvas with new dimensions\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.fillStyle = 'rgb(0, 0, 0)';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    \r\n    // Adjust container styles based on aspect ratio\r\n    if (containerRef.current) {\r\n      if (resolution === 'Vertical') {\r\n        containerRef.current.style.width = 'auto';\r\n        containerRef.current.style.height = '80vh';\r\n      } else if (resolution === 'Square') {\r\n        containerRef.current.style.width = '720px';\r\n        containerRef.current.style.height = '720px';\r\n        containerRef.current.style.maxWidth = '720px';\r\n        containerRef.current.style.maxHeight = '720px';\r\n      } else {\r\n        containerRef.current.style.width = '100%';\r\n        containerRef.current.style.height = 'auto';\r\n        containerRef.current.style.maxWidth = `${width}px`;\r\n        containerRef.current.style.maxHeight = `${height}px`;\r\n      }\r\n    }\r\n    \r\n    // Restart visualization if playing\r\n    if (isPlaying) {\r\n      startVisualization();\r\n    }\r\n    \r\n    // Initialize particles for the new canvas size\r\n    if (template === 'particles') {\r\n      initParticles(ctx);\r\n    }\r\n  }, [resolution, isPlaying, template]);\r\n\r\n  // Function to change resolution\r\n  const changeResolution = (newResolution) => {\r\n    if (RESOLUTIONS[newResolution]) {\r\n      setResolution(newResolution);\r\n    }\r\n  };\r\n\r\n  // Expose changeResolution to parent via ref\r\n  React.useImperativeHandle(ref, () => ({\r\n    changeResolution,\r\n    getCurrentResolution: () => resolution\r\n  }));\r\n\r\n  const initParticles = (ctx) => {\r\n    particlesRef.current = [];\r\n    const numParticles = 100;\r\n    \r\n    for (let i = 0; i < numParticles; i++) {\r\n      particlesRef.current.push({\r\n        x: Math.random() * ctx.canvas.width,\r\n        y: Math.random() * ctx.canvas.height,\r\n        size: Math.random() * 4 + 2,\r\n        speedX: Math.random() * 4 - 2,\r\n        speedY: Math.random() * 4 - 2,\r\n        hue: Math.random() * 360\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateAndDrawParticles = (ctx, dataArray, bufferLength) => {\r\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\r\n    const intensity = avgFreq / 256;\r\n    \r\n    particlesRef.current.forEach((particle, i) => {\r\n      // Update position\r\n      particle.x += particle.speedX * (1 + intensity);\r\n      particle.y += particle.speedY * (1 + intensity);\r\n      \r\n      // Wrap around screen\r\n      if (particle.x < 0) particle.x = ctx.canvas.width;\r\n      if (particle.x > ctx.canvas.width) particle.x = 0;\r\n      if (particle.y < 0) particle.y = ctx.canvas.height;\r\n      if (particle.y > ctx.canvas.height) particle.y = 0;\r\n      \r\n      // Update color based on frequency\r\n      const freqIndex = Math.floor((i / particlesRef.current.length) * bufferLength);\r\n      const freq = dataArray[freqIndex];\r\n      const hue = (particle.hue + freq / 2) % 360;\r\n      \r\n      // Draw particle\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        particle.x,\r\n        particle.y,\r\n        particle.size * (1 + intensity * 0.5),\r\n        0,\r\n        Math.PI * 2\r\n      );\r\n      ctx.fillStyle = `hsla(${hue}, 100%, 50%, ${0.7 + intensity * 0.3})`;\r\n      ctx.fill();\r\n      \r\n      // Draw connections\r\n      particlesRef.current.forEach((otherParticle, j) => {\r\n        if (i === j) return;\r\n        \r\n        const dx = particle.x - otherParticle.x;\r\n        const dy = particle.y - otherParticle.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < 100) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y);\r\n          ctx.lineTo(otherParticle.x, otherParticle.y);\r\n          ctx.strokeStyle = `hsla(${hue}, 100%, 50%, ${(1 - distance / 100) * 0.2})`;\r\n          ctx.lineWidth = 1;\r\n          ctx.stroke();\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  // Start visualization\r\n  const startVisualization = () => {\r\n    if (!analyserRef.current || !canvasRef.current) return;\r\n    \r\n    const analyser = analyserRef.current;\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    // Create data arrays for audio analysis\r\n    const bufferLength = analyser.frequencyBinCount;\r\n    const dataArray = new Uint8Array(bufferLength);\r\n    const timeArray = new Uint8Array(bufferLength);\r\n    \r\n    // Get initial data\r\n    analyser.getByteFrequencyData(dataArray);\r\n    analyser.getByteTimeDomainData(timeArray);\r\n    \r\n    // Update audio data for 3D visualizer\r\n    setAudioData({ \r\n      dataArray: Array.from(dataArray), \r\n      timeArray: Array.from(timeArray), \r\n      bufferLength \r\n    });\r\n    \r\n    // Cancel any existing animation frame\r\n    if (animationFrameRef.current) {\r\n      cancelAnimationFrame(animationFrameRef.current);\r\n    }\r\n    \r\n    // Skip 2D visualization if using 3D\r\n    if (use3D) {\r\n      // For 3D, we need to continuously update the audio data\r\n      const update3DAudio = () => {\r\n        animationFrameRef.current = requestAnimationFrame(update3DAudio);\r\n        \r\n        // Get frequency and time domain data\r\n        analyser.getByteFrequencyData(dataArray);\r\n        analyser.getByteTimeDomainData(timeArray);\r\n        \r\n        // Update audio data for 3D visualizer\r\n        setAudioData({ \r\n          dataArray: Array.from(dataArray), \r\n          timeArray: Array.from(timeArray), \r\n          bufferLength \r\n        });\r\n      };\r\n      \r\n      update3DAudio();\r\n      return;\r\n    }\r\n    \r\n    // Animation function for 2D visualizations\r\n    const draw = () => {\r\n      animationFrameRef.current = requestAnimationFrame(draw);\r\n      \r\n      // Get frequency and time domain data\r\n      analyser.getByteFrequencyData(dataArray);\r\n      analyser.getByteTimeDomainData(timeArray);\r\n      \r\n      // Clear canvas\r\n      ctx.fillStyle = 'rgb(0, 0, 0)';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Draw visualization based on template\r\n      switch (template) {\r\n        case 'waveform':\r\n          drawWaveform(ctx, dataArray, bufferLength);\r\n          break;\r\n        case 'bars':\r\n          drawBars(ctx, dataArray, bufferLength);\r\n          break;\r\n        case 'circles':\r\n          drawCircles(ctx, dataArray, bufferLength);\r\n          break;\r\n        case 'kaleidoscope':\r\n          drawKaleidoscope(ctx, dataArray, timeArray, bufferLength);\r\n          break;\r\n        case 'spiral':\r\n          drawSpiral(ctx, dataArray, timeArray, bufferLength);\r\n          break;\r\n        case 'particles':\r\n          updateAndDrawParticles(ctx, dataArray, bufferLength);\r\n          break;\r\n        default:\r\n          drawWaveform(ctx, dataArray, bufferLength);\r\n      }\r\n    };\r\n    \r\n    draw();\r\n  };\r\n\r\n  const drawWaveform = (ctx, dataArray, bufferLength) => {\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'rgb(0, 255, 0)';\r\n    ctx.beginPath();\r\n\r\n    const sliceWidth = ctx.canvas.width / bufferLength;\r\n    let x = 0;\r\n\r\n    for (let i = 0; i < bufferLength; i++) {\r\n      const v = dataArray[i] / 128.0;\r\n      const y = v * ctx.canvas.height / 2;\r\n\r\n      if (i === 0) {\r\n        ctx.moveTo(x, y);\r\n      } else {\r\n        ctx.lineTo(x, y);\r\n      }\r\n\r\n      x += sliceWidth;\r\n    }\r\n\r\n    ctx.lineTo(ctx.canvas.width, ctx.canvas.height / 2);\r\n    ctx.stroke();\r\n  };\r\n\r\n  const drawBars = (ctx, dataArray, bufferLength) => {\r\n    const barWidth = (ctx.canvas.width / bufferLength) * 2.5;\r\n    let barHeight;\r\n    let x = 0;\r\n\r\n    for (let i = 0; i < bufferLength; i++) {\r\n      barHeight = dataArray[i] / 2;\r\n\r\n      ctx.fillStyle = `rgb(${barHeight + 100}, 50, 50)`;\r\n      ctx.fillRect(x, ctx.canvas.height - barHeight, barWidth, barHeight);\r\n\r\n      x += barWidth + 1;\r\n    }\r\n  };\r\n\r\n  const drawCircles = (ctx, dataArray, bufferLength) => {\r\n    const centerX = ctx.canvas.width / 2;\r\n    const centerY = ctx.canvas.height / 2;\r\n    const maxRadius = Math.min(centerX, centerY) * 0.8;\r\n\r\n    for (let i = 0; i < bufferLength; i++) {\r\n      const radius = (dataArray[i] / 255) * maxRadius;\r\n      const angle = (i / bufferLength) * Math.PI * 2;\r\n\r\n      const x = centerX + Math.cos(angle) * radius;\r\n      const y = centerY + Math.sin(angle) * radius;\r\n\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, 2, 0, Math.PI * 2);\r\n      ctx.fillStyle = `hsl(${(i / bufferLength) * 360}, 100%, 50%)`;\r\n      ctx.fill();\r\n    }\r\n  };\r\n\r\n  const drawKaleidoscope = (ctx, dataArray, timeArray, bufferLength) => {\r\n    const centerX = ctx.canvas.width / 2;\r\n    const centerY = ctx.canvas.height / 2;\r\n    const segments = 8;\r\n    const angleStep = (Math.PI * 2) / segments;\r\n    \r\n    // Calculate average frequency for color\r\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\r\n    const hue = (avgFreq + performance.now() / 50) % 360;\r\n    \r\n    ctx.save();\r\n    ctx.translate(centerX, centerY);\r\n\r\n    for (let s = 0; s < segments; s++) {\r\n      ctx.rotate(angleStep);\r\n      \r\n      ctx.beginPath();\r\n      ctx.moveTo(0, 0);\r\n      \r\n      for (let i = 0; i < bufferLength; i += 4) {\r\n        const freq = dataArray[i];\r\n        const time = timeArray[i];\r\n        const x = (i / bufferLength) * 200;\r\n        const y = (freq / 256) * 200;\r\n        \r\n        const wave = Math.sin(time / 128 * Math.PI + x / 50) * 20;\r\n        \r\n        ctx.lineTo(x, y + wave);\r\n      }\r\n      \r\n      ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;\r\n      ctx.lineWidth = 2;\r\n      ctx.stroke();\r\n      \r\n      // Mirror effect\r\n      ctx.scale(-1, 1);\r\n    }\r\n    \r\n    ctx.restore();\r\n  };\r\n\r\n  const drawSpiral = (ctx, dataArray, timeArray, bufferLength) => {\r\n    const centerX = ctx.canvas.width / 2;\r\n    const centerY = ctx.canvas.height / 2;\r\n    const maxRadius = Math.min(centerX, centerY) * 0.9;\r\n    \r\n    // Calculate average frequency for effects\r\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\r\n    const time = performance.now() / 1000;\r\n    \r\n    ctx.save();\r\n    ctx.translate(centerX, centerY);\r\n    \r\n    for (let i = 0; i < bufferLength; i += 2) {\r\n      const freq = dataArray[i];\r\n      const amplitude = freq / 256;\r\n      \r\n      // Create spiral effect\r\n      const angle = (i / bufferLength) * Math.PI * 20 + time;\r\n      const radius = (i / bufferLength) * maxRadius * (1 + amplitude * 0.2);\r\n      \r\n      const x = Math.cos(angle) * radius;\r\n      const y = Math.sin(angle) * radius;\r\n      \r\n      const hue = (angle * 30 + time * 50) % 360;\r\n      const size = 2 + amplitude * 5;\r\n      \r\n      ctx.beginPath();\r\n      ctx.arc(x, y, size, 0, Math.PI * 2);\r\n      ctx.fillStyle = `hsla(${hue}, 100%, 50%, ${0.5 + amplitude * 0.5})`;\r\n      ctx.fill();\r\n      \r\n      // Add connecting lines for more psychedelic effect\r\n      if (i > 0) {\r\n        const prevAngle = ((i - 2) / bufferLength) * Math.PI * 20 + time;\r\n        const prevRadius = ((i - 2) / bufferLength) * maxRadius;\r\n        const prevX = Math.cos(prevAngle) * prevRadius;\r\n        const prevY = Math.sin(prevAngle) * prevRadius;\r\n        \r\n        ctx.beginPath();\r\n        ctx.moveTo(prevX, prevY);\r\n        ctx.lineTo(x, y);\r\n        ctx.strokeStyle = `hsla(${hue}, 100%, 50%, 0.3)`;\r\n        ctx.lineWidth = 1;\r\n        ctx.stroke();\r\n      }\r\n    }\r\n    \r\n    ctx.restore();\r\n  };\r\n\r\n  return (\r\n    <div className=\"visualizer-container\">\r\n      <div \r\n        ref={containerRef}\r\n        className={`visualizer-aspect-container ${RESOLUTIONS[resolution].className}`}\r\n      >\r\n        {use3D ? (\r\n          <ThreeVisualizer \r\n            audioData={audioData}\r\n            template={template.replace('3d', '')} // Remove '3d' suffix for the ThreeVisualizer\r\n            isPlaying={isPlaying}\r\n          />\r\n        ) : (\r\n          <canvas ref={canvasRef} className=\"visualizer-canvas\"></canvas>\r\n        )}\r\n        <div className=\"visualizer-overlay\"></div>\r\n        <div className=\"resolution-indicator\">{resolution} ({RESOLUTIONS[resolution].width}×{RESOLUTIONS[resolution].height})</div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Visualizer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}