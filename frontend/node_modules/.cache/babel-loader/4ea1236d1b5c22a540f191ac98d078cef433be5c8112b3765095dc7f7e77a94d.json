{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\VideoExporter.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './VideoExporter.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoExporter = ({\n  visualizerRef,\n  audioFile,\n  isPlaying\n}) => {\n  _s();\n  const [isExporting, setIsExporting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [debug, setDebug] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startTimeRef = useRef(null);\n  const audioDurationRef = useRef(null);\n  const progressIntervalRef = useRef(null);\n  const dataRequestIntervalRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioSourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      cleanupResources();\n    };\n  }, []);\n\n  // Clean up resources function to centralize cleanup logic\n  const cleanupResources = () => {\n    if (progressIntervalRef.current) {\n      clearInterval(progressIntervalRef.current);\n      progressIntervalRef.current = null;\n    }\n    if (dataRequestIntervalRef.current) {\n      clearInterval(dataRequestIntervalRef.current);\n      dataRequestIntervalRef.current = null;\n    }\n    if (audioSourceRef.current) {\n      try {\n        audioSourceRef.current.disconnect();\n      } catch (e) {\n        console.error('Error disconnecting audio source:', e);\n      }\n      audioSourceRef.current = null;\n    }\n    if (audioElementRef.current) {\n      try {\n        audioElementRef.current.pause();\n        // Remove all event listeners\n        audioElementRef.current.oncanplaythrough = null;\n        audioElementRef.current.onerror = null;\n        audioElementRef.current.onended = null;\n        // Clear source and load to release resources\n        audioElementRef.current.removeAttribute('src');\n        audioElementRef.current.load();\n      } catch (e) {\n        console.error('Error cleaning up audio element:', e);\n      }\n      audioElementRef.current = null;\n    }\n    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n      try {\n        audioContextRef.current.close().catch(e => console.error('Error closing audio context:', e));\n      } catch (e) {\n        console.error('Error closing audio context:', e);\n      }\n      audioContextRef.current = null;\n    }\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      try {\n        mediaRecorderRef.current.stop();\n      } catch (e) {\n        console.error('Error stopping media recorder:', e);\n      }\n      mediaRecorderRef.current = null;\n    }\n    chunksRef.current = [];\n  };\n\n  // Validate that the audio file path is valid\n  const validateAudioFile = () => {\n    if (!audioFile) {\n      return false;\n    }\n    if (!audioFile.path) {\n      console.error('Audio file has no path');\n      setDebug('Error: Audio file has no path');\n      return false;\n    }\n    return true;\n  };\n\n  // Function to ensure the visualizer is active and rendering\n  const ensureVisualizerActive = () => {\n    if (!(visualizerRef !== null && visualizerRef !== void 0 && visualizerRef.current)) {\n      console.error('Visualizer reference not available');\n      return false;\n    }\n\n    // Force a render cycle on the canvas to ensure it's active\n    const canvas = visualizerRef.current.getCanvas();\n    if (!canvas) {\n      console.error('Canvas not found in visualizer');\n      return false;\n    }\n    try {\n      // Force a frame to be drawn on the canvas to ensure it has content\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(imageData, 0, 0);\n      return true;\n    } catch (e) {\n      console.error('Error activating visualizer:', e);\n      return false;\n    }\n  };\n  const exportVideo = async () => {\n    if (!(visualizerRef !== null && visualizerRef !== void 0 && visualizerRef.current) || !audioFile) {\n      alert(\"Please upload an audio file first\");\n      return;\n    }\n\n    // Validate audio file\n    if (!validateAudioFile()) {\n      alert(\"Invalid audio file. Please upload a valid audio file.\");\n      return;\n    }\n\n    // Check if already exporting\n    if (isExporting) {\n      console.log('Already exporting, ignoring request');\n      return;\n    }\n    try {\n      // Clean up any existing resources first\n      cleanupResources();\n      setIsExporting(true);\n      setProgress(0);\n      setDebug('Starting export process...');\n      startTimeRef.current = Date.now();\n\n      // Ensure visualizer is active\n      if (!ensureVisualizerActive()) {\n        throw new Error(\"Could not activate visualizer\");\n      }\n\n      // Get the canvas element from the visualizer using the exposed method\n      const canvas = visualizerRef.current.getCanvas();\n      if (!canvas) {\n        throw new Error(\"Canvas element not found\");\n      }\n      setDebug(`Canvas found, dimensions: ${canvas.width}x${canvas.height}`);\n\n      // Create a stream from the canvas - try multiple methods\n      let stream = null;\n\n      // Method 1: Standard captureStream\n      try {\n        stream = canvas.captureStream(30);\n        setDebug('Canvas stream created with standard captureStream');\n      } catch (e) {\n        console.error('Standard captureStream failed:', e);\n        setDebug('Standard captureStream failed, trying alternatives...');\n      }\n\n      // Method 2: Mozilla captureStream\n      if (!stream) {\n        try {\n          stream = canvas.mozCaptureStream && canvas.mozCaptureStream(30);\n          if (stream) {\n            setDebug('Canvas stream created with mozCaptureStream');\n          }\n        } catch (e) {\n          console.error('mozCaptureStream failed:', e);\n          setDebug('mozCaptureStream failed, trying alternatives...');\n        }\n      }\n\n      // Method 3: WebKit captureStream\n      if (!stream) {\n        try {\n          stream = canvas.webkitCaptureStream && canvas.webkitCaptureStream(30);\n          if (stream) {\n            setDebug('Canvas stream created with webkitCaptureStream');\n          }\n        } catch (e) {\n          console.error('webkitCaptureStream failed:', e);\n          setDebug('webkitCaptureStream failed');\n        }\n      }\n      if (!stream) {\n        throw new Error(\"Your browser doesn't support canvas streaming. Try using a different browser like Chrome.\");\n      }\n\n      // Verify we have video tracks\n      const videoTracks = stream.getVideoTracks();\n      if (videoTracks.length === 0) {\n        throw new Error(\"No video tracks found in canvas stream\");\n      }\n      setDebug(`Stream created with ${videoTracks.length} video tracks`);\n\n      // Log video track details\n      videoTracks.forEach((track, index) => {\n        console.log(`Video track ${index}:`, track.label, track.enabled, track.readyState);\n      });\n\n      // Create audio context and connect to stream - use a more reliable approach\n      try {\n        // Create a new audio context\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        const audioContext = new AudioContext();\n        audioContextRef.current = audioContext;\n\n        // Construct the audio URL with proper encoding\n        const timestamp = new Date().getTime();\n        // Ensure the path is properly encoded\n        const encodedPath = encodeURI(audioFile.path);\n        const audioUrl = `http://localhost:5001${encodedPath}?t=${timestamp}`;\n        console.log('Audio URL:', audioUrl);\n        setDebug(`Using audio URL: ${audioUrl}`);\n\n        // Create a new audio element for playback during recording\n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n        audioElementRef.current = audioElement;\n\n        // Set up error handler before setting source\n        audioElement.onerror = e => {\n          const errorDetail = e.target.error ? `${e.target.error.message || ''} (code: ${e.target.error.code})` : 'Unknown error';\n          console.error('Audio error:', e.target.error);\n          setDebug(`Audio error: ${errorDetail}`);\n          throw new Error(`Audio error: ${errorDetail}`);\n        };\n\n        // Wait for audio to be loaded enough to play\n        setDebug('Loading audio...');\n\n        // Create a promise to handle audio loading\n        const audioLoadPromise = new Promise((resolve, reject) => {\n          // Set up success handler\n          audioElement.oncanplaythrough = () => {\n            console.log('Audio loaded successfully, duration:', audioElement.duration);\n            setDebug('Audio loaded successfully');\n            resolve();\n          };\n\n          // Set up error handler\n          audioElement.onerror = e => {\n            const errorDetail = e.target.error ? `${e.target.error.message || ''} (code: ${e.target.error.code})` : 'Unknown error';\n            console.error('Audio load error:', e.target.error);\n            setDebug(`Audio load error: ${errorDetail}`);\n            reject(new Error(`Audio load error: ${errorDetail}`));\n          };\n\n          // Set a timeout in case the audio never loads\n          const timeoutId = setTimeout(() => {\n            audioElement.oncanplaythrough = null;\n            audioElement.onerror = null;\n            setDebug('Audio load timeout - took too long to load');\n            reject(new Error('Audio load timeout - took too long to load'));\n          }, 10000);\n\n          // Clean up timeout if audio loads or errors\n          const clearTimeoutHandler = () => {\n            clearTimeout(timeoutId);\n          };\n          audioElement.addEventListener('canplaythrough', clearTimeoutHandler, {\n            once: true\n          });\n          audioElement.addEventListener('error', clearTimeoutHandler, {\n            once: true\n          });\n        });\n\n        // Set source AFTER setting up all event handlers\n        audioElement.src = audioUrl;\n\n        // Start loading\n        audioElement.load();\n\n        // Wait for audio to load\n        await audioLoadPromise;\n\n        // Store the duration for progress calculation\n        audioDurationRef.current = audioElement.duration;\n        setDebug(`Audio duration: ${audioDurationRef.current.toFixed(2)} seconds`);\n\n        // Create and connect the audio source\n        const audioSource = audioContext.createMediaElementSource(audioElement);\n        audioSourceRef.current = audioSource;\n        const audioDestination = audioContext.createMediaStreamDestination();\n        audioSource.connect(audioDestination);\n        audioSource.connect(audioContext.destination); // Also connect to speakers\n\n        // Verify we have audio tracks\n        const audioTracks = audioDestination.stream.getAudioTracks();\n        if (audioTracks.length === 0) {\n          setDebug('Warning: No audio tracks found in audio stream');\n        } else {\n          setDebug(`Audio stream created with ${audioTracks.length} audio tracks`);\n\n          // Log audio track details\n          audioTracks.forEach((track, index) => {\n            console.log(`Audio track ${index}:`, track.label, track.enabled, track.readyState);\n          });\n        }\n\n        // Combine video and audio streams\n        const combinedStream = new MediaStream([...videoTracks, ...audioTracks]);\n\n        // Check if combined stream has tracks\n        if (combinedStream.getTracks().length === 0) {\n          throw new Error(\"Combined stream has no tracks\");\n        }\n        setDebug(`Combined stream created with ${combinedStream.getTracks().length} total tracks`);\n\n        // Try different MIME types in order of preference\n        const mimeTypes = ['video/webm;codecs=vp9,opus', 'video/webm;codecs=vp8,opus', 'video/webm;codecs=h264,opus', 'video/webm;codecs=vp9', 'video/webm;codecs=vp8', 'video/webm'];\n        let selectedMimeType = '';\n        for (const type of mimeTypes) {\n          if (MediaRecorder.isTypeSupported(type)) {\n            selectedMimeType = type;\n            setDebug(`Using MIME type: ${selectedMimeType}`);\n            break;\n          }\n        }\n        if (!selectedMimeType) {\n          setDebug('Warning: No standard MIME types supported, trying without specifying codec');\n        }\n\n        // Create MediaRecorder with appropriate options\n        const options = selectedMimeType ? {\n          mimeType: selectedMimeType,\n          videoBitsPerSecond: 2500000\n        } : {\n          videoBitsPerSecond: 2500000\n        };\n        try {\n          const mediaRecorder = new MediaRecorder(combinedStream, options);\n          mediaRecorderRef.current = mediaRecorder;\n\n          // Log MediaRecorder details\n          console.log('MediaRecorder created:', mediaRecorder.mimeType, mediaRecorder.state);\n          setDebug(`MediaRecorder created with mime type: ${mediaRecorder.mimeType}`);\n\n          // Log MediaRecorder state changes\n          mediaRecorder.addEventListener('start', () => {\n            console.log('MediaRecorder started');\n            setDebug('Recording started');\n          });\n          mediaRecorder.addEventListener('error', event => {\n            console.error('MediaRecorder error:', event);\n            setDebug(`MediaRecorder error: ${event.error || 'Unknown error'}`);\n          });\n\n          // Handle data available - this is critical\n          mediaRecorder.ondataavailable = event => {\n            console.log('Data available event, size:', event.data.size);\n            if (event.data && event.data.size > 0) {\n              chunksRef.current.push(event.data);\n              setDebug(`Received data chunk: ${(event.data.size / 1024).toFixed(2)} KB, total chunks: ${chunksRef.current.length}`);\n            } else {\n              console.warn('Received empty data chunk');\n              setDebug('Warning: Received empty data chunk');\n            }\n          };\n\n          // Handle recording stop\n          mediaRecorder.onstop = () => {\n            console.log('MediaRecorder stopped, chunks:', chunksRef.current.length);\n            setDebug(`Recording stopped with ${chunksRef.current.length} chunks`);\n            if (chunksRef.current.length === 0) {\n              setDebug('Error: No data chunks were recorded');\n              alert('Error: No video data was captured during recording. This may be due to browser compatibility issues. Try using Chrome or Edge.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n\n            // Calculate total size of all chunks\n            const totalSize = chunksRef.current.reduce((size, chunk) => size + chunk.size, 0);\n            setDebug(`Total data size: ${(totalSize / 1024).toFixed(2)} KB`);\n            if (totalSize === 0) {\n              setDebug('Error: Recorded data has zero size');\n              alert('Error: The recorded video has no data (0 bytes). Try using a different browser or visualization.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n            try {\n              // Create blob from chunks\n              const blob = new Blob(chunksRef.current, {\n                type: selectedMimeType || 'video/webm'\n              });\n              console.log('Created blob, size:', blob.size);\n              setDebug(`Created video blob: ${(blob.size / 1024).toFixed(2)} KB`);\n              if (blob.size === 0) {\n                setDebug('Error: Final blob has zero size');\n                alert('Error: The final video file has no data (0 bytes). Try using a different browser.');\n                setIsExporting(false);\n                cleanupResources();\n                return;\n              }\n              const url = URL.createObjectURL(blob);\n\n              // Create filename based on audio file name with fallback\n              let fileName = \"visualization.webm\";\n              if (audioFile && audioFile.name) {\n                fileName = audioFile.name.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n              } else if (audioFile && audioFile.path) {\n                // Extract filename from path as fallback\n                const pathParts = audioFile.path.split('/');\n                const pathFileName = pathParts[pathParts.length - 1];\n                fileName = pathFileName.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n              }\n\n              // Download the file\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = fileName;\n              a.click();\n\n              // Clean up\n              URL.revokeObjectURL(url);\n              setIsExporting(false);\n              setProgress(100);\n              setDebug('Export completed successfully');\n\n              // Clean up resources\n              cleanupResources();\n            } catch (blobError) {\n              console.error('Error creating blob:', blobError);\n              setDebug(`Error creating video file: ${blobError.message}`);\n              alert(`Error creating video file: ${blobError.message}`);\n              setIsExporting(false);\n              cleanupResources();\n            }\n          };\n\n          // Force data collection more frequently\n          mediaRecorder.start(100); // Capture in 100ms chunks for more frequent data\n          setDebug('MediaRecorder started with 100ms timeslice');\n\n          // Start audio playback and ensure visualization is active\n          try {\n            // Start audio playback\n            await audioElement.play();\n            setDebug('Audio playback started');\n\n            // Ensure the visualizer is active and responding to the audio\n            // This is critical - we need to make sure the visualizer is actually rendering\n            // when the audio plays, otherwise we'll just record a static canvas\n            if (visualizerRef.current && typeof visualizerRef.current.startVisualization === 'function') {\n              visualizerRef.current.startVisualization();\n              setDebug('Visualizer activated');\n            } else {\n              // If there's no direct method, we can try to simulate a play event\n              // This is a fallback approach\n              const playEvent = new Event('play');\n              audioElement.dispatchEvent(playEvent);\n              setDebug('Dispatched play event to trigger visualization');\n            }\n\n            // Force a render cycle to ensure the canvas is updating\n            if (canvas) {\n              const ctx = canvas.getContext('2d');\n              ctx.fillStyle = 'rgba(0,0,0,0.01)';\n              ctx.fillRect(0, 0, 1, 1); // Minimal draw to force a render cycle\n            }\n          } catch (playError) {\n            console.error('Error playing audio:', playError);\n            setDebug(`Failed to play audio: ${playError.message || 'Unknown error'}`);\n            throw new Error(`Failed to play audio: ${playError.message}`);\n          }\n\n          // Periodically request data to ensure chunks are being collected\n          dataRequestIntervalRef.current = setInterval(() => {\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              mediaRecorderRef.current.requestData();\n\n              // Also periodically check if the canvas is still active\n              if (canvas) {\n                try {\n                  const ctx = canvas.getContext('2d');\n                  ctx.fillStyle = 'rgba(0,0,0,0.01)';\n                  ctx.fillRect(0, 0, 1, 1); // Minimal draw to keep the canvas active\n                } catch (e) {\n                  console.error('Error keeping canvas active:', e);\n                }\n              }\n            }\n          }, 1000);\n\n          // Update progress based on audio time\n          progressIntervalRef.current = setInterval(() => {\n            if (audioDurationRef.current) {\n              const elapsed = (Date.now() - startTimeRef.current) / 1000;\n              const percentage = Math.min(Math.floor(elapsed / audioDurationRef.current * 100), 99);\n              setProgress(percentage);\n\n              // Log data chunks periodically\n              setDebug(`Progress: ${percentage}%, Chunks: ${chunksRef.current.length}, Duration: ${elapsed.toFixed(1)}s/${audioDurationRef.current.toFixed(1)}s`);\n\n              // If we've been recording for a while but have no chunks, something is wrong\n              if (elapsed > 3 && chunksRef.current.length === 0) {\n                setDebug('Warning: No data chunks received after 3 seconds');\n              }\n            }\n          }, 500);\n\n          // Stop recording when audio ends\n          audioElement.onended = () => {\n            setDebug('Audio playback ended, stopping recording');\n\n            // Clear the data request interval\n            if (dataRequestIntervalRef.current) {\n              clearInterval(dataRequestIntervalRef.current);\n              dataRequestIntervalRef.current = null;\n            }\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              // Force one last dataavailable event before stopping\n              mediaRecorderRef.current.requestData();\n\n              // Small delay to ensure the last data is captured\n              setTimeout(() => {\n                try {\n                  mediaRecorderRef.current.stop();\n                } catch (stopError) {\n                  console.error('Error stopping MediaRecorder:', stopError);\n                  setDebug(`Error stopping recording: ${stopError.message}`);\n                  setIsExporting(false);\n                  cleanupResources();\n                }\n              }, 500);\n            }\n          };\n        } catch (recorderError) {\n          console.error('Error creating MediaRecorder:', recorderError);\n          setDebug(`Failed to create MediaRecorder: ${recorderError.message}`);\n          throw new Error(`Failed to create MediaRecorder: ${recorderError.message}. Try using a different browser.`);\n        }\n      } catch (audioError) {\n        console.error('Error setting up audio:', audioError);\n        setDebug(`Audio setup error: ${audioError.message}`);\n        throw new Error(`Failed to set up audio: ${audioError.message}`);\n      }\n    } catch (error) {\n      console.error(\"Error exporting video:\", error);\n      setDebug(`Export error: ${error.message || 'Unknown error'}`);\n      alert(`Error exporting video: ${error.message}`);\n      setIsExporting(false);\n      cleanupResources();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-exporter\",\n    children: isExporting ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-text\",\n        children: [progress, \"% Exporting...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        children: debug\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"export-button\",\n      onClick: exportVideo,\n      disabled: !visualizerRef || !audioFile || isPlaying,\n      children: \"Export Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 589,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoExporter, \"OD03VhHTo0MVmpYUY8bNZerExU0=\");\n_c = VideoExporter;\nexport default VideoExporter;\nvar _c;\n$RefreshReg$(_c, \"VideoExporter\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","VideoExporter","visualizerRef","audioFile","isPlaying","_s","isExporting","setIsExporting","progress","setProgress","debug","setDebug","mediaRecorderRef","chunksRef","startTimeRef","audioDurationRef","progressIntervalRef","dataRequestIntervalRef","audioContextRef","audioSourceRef","audioElementRef","cleanupResources","current","clearInterval","disconnect","e","console","error","pause","oncanplaythrough","onerror","onended","removeAttribute","load","state","close","catch","stop","validateAudioFile","path","ensureVisualizerActive","canvas","getCanvas","ctx","getContext","imageData","getImageData","width","height","putImageData","exportVideo","alert","log","Date","now","Error","stream","captureStream","mozCaptureStream","webkitCaptureStream","videoTracks","getVideoTracks","length","forEach","track","index","label","enabled","readyState","AudioContext","window","webkitAudioContext","audioContext","timestamp","getTime","encodedPath","encodeURI","audioUrl","audioElement","Audio","crossOrigin","preload","errorDetail","target","message","code","audioLoadPromise","Promise","resolve","reject","duration","timeoutId","setTimeout","clearTimeoutHandler","clearTimeout","addEventListener","once","src","toFixed","audioSource","createMediaElementSource","audioDestination","createMediaStreamDestination","connect","destination","audioTracks","getAudioTracks","combinedStream","MediaStream","getTracks","mimeTypes","selectedMimeType","type","MediaRecorder","isTypeSupported","options","mimeType","videoBitsPerSecond","mediaRecorder","event","ondataavailable","data","size","push","warn","onstop","totalSize","reduce","chunk","blob","Blob","url","URL","createObjectURL","fileName","name","replace","pathParts","split","pathFileName","a","document","createElement","href","download","click","revokeObjectURL","blobError","start","play","startVisualization","playEvent","Event","dispatchEvent","fillStyle","fillRect","playError","setInterval","requestData","elapsed","percentage","Math","min","floor","stopError","recorderError","audioError","className","children","style","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/VideoExporter.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport './VideoExporter.css';\n\nconst VideoExporter = ({ visualizerRef, audioFile, isPlaying }) => {\n  const [isExporting, setIsExporting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [debug, setDebug] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startTimeRef = useRef(null);\n  const audioDurationRef = useRef(null);\n  const progressIntervalRef = useRef(null);\n  const dataRequestIntervalRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioSourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      cleanupResources();\n    };\n  }, []);\n\n  // Clean up resources function to centralize cleanup logic\n  const cleanupResources = () => {\n    if (progressIntervalRef.current) {\n      clearInterval(progressIntervalRef.current);\n      progressIntervalRef.current = null;\n    }\n    \n    if (dataRequestIntervalRef.current) {\n      clearInterval(dataRequestIntervalRef.current);\n      dataRequestIntervalRef.current = null;\n    }\n    \n    if (audioSourceRef.current) {\n      try {\n        audioSourceRef.current.disconnect();\n      } catch (e) {\n        console.error('Error disconnecting audio source:', e);\n      }\n      audioSourceRef.current = null;\n    }\n    \n    if (audioElementRef.current) {\n      try {\n        audioElementRef.current.pause();\n        // Remove all event listeners\n        audioElementRef.current.oncanplaythrough = null;\n        audioElementRef.current.onerror = null;\n        audioElementRef.current.onended = null;\n        // Clear source and load to release resources\n        audioElementRef.current.removeAttribute('src');\n        audioElementRef.current.load();\n      } catch (e) {\n        console.error('Error cleaning up audio element:', e);\n      }\n      audioElementRef.current = null;\n    }\n    \n    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n      try {\n        audioContextRef.current.close().catch(e => console.error('Error closing audio context:', e));\n      } catch (e) {\n        console.error('Error closing audio context:', e);\n      }\n      audioContextRef.current = null;\n    }\n    \n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      try {\n        mediaRecorderRef.current.stop();\n      } catch (e) {\n        console.error('Error stopping media recorder:', e);\n      }\n      mediaRecorderRef.current = null;\n    }\n    \n    chunksRef.current = [];\n  };\n\n  // Validate that the audio file path is valid\n  const validateAudioFile = () => {\n    if (!audioFile) {\n      return false;\n    }\n    \n    if (!audioFile.path) {\n      console.error('Audio file has no path');\n      setDebug('Error: Audio file has no path');\n      return false;\n    }\n    \n    return true;\n  };\n\n  // Function to ensure the visualizer is active and rendering\n  const ensureVisualizerActive = () => {\n    if (!visualizerRef?.current) {\n      console.error('Visualizer reference not available');\n      return false;\n    }\n    \n    // Force a render cycle on the canvas to ensure it's active\n    const canvas = visualizerRef.current.getCanvas();\n    if (!canvas) {\n      console.error('Canvas not found in visualizer');\n      return false;\n    }\n    \n    try {\n      // Force a frame to be drawn on the canvas to ensure it has content\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(imageData, 0, 0);\n      return true;\n    } catch (e) {\n      console.error('Error activating visualizer:', e);\n      return false;\n    }\n  };\n\n  const exportVideo = async () => {\n    if (!visualizerRef?.current || !audioFile) {\n      alert(\"Please upload an audio file first\");\n      return;\n    }\n    \n    // Validate audio file\n    if (!validateAudioFile()) {\n      alert(\"Invalid audio file. Please upload a valid audio file.\");\n      return;\n    }\n    \n    // Check if already exporting\n    if (isExporting) {\n      console.log('Already exporting, ignoring request');\n      return;\n    }\n\n    try {\n      // Clean up any existing resources first\n      cleanupResources();\n      \n      setIsExporting(true);\n      setProgress(0);\n      setDebug('Starting export process...');\n      startTimeRef.current = Date.now();\n\n      // Ensure visualizer is active\n      if (!ensureVisualizerActive()) {\n        throw new Error(\"Could not activate visualizer\");\n      }\n      \n      // Get the canvas element from the visualizer using the exposed method\n      const canvas = visualizerRef.current.getCanvas();\n      if (!canvas) {\n        throw new Error(\"Canvas element not found\");\n      }\n      setDebug(`Canvas found, dimensions: ${canvas.width}x${canvas.height}`);\n\n      // Create a stream from the canvas - try multiple methods\n      let stream = null;\n      \n      // Method 1: Standard captureStream\n      try {\n        stream = canvas.captureStream(30);\n        setDebug('Canvas stream created with standard captureStream');\n      } catch (e) {\n        console.error('Standard captureStream failed:', e);\n        setDebug('Standard captureStream failed, trying alternatives...');\n      }\n      \n      // Method 2: Mozilla captureStream\n      if (!stream) {\n        try {\n          stream = canvas.mozCaptureStream && canvas.mozCaptureStream(30);\n          if (stream) {\n            setDebug('Canvas stream created with mozCaptureStream');\n          }\n        } catch (e) {\n          console.error('mozCaptureStream failed:', e);\n          setDebug('mozCaptureStream failed, trying alternatives...');\n        }\n      }\n      \n      // Method 3: WebKit captureStream\n      if (!stream) {\n        try {\n          stream = canvas.webkitCaptureStream && canvas.webkitCaptureStream(30);\n          if (stream) {\n            setDebug('Canvas stream created with webkitCaptureStream');\n          }\n        } catch (e) {\n          console.error('webkitCaptureStream failed:', e);\n          setDebug('webkitCaptureStream failed');\n        }\n      }\n\n      if (!stream) {\n        throw new Error(\"Your browser doesn't support canvas streaming. Try using a different browser like Chrome.\");\n      }\n\n      // Verify we have video tracks\n      const videoTracks = stream.getVideoTracks();\n      if (videoTracks.length === 0) {\n        throw new Error(\"No video tracks found in canvas stream\");\n      }\n      setDebug(`Stream created with ${videoTracks.length} video tracks`);\n      \n      // Log video track details\n      videoTracks.forEach((track, index) => {\n        console.log(`Video track ${index}:`, track.label, track.enabled, track.readyState);\n      });\n\n      // Create audio context and connect to stream - use a more reliable approach\n      try {\n        // Create a new audio context\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        const audioContext = new AudioContext();\n        audioContextRef.current = audioContext;\n        \n        // Construct the audio URL with proper encoding\n        const timestamp = new Date().getTime();\n        // Ensure the path is properly encoded\n        const encodedPath = encodeURI(audioFile.path);\n        const audioUrl = `http://localhost:5001${encodedPath}?t=${timestamp}`;\n        \n        console.log('Audio URL:', audioUrl);\n        setDebug(`Using audio URL: ${audioUrl}`);\n        \n        // Create a new audio element for playback during recording\n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n        audioElementRef.current = audioElement;\n        \n        // Set up error handler before setting source\n        audioElement.onerror = (e) => {\n          const errorDetail = e.target.error \n            ? `${e.target.error.message || ''} (code: ${e.target.error.code})` \n            : 'Unknown error';\n          console.error('Audio error:', e.target.error);\n          setDebug(`Audio error: ${errorDetail}`);\n          throw new Error(`Audio error: ${errorDetail}`);\n        };\n        \n        // Wait for audio to be loaded enough to play\n        setDebug('Loading audio...');\n        \n        // Create a promise to handle audio loading\n        const audioLoadPromise = new Promise((resolve, reject) => {\n          // Set up success handler\n          audioElement.oncanplaythrough = () => {\n            console.log('Audio loaded successfully, duration:', audioElement.duration);\n            setDebug('Audio loaded successfully');\n            resolve();\n          };\n          \n          // Set up error handler\n          audioElement.onerror = (e) => {\n            const errorDetail = e.target.error \n              ? `${e.target.error.message || ''} (code: ${e.target.error.code})` \n              : 'Unknown error';\n            console.error('Audio load error:', e.target.error);\n            setDebug(`Audio load error: ${errorDetail}`);\n            reject(new Error(`Audio load error: ${errorDetail}`));\n          };\n          \n          // Set a timeout in case the audio never loads\n          const timeoutId = setTimeout(() => {\n            audioElement.oncanplaythrough = null;\n            audioElement.onerror = null;\n            setDebug('Audio load timeout - took too long to load');\n            reject(new Error('Audio load timeout - took too long to load'));\n          }, 10000);\n          \n          // Clean up timeout if audio loads or errors\n          const clearTimeoutHandler = () => {\n            clearTimeout(timeoutId);\n          };\n          \n          audioElement.addEventListener('canplaythrough', clearTimeoutHandler, { once: true });\n          audioElement.addEventListener('error', clearTimeoutHandler, { once: true });\n        });\n        \n        // Set source AFTER setting up all event handlers\n        audioElement.src = audioUrl;\n        \n        // Start loading\n        audioElement.load();\n        \n        // Wait for audio to load\n        await audioLoadPromise;\n        \n        // Store the duration for progress calculation\n        audioDurationRef.current = audioElement.duration;\n        setDebug(`Audio duration: ${audioDurationRef.current.toFixed(2)} seconds`);\n        \n        // Create and connect the audio source\n        const audioSource = audioContext.createMediaElementSource(audioElement);\n        audioSourceRef.current = audioSource;\n        \n        const audioDestination = audioContext.createMediaStreamDestination();\n        audioSource.connect(audioDestination);\n        audioSource.connect(audioContext.destination); // Also connect to speakers\n\n        // Verify we have audio tracks\n        const audioTracks = audioDestination.stream.getAudioTracks();\n        if (audioTracks.length === 0) {\n          setDebug('Warning: No audio tracks found in audio stream');\n        } else {\n          setDebug(`Audio stream created with ${audioTracks.length} audio tracks`);\n          \n          // Log audio track details\n          audioTracks.forEach((track, index) => {\n            console.log(`Audio track ${index}:`, track.label, track.enabled, track.readyState);\n          });\n        }\n\n        // Combine video and audio streams\n        const combinedStream = new MediaStream([\n          ...videoTracks,\n          ...audioTracks\n        ]);\n\n        // Check if combined stream has tracks\n        if (combinedStream.getTracks().length === 0) {\n          throw new Error(\"Combined stream has no tracks\");\n        }\n        setDebug(`Combined stream created with ${combinedStream.getTracks().length} total tracks`);\n\n        // Try different MIME types in order of preference\n        const mimeTypes = [\n          'video/webm;codecs=vp9,opus',\n          'video/webm;codecs=vp8,opus',\n          'video/webm;codecs=h264,opus',\n          'video/webm;codecs=vp9',\n          'video/webm;codecs=vp8',\n          'video/webm'\n        ];\n        \n        let selectedMimeType = '';\n        for (const type of mimeTypes) {\n          if (MediaRecorder.isTypeSupported(type)) {\n            selectedMimeType = type;\n            setDebug(`Using MIME type: ${selectedMimeType}`);\n            break;\n          }\n        }\n        \n        if (!selectedMimeType) {\n          setDebug('Warning: No standard MIME types supported, trying without specifying codec');\n        }\n        \n        // Create MediaRecorder with appropriate options\n        const options = selectedMimeType \n          ? { mimeType: selectedMimeType, videoBitsPerSecond: 2500000 }\n          : { videoBitsPerSecond: 2500000 };\n          \n        try {\n          const mediaRecorder = new MediaRecorder(combinedStream, options);\n          mediaRecorderRef.current = mediaRecorder;\n          \n          // Log MediaRecorder details\n          console.log('MediaRecorder created:', mediaRecorder.mimeType, mediaRecorder.state);\n          setDebug(`MediaRecorder created with mime type: ${mediaRecorder.mimeType}`);\n          \n          // Log MediaRecorder state changes\n          mediaRecorder.addEventListener('start', () => {\n            console.log('MediaRecorder started');\n            setDebug('Recording started');\n          });\n\n          mediaRecorder.addEventListener('error', (event) => {\n            console.error('MediaRecorder error:', event);\n            setDebug(`MediaRecorder error: ${event.error || 'Unknown error'}`);\n          });\n\n          // Handle data available - this is critical\n          mediaRecorder.ondataavailable = (event) => {\n            console.log('Data available event, size:', event.data.size);\n            if (event.data && event.data.size > 0) {\n              chunksRef.current.push(event.data);\n              setDebug(`Received data chunk: ${(event.data.size / 1024).toFixed(2)} KB, total chunks: ${chunksRef.current.length}`);\n            } else {\n              console.warn('Received empty data chunk');\n              setDebug('Warning: Received empty data chunk');\n            }\n          };\n\n          // Handle recording stop\n          mediaRecorder.onstop = () => {\n            console.log('MediaRecorder stopped, chunks:', chunksRef.current.length);\n            setDebug(`Recording stopped with ${chunksRef.current.length} chunks`);\n            \n            if (chunksRef.current.length === 0) {\n              setDebug('Error: No data chunks were recorded');\n              alert('Error: No video data was captured during recording. This may be due to browser compatibility issues. Try using Chrome or Edge.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n            \n            // Calculate total size of all chunks\n            const totalSize = chunksRef.current.reduce((size, chunk) => size + chunk.size, 0);\n            setDebug(`Total data size: ${(totalSize / 1024).toFixed(2)} KB`);\n            \n            if (totalSize === 0) {\n              setDebug('Error: Recorded data has zero size');\n              alert('Error: The recorded video has no data (0 bytes). Try using a different browser or visualization.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n\n            try {\n              // Create blob from chunks\n              const blob = new Blob(chunksRef.current, { type: selectedMimeType || 'video/webm' });\n              console.log('Created blob, size:', blob.size);\n              setDebug(`Created video blob: ${(blob.size / 1024).toFixed(2)} KB`);\n              \n              if (blob.size === 0) {\n                setDebug('Error: Final blob has zero size');\n                alert('Error: The final video file has no data (0 bytes). Try using a different browser.');\n                setIsExporting(false);\n                cleanupResources();\n                return;\n              }\n              \n              const url = URL.createObjectURL(blob);\n              \n              // Create filename based on audio file name with fallback\n              let fileName = \"visualization.webm\";\n              if (audioFile && audioFile.name) {\n                fileName = audioFile.name.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n              } else if (audioFile && audioFile.path) {\n                // Extract filename from path as fallback\n                const pathParts = audioFile.path.split('/');\n                const pathFileName = pathParts[pathParts.length - 1];\n                fileName = pathFileName.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n              }\n              \n              // Download the file\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = fileName;\n              a.click();\n              \n              // Clean up\n              URL.revokeObjectURL(url);\n              setIsExporting(false);\n              setProgress(100);\n              setDebug('Export completed successfully');\n              \n              // Clean up resources\n              cleanupResources();\n            } catch (blobError) {\n              console.error('Error creating blob:', blobError);\n              setDebug(`Error creating video file: ${blobError.message}`);\n              alert(`Error creating video file: ${blobError.message}`);\n              setIsExporting(false);\n              cleanupResources();\n            }\n          };\n\n          // Force data collection more frequently\n          mediaRecorder.start(100); // Capture in 100ms chunks for more frequent data\n          setDebug('MediaRecorder started with 100ms timeslice');\n\n          // Start audio playback and ensure visualization is active\n          try {\n            // Start audio playback\n            await audioElement.play();\n            setDebug('Audio playback started');\n            \n            // Ensure the visualizer is active and responding to the audio\n            // This is critical - we need to make sure the visualizer is actually rendering\n            // when the audio plays, otherwise we'll just record a static canvas\n            if (visualizerRef.current && typeof visualizerRef.current.startVisualization === 'function') {\n              visualizerRef.current.startVisualization();\n              setDebug('Visualizer activated');\n            } else {\n              // If there's no direct method, we can try to simulate a play event\n              // This is a fallback approach\n              const playEvent = new Event('play');\n              audioElement.dispatchEvent(playEvent);\n              setDebug('Dispatched play event to trigger visualization');\n            }\n            \n            // Force a render cycle to ensure the canvas is updating\n            if (canvas) {\n              const ctx = canvas.getContext('2d');\n              ctx.fillStyle = 'rgba(0,0,0,0.01)';\n              ctx.fillRect(0, 0, 1, 1); // Minimal draw to force a render cycle\n            }\n            \n          } catch (playError) {\n            console.error('Error playing audio:', playError);\n            setDebug(`Failed to play audio: ${playError.message || 'Unknown error'}`);\n            throw new Error(`Failed to play audio: ${playError.message}`);\n          }\n\n          // Periodically request data to ensure chunks are being collected\n          dataRequestIntervalRef.current = setInterval(() => {\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              mediaRecorderRef.current.requestData();\n              \n              // Also periodically check if the canvas is still active\n              if (canvas) {\n                try {\n                  const ctx = canvas.getContext('2d');\n                  ctx.fillStyle = 'rgba(0,0,0,0.01)';\n                  ctx.fillRect(0, 0, 1, 1); // Minimal draw to keep the canvas active\n                } catch (e) {\n                  console.error('Error keeping canvas active:', e);\n                }\n              }\n            }\n          }, 1000);\n\n          // Update progress based on audio time\n          progressIntervalRef.current = setInterval(() => {\n            if (audioDurationRef.current) {\n              const elapsed = (Date.now() - startTimeRef.current) / 1000;\n              const percentage = Math.min(Math.floor((elapsed / audioDurationRef.current) * 100), 99);\n              setProgress(percentage);\n              \n              // Log data chunks periodically\n              setDebug(`Progress: ${percentage}%, Chunks: ${chunksRef.current.length}, Duration: ${elapsed.toFixed(1)}s/${audioDurationRef.current.toFixed(1)}s`);\n              \n              // If we've been recording for a while but have no chunks, something is wrong\n              if (elapsed > 3 && chunksRef.current.length === 0) {\n                setDebug('Warning: No data chunks received after 3 seconds');\n              }\n            }\n          }, 500);\n\n          // Stop recording when audio ends\n          audioElement.onended = () => {\n            setDebug('Audio playback ended, stopping recording');\n            \n            // Clear the data request interval\n            if (dataRequestIntervalRef.current) {\n              clearInterval(dataRequestIntervalRef.current);\n              dataRequestIntervalRef.current = null;\n            }\n            \n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              // Force one last dataavailable event before stopping\n              mediaRecorderRef.current.requestData();\n              \n              // Small delay to ensure the last data is captured\n              setTimeout(() => {\n                try {\n                  mediaRecorderRef.current.stop();\n                } catch (stopError) {\n                  console.error('Error stopping MediaRecorder:', stopError);\n                  setDebug(`Error stopping recording: ${stopError.message}`);\n                  setIsExporting(false);\n                  cleanupResources();\n                }\n              }, 500);\n            }\n          };\n          \n        } catch (recorderError) {\n          console.error('Error creating MediaRecorder:', recorderError);\n          setDebug(`Failed to create MediaRecorder: ${recorderError.message}`);\n          throw new Error(`Failed to create MediaRecorder: ${recorderError.message}. Try using a different browser.`);\n        }\n      } catch (audioError) {\n        console.error('Error setting up audio:', audioError);\n        setDebug(`Audio setup error: ${audioError.message}`);\n        throw new Error(`Failed to set up audio: ${audioError.message}`);\n      }\n\n    } catch (error) {\n      console.error(\"Error exporting video:\", error);\n      setDebug(`Export error: ${error.message || 'Unknown error'}`);\n      alert(`Error exporting video: ${error.message}`);\n      setIsExporting(false);\n      cleanupResources();\n    }\n  };\n\n  return (\n    <div className=\"video-exporter\">\n      {isExporting ? (\n        <div className=\"export-progress\">\n          <div className=\"progress-bar\">\n            <div className=\"progress-fill\" style={{ width: `${progress}%` }}></div>\n          </div>\n          <div className=\"progress-text\">{progress}% Exporting...</div>\n          <div className=\"debug-info\">{debug}</div>\n        </div>\n      ) : (\n        <button\n          className=\"export-button\"\n          onClick={exportVideo}\n          disabled={!visualizerRef || !audioFile || isPlaying}\n        >\n          Export Video\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default VideoExporter; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}