{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\ResolutionSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResolutionSelector = ({\n  onResolutionChange,\n  currentResolution\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const resolutions = [{\n    id: '4K',\n    name: '4K (3840√ó2160)',\n    description: 'Ultra HD'\n  }, {\n    id: '1080p',\n    name: '1080p (1920√ó1080)',\n    description: 'Full HD'\n  }, {\n    id: '720p',\n    name: '720p (1280√ó720)',\n    description: 'HD'\n  }, {\n    id: 'Square',\n    name: 'Square (1080√ó1080)',\n    description: 'Instagram'\n  }, {\n    id: 'Vertical',\n    name: 'Vertical (1080√ó1920)',\n    description: 'Stories/TikTok'\n  }];\n  const handleResolutionSelect = resolutionId => {\n    onResolutionChange(resolutionId);\n    setIsOpen(false);\n  };\n\n  // Find current resolution details\n  const currentResDetails = resolutions.find(r => r.id === currentResolution) || resolutions[1]; // Default to 1080p\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"resolution-selector\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"resolution-dropdown\",\n      onClick: () => setIsOpen(!isOpen),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"resolution-icon\",\n        children: \"\\uD83D\\uDCD0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), currentResDetails.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resolution-options\",\n      children: resolutions.map(resolution => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `resolution-option ${currentResolution === resolution.id ? 'active' : ''}`,\n        onClick: () => handleResolutionSelect(resolution.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"resolution-option-name\",\n          children: resolution.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"resolution-option-desc\",\n          children: resolution.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this)]\n      }, resolution.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(ResolutionSelector, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c = ResolutionSelector;\nexport default ResolutionSelector;\nvar _c;\n$RefreshReg$(_c, \"ResolutionSelector\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ResolutionSelector","onResolutionChange","currentResolution","_s","isOpen","setIsOpen","resolutions","id","name","description","handleResolutionSelect","resolutionId","currentResDetails","find","r","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","resolution","_c","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/ResolutionSelector.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ResolutionSelector = ({ onResolutionChange, currentResolution }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  \r\n  const resolutions = [\r\n    { id: '4K', name: '4K (3840√ó2160)', description: 'Ultra HD' },\r\n    { id: '1080p', name: '1080p (1920√ó1080)', description: 'Full HD' },\r\n    { id: '720p', name: '720p (1280√ó720)', description: 'HD' },\r\n    { id: 'Square', name: 'Square (1080√ó1080)', description: 'Instagram' },\r\n    { id: 'Vertical', name: 'Vertical (1080√ó1920)', description: 'Stories/TikTok' }\r\n  ];\r\n  \r\n  const handleResolutionSelect = (resolutionId) => {\r\n    onResolutionChange(resolutionId);\r\n    setIsOpen(false);\r\n  };\r\n  \r\n  // Find current resolution details\r\n  const currentResDetails = resolutions.find(r => r.id === currentResolution) || resolutions[1]; // Default to 1080p\r\n  \r\n  return (\r\n    <div className=\"resolution-selector\">\r\n      <button \r\n        className=\"resolution-dropdown\"\r\n        onClick={() => setIsOpen(!isOpen)}\r\n      >\r\n        <span className=\"resolution-icon\">üìê</span>\r\n        {currentResDetails.name}\r\n      </button>\r\n      \r\n      {isOpen && (\r\n        <div className=\"resolution-options\">\r\n          {resolutions.map(resolution => (\r\n            <button\r\n              key={resolution.id}\r\n              className={`resolution-option ${currentResolution === resolution.id ? 'active' : ''}`}\r\n              onClick={() => handleResolutionSelect(resolution.id)}\r\n            >\r\n              <div className=\"resolution-option-name\">{resolution.name}</div>\r\n              <div className=\"resolution-option-desc\">{resolution.description}</div>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResolutionSelector; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}