{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\Visualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef } from 'react';\nimport './Visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualizer = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  audioFile,\n  template,\n  isPlaying,\n  onAudioElementCreated\n}, ref) => {\n  _s();\n  const canvasRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const sourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n  const particlesRef = useRef([]);\n\n  // Audio initialization effect\n  useEffect(() => {\n    if (!audioFile) return;\n    let isInitialized = false;\n    const initAudio = async () => {\n      try {\n        // Initialize audio context only on first load or if it doesn't exist\n        if (!audioContextRef.current) {\n          // Create context on user interaction\n          const context = new (window.AudioContext || window.webkitAudioContext)();\n          audioContextRef.current = context;\n\n          // Create analyzer\n          const analyser = context.createAnalyser();\n          analyser.fftSize = 2048;\n          analyserRef.current = analyser;\n        }\n\n        // Create and set up audio element\n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n\n        // Set the audio source\n        const timestamp = new Date().getTime();\n        audioElement.src = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\n\n        // Wait for audio to be loaded enough to play\n        await new Promise((resolve, reject) => {\n          const loadHandler = () => {\n            console.log('Audio loaded, duration:', audioElement.duration);\n            resolve();\n          };\n          const errorHandler = error => {\n            console.error('Audio load error:', error);\n            reject(error);\n          };\n          audioElement.addEventListener('canplaythrough', loadHandler, {\n            once: true\n          });\n          audioElement.addEventListener('error', errorHandler, {\n            once: true\n          });\n          audioElement.load();\n        });\n\n        // Only create new media source if not already connected\n        if (!isInitialized) {\n          // Ensure old source is disconnected\n          if (sourceRef.current) {\n            sourceRef.current.disconnect();\n          }\n\n          // Create and connect new media source\n          const mediaSource = audioContextRef.current.createMediaElementSource(audioElement);\n          sourceRef.current = mediaSource;\n          mediaSource.connect(analyserRef.current);\n          analyserRef.current.connect(audioContextRef.current.destination);\n          isInitialized = true;\n        }\n\n        // Set up event listeners\n        const onSeeking = () => {\n          console.log('Seeking:', audioElement.currentTime);\n          if (isPlaying) startVisualization();\n        };\n        const onTimeUpdate = () => {\n          console.log('Time update:', audioElement.currentTime);\n          if (isPlaying) startVisualization();\n        };\n        audioElement.addEventListener('seeking', onSeeking);\n        audioElement.addEventListener('seeked', onSeeking);\n        audioElement.addEventListener('timeupdate', onTimeUpdate);\n\n        // Store reference and notify parent\n        audioElementRef.current = audioElement;\n        onAudioElementCreated(audioElement);\n\n        // Resume audio context if suspended\n        if (audioContextRef.current.state === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n        return () => {\n          console.log('Cleaning up audio element');\n          audioElement.removeEventListener('seeking', onSeeking);\n          audioElement.removeEventListener('seeked', onSeeking);\n          audioElement.removeEventListener('timeupdate', onTimeUpdate);\n          audioElement.pause();\n          audioElement.src = '';\n          onAudioElementCreated(null);\n        };\n      } catch (error) {\n        console.error('Audio initialization error:', error);\n        alert('Error loading audio. Please try again.');\n      }\n    };\n    initAudio();\n  }, [audioFile]); // Remove isPlaying from dependencies\n\n  // Separate playback control effect\n  useEffect(() => {\n    const audioElement = audioElementRef.current;\n    if (!audioElement) return;\n    const playAudio = async () => {\n      try {\n        var _audioContextRef$curr;\n        // Ensure audio context is running\n        if (((_audioContextRef$curr = audioContextRef.current) === null || _audioContextRef$curr === void 0 ? void 0 : _audioContextRef$curr.state) === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n        console.log('Playing audio...');\n        await audioElement.play();\n        startVisualization();\n      } catch (error) {\n        console.error('Playback error:', error);\n        alert('Error playing audio. Please try again.');\n      }\n    };\n    if (isPlaying) {\n      playAudio();\n    } else {\n      console.log('Pausing audio...');\n      audioElement.pause();\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isPlaying]);\n\n  // Add effect to handle template changes\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Clear the entire canvas\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Restart visualization if playing\n    if (isPlaying) {\n      startVisualization();\n    }\n  }, [template]);\n  const initParticles = ctx => {\n    particlesRef.current = [];\n    const numParticles = 100;\n    for (let i = 0; i < numParticles; i++) {\n      particlesRef.current.push({\n        x: Math.random() * ctx.canvas.width,\n        y: Math.random() * ctx.canvas.height,\n        size: Math.random() * 4 + 2,\n        speedX: Math.random() * 4 - 2,\n        speedY: Math.random() * 4 - 2,\n        hue: Math.random() * 360\n      });\n    }\n  };\n  const updateAndDrawParticles = (ctx, dataArray, bufferLength) => {\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\n    const intensity = avgFreq / 256;\n    particlesRef.current.forEach((particle, i) => {\n      // Update position\n      particle.x += particle.speedX * (1 + intensity);\n      particle.y += particle.speedY * (1 + intensity);\n\n      // Wrap around screen\n      if (particle.x < 0) particle.x = ctx.canvas.width;\n      if (particle.x > ctx.canvas.width) particle.x = 0;\n      if (particle.y < 0) particle.y = ctx.canvas.height;\n      if (particle.y > ctx.canvas.height) particle.y = 0;\n\n      // Update color based on frequency\n      const freqIndex = Math.floor(i / particlesRef.current.length * bufferLength);\n      const freq = dataArray[freqIndex];\n      const hue = (particle.hue + freq / 2) % 360;\n\n      // Draw particle\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, particle.size * (1 + intensity * 0.5), 0, Math.PI * 2);\n      ctx.fillStyle = `hsla(${hue}, 100%, 50%, ${0.7 + intensity * 0.3})`;\n      ctx.fill();\n\n      // Draw connections\n      particlesRef.current.forEach((otherParticle, j) => {\n        if (i === j) return;\n        const dx = particle.x - otherParticle.x;\n        const dy = particle.y - otherParticle.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < 100) {\n          ctx.beginPath();\n          ctx.moveTo(particle.x, particle.y);\n          ctx.lineTo(otherParticle.x, otherParticle.y);\n          ctx.strokeStyle = `hsla(${hue}, 100%, 50%, ${(1 - distance / 100) * 0.2})`;\n          ctx.lineWidth = 1;\n          ctx.stroke();\n        }\n      });\n    });\n  };\n  const startVisualization = () => {\n    // Cancel any existing animation frame\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const analyser = analyserRef.current;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const timeArray = new Uint8Array(bufferLength);\n\n    // Clear the canvas before starting new visualization\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Initialize particles if needed\n    if (template === 'particles') {\n      initParticles(ctx);\n    }\n    const draw = () => {\n      animationFrameRef.current = requestAnimationFrame(draw);\n      analyser.getByteFrequencyData(dataArray);\n      analyser.getByteTimeDomainData(timeArray);\n\n      // Clear canvas with slight fade effect\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      switch (template) {\n        case 'waveform':\n          drawWaveform(ctx, dataArray, bufferLength);\n          break;\n        case 'bars':\n          drawBars(ctx, dataArray, bufferLength);\n          break;\n        case 'circles':\n          drawCircles(ctx, dataArray, bufferLength);\n          break;\n        case 'kaleidoscope':\n          drawKaleidoscope(ctx, dataArray, timeArray, bufferLength);\n          break;\n        case 'spiral':\n          drawSpiral(ctx, dataArray, timeArray, bufferLength);\n          break;\n        case 'particles':\n          updateAndDrawParticles(ctx, dataArray, bufferLength);\n          break;\n        default:\n          drawWaveform(ctx, dataArray, bufferLength);\n      }\n    };\n    draw();\n  };\n  const drawWaveform = (ctx, dataArray, bufferLength) => {\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'rgb(0, 255, 0)';\n    ctx.beginPath();\n    const sliceWidth = ctx.canvas.width / bufferLength;\n    let x = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      const v = dataArray[i] / 128.0;\n      const y = v * ctx.canvas.height / 2;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n      x += sliceWidth;\n    }\n    ctx.lineTo(ctx.canvas.width, ctx.canvas.height / 2);\n    ctx.stroke();\n  };\n  const drawBars = (ctx, dataArray, bufferLength) => {\n    const barWidth = ctx.canvas.width / bufferLength * 2.5;\n    let barHeight;\n    let x = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      barHeight = dataArray[i] / 2;\n      ctx.fillStyle = `rgb(${barHeight + 100}, 50, 50)`;\n      ctx.fillRect(x, ctx.canvas.height - barHeight, barWidth, barHeight);\n      x += barWidth + 1;\n    }\n  };\n  const drawCircles = (ctx, dataArray, bufferLength) => {\n    const centerX = ctx.canvas.width / 2;\n    const centerY = ctx.canvas.height / 2;\n    const maxRadius = Math.min(centerX, centerY) * 0.8;\n    for (let i = 0; i < bufferLength; i++) {\n      const radius = dataArray[i] / 255 * maxRadius;\n      const angle = i / bufferLength * Math.PI * 2;\n      const x = centerX + Math.cos(angle) * radius;\n      const y = centerY + Math.sin(angle) * radius;\n      ctx.beginPath();\n      ctx.arc(x, y, 2, 0, Math.PI * 2);\n      ctx.fillStyle = `hsl(${i / bufferLength * 360}, 100%, 50%)`;\n      ctx.fill();\n    }\n  };\n  const drawKaleidoscope = (ctx, dataArray, timeArray, bufferLength) => {\n    const centerX = ctx.canvas.width / 2;\n    const centerY = ctx.canvas.height / 2;\n    const segments = 8;\n    const angleStep = Math.PI * 2 / segments;\n\n    // Calculate average frequency for color\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\n    const hue = (avgFreq + performance.now() / 50) % 360;\n    ctx.save();\n    ctx.translate(centerX, centerY);\n    for (let s = 0; s < segments; s++) {\n      ctx.rotate(angleStep);\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      for (let i = 0; i < bufferLength; i += 4) {\n        const freq = dataArray[i];\n        const time = timeArray[i];\n        const x = i / bufferLength * 200;\n        const y = freq / 256 * 200;\n        const wave = Math.sin(time / 128 * Math.PI + x / 50) * 20;\n        ctx.lineTo(x, y + wave);\n      }\n      ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Mirror effect\n      ctx.scale(-1, 1);\n    }\n    ctx.restore();\n  };\n  const drawSpiral = (ctx, dataArray, timeArray, bufferLength) => {\n    const centerX = ctx.canvas.width / 2;\n    const centerY = ctx.canvas.height / 2;\n    const maxRadius = Math.min(centerX, centerY) * 0.9;\n\n    // Calculate average frequency for effects\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\n    const time = performance.now() / 1000;\n    ctx.save();\n    ctx.translate(centerX, centerY);\n    for (let i = 0; i < bufferLength; i += 2) {\n      const freq = dataArray[i];\n      const amplitude = freq / 256;\n\n      // Create spiral effect\n      const angle = i / bufferLength * Math.PI * 20 + time;\n      const radius = i / bufferLength * maxRadius * (1 + amplitude * 0.2);\n      const x = Math.cos(angle) * radius;\n      const y = Math.sin(angle) * radius;\n      const hue = (angle * 30 + time * 50) % 360;\n      const size = 2 + amplitude * 5;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fillStyle = `hsla(${hue}, 100%, 50%, ${0.5 + amplitude * 0.5})`;\n      ctx.fill();\n\n      // Add connecting lines for more psychedelic effect\n      if (i > 0) {\n        const prevAngle = (i - 2) / bufferLength * Math.PI * 20 + time;\n        const prevRadius = (i - 2) / bufferLength * maxRadius;\n        const prevX = Math.cos(prevAngle) * prevRadius;\n        const prevY = Math.sin(prevAngle) * prevRadius;\n        ctx.beginPath();\n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(x, y);\n        ctx.strokeStyle = `hsla(${hue}, 100%, 50%, 0.3)`;\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n    }\n    ctx.restore();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"visualizer-container\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: el => {\n        canvasRef.current = el;\n        if (ref) ref.current = el;\n      },\n      className: \"visualizer-canvas\",\n      width: 1920,\n      height: 1080\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 440,\n    columnNumber: 5\n  }, this);\n}, \"W+q65O2RZ6OJ8tzdaFQSt+7ZPlc=\")), \"W+q65O2RZ6OJ8tzdaFQSt+7ZPlc=\");\n_c2 = Visualizer;\nexport default Visualizer;\nvar _c, _c2;\n$RefreshReg$(_c, \"Visualizer$forwardRef\");\n$RefreshReg$(_c2, \"Visualizer\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","jsxDEV","_jsxDEV","Visualizer","_s","_c","audioFile","template","isPlaying","onAudioElementCreated","ref","canvasRef","audioContextRef","analyserRef","animationFrameRef","sourceRef","audioElementRef","particlesRef","isInitialized","initAudio","current","context","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","audioElement","Audio","crossOrigin","preload","timestamp","Date","getTime","src","path","Promise","resolve","reject","loadHandler","console","log","duration","errorHandler","error","addEventListener","once","load","disconnect","mediaSource","createMediaElementSource","connect","destination","onSeeking","currentTime","startVisualization","onTimeUpdate","state","resume","removeEventListener","pause","alert","playAudio","_audioContextRef$curr","play","cancelAnimationFrame","canvas","ctx","getContext","fillStyle","fillRect","width","height","initParticles","numParticles","i","push","x","Math","random","y","size","speedX","speedY","hue","updateAndDrawParticles","dataArray","bufferLength","avgFreq","reduce","a","b","intensity","forEach","particle","freqIndex","floor","length","freq","beginPath","arc","PI","fill","otherParticle","j","dx","dy","distance","sqrt","moveTo","lineTo","strokeStyle","lineWidth","stroke","frequencyBinCount","Uint8Array","timeArray","draw","requestAnimationFrame","getByteFrequencyData","getByteTimeDomainData","drawWaveform","drawBars","drawCircles","drawKaleidoscope","drawSpiral","sliceWidth","v","barWidth","barHeight","centerX","centerY","maxRadius","min","radius","angle","cos","sin","segments","angleStep","performance","now","save","translate","s","rotate","time","wave","scale","restore","amplitude","prevAngle","prevRadius","prevX","prevY","className","children","el","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/Visualizer.js"],"sourcesContent":["import React, { useEffect, useRef, forwardRef } from 'react';\r\nimport './Visualizer.css';\r\n\r\nconst Visualizer = forwardRef(({ audioFile, template, isPlaying, onAudioElementCreated }, ref) => {\r\n  const canvasRef = useRef(null);\r\n  const audioContextRef = useRef(null);\r\n  const analyserRef = useRef(null);\r\n  const animationFrameRef = useRef(null);\r\n  const sourceRef = useRef(null);\r\n  const audioElementRef = useRef(null);\r\n  const particlesRef = useRef([]);\r\n\r\n  // Audio initialization effect\r\n  useEffect(() => {\r\n    if (!audioFile) return;\r\n\r\n    let isInitialized = false;\r\n\r\n    const initAudio = async () => {\r\n      try {\r\n        // Initialize audio context only on first load or if it doesn't exist\r\n        if (!audioContextRef.current) {\r\n          // Create context on user interaction\r\n          const context = new (window.AudioContext || window.webkitAudioContext)();\r\n          audioContextRef.current = context;\r\n          \r\n          // Create analyzer\r\n          const analyser = context.createAnalyser();\r\n          analyser.fftSize = 2048;\r\n          analyserRef.current = analyser;\r\n        }\r\n\r\n        // Create and set up audio element\r\n        const audioElement = new Audio();\r\n        audioElement.crossOrigin = \"anonymous\";\r\n        audioElement.preload = \"auto\";\r\n\r\n        // Set the audio source\r\n        const timestamp = new Date().getTime();\r\n        audioElement.src = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\r\n\r\n        // Wait for audio to be loaded enough to play\r\n        await new Promise((resolve, reject) => {\r\n          const loadHandler = () => {\r\n            console.log('Audio loaded, duration:', audioElement.duration);\r\n            resolve();\r\n          };\r\n\r\n          const errorHandler = (error) => {\r\n            console.error('Audio load error:', error);\r\n            reject(error);\r\n          };\r\n\r\n          audioElement.addEventListener('canplaythrough', loadHandler, { once: true });\r\n          audioElement.addEventListener('error', errorHandler, { once: true });\r\n          audioElement.load();\r\n        });\r\n\r\n        // Only create new media source if not already connected\r\n        if (!isInitialized) {\r\n          // Ensure old source is disconnected\r\n          if (sourceRef.current) {\r\n            sourceRef.current.disconnect();\r\n          }\r\n\r\n          // Create and connect new media source\r\n          const mediaSource = audioContextRef.current.createMediaElementSource(audioElement);\r\n          sourceRef.current = mediaSource;\r\n          mediaSource.connect(analyserRef.current);\r\n          analyserRef.current.connect(audioContextRef.current.destination);\r\n          isInitialized = true;\r\n        }\r\n\r\n        // Set up event listeners\r\n        const onSeeking = () => {\r\n          console.log('Seeking:', audioElement.currentTime);\r\n          if (isPlaying) startVisualization();\r\n        };\r\n\r\n        const onTimeUpdate = () => {\r\n          console.log('Time update:', audioElement.currentTime);\r\n          if (isPlaying) startVisualization();\r\n        };\r\n\r\n        audioElement.addEventListener('seeking', onSeeking);\r\n        audioElement.addEventListener('seeked', onSeeking);\r\n        audioElement.addEventListener('timeupdate', onTimeUpdate);\r\n\r\n        // Store reference and notify parent\r\n        audioElementRef.current = audioElement;\r\n        onAudioElementCreated(audioElement);\r\n\r\n        // Resume audio context if suspended\r\n        if (audioContextRef.current.state === 'suspended') {\r\n          await audioContextRef.current.resume();\r\n        }\r\n\r\n        return () => {\r\n          console.log('Cleaning up audio element');\r\n          audioElement.removeEventListener('seeking', onSeeking);\r\n          audioElement.removeEventListener('seeked', onSeeking);\r\n          audioElement.removeEventListener('timeupdate', onTimeUpdate);\r\n          audioElement.pause();\r\n          audioElement.src = '';\r\n          onAudioElementCreated(null);\r\n        };\r\n      } catch (error) {\r\n        console.error('Audio initialization error:', error);\r\n        alert('Error loading audio. Please try again.');\r\n      }\r\n    };\r\n\r\n    initAudio();\r\n  }, [audioFile]); // Remove isPlaying from dependencies\r\n\r\n  // Separate playback control effect\r\n  useEffect(() => {\r\n    const audioElement = audioElementRef.current;\r\n    if (!audioElement) return;\r\n\r\n    const playAudio = async () => {\r\n      try {\r\n        // Ensure audio context is running\r\n        if (audioContextRef.current?.state === 'suspended') {\r\n          await audioContextRef.current.resume();\r\n        }\r\n        \r\n        console.log('Playing audio...');\r\n        await audioElement.play();\r\n        startVisualization();\r\n      } catch (error) {\r\n        console.error('Playback error:', error);\r\n        alert('Error playing audio. Please try again.');\r\n      }\r\n    };\r\n\r\n    if (isPlaying) {\r\n      playAudio();\r\n    } else {\r\n      console.log('Pausing audio...');\r\n      audioElement.pause();\r\n      cancelAnimationFrame(animationFrameRef.current);\r\n    }\r\n  }, [isPlaying]);\r\n\r\n  // Add effect to handle template changes\r\n  useEffect(() => {\r\n    if (!canvasRef.current) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    // Clear the entire canvas\r\n    ctx.fillStyle = 'rgb(0, 0, 0)';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Restart visualization if playing\r\n    if (isPlaying) {\r\n      startVisualization();\r\n    }\r\n  }, [template]);\r\n\r\n  const initParticles = (ctx) => {\r\n    particlesRef.current = [];\r\n    const numParticles = 100;\r\n    \r\n    for (let i = 0; i < numParticles; i++) {\r\n      particlesRef.current.push({\r\n        x: Math.random() * ctx.canvas.width,\r\n        y: Math.random() * ctx.canvas.height,\r\n        size: Math.random() * 4 + 2,\r\n        speedX: Math.random() * 4 - 2,\r\n        speedY: Math.random() * 4 - 2,\r\n        hue: Math.random() * 360\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateAndDrawParticles = (ctx, dataArray, bufferLength) => {\r\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\r\n    const intensity = avgFreq / 256;\r\n    \r\n    particlesRef.current.forEach((particle, i) => {\r\n      // Update position\r\n      particle.x += particle.speedX * (1 + intensity);\r\n      particle.y += particle.speedY * (1 + intensity);\r\n      \r\n      // Wrap around screen\r\n      if (particle.x < 0) particle.x = ctx.canvas.width;\r\n      if (particle.x > ctx.canvas.width) particle.x = 0;\r\n      if (particle.y < 0) particle.y = ctx.canvas.height;\r\n      if (particle.y > ctx.canvas.height) particle.y = 0;\r\n      \r\n      // Update color based on frequency\r\n      const freqIndex = Math.floor((i / particlesRef.current.length) * bufferLength);\r\n      const freq = dataArray[freqIndex];\r\n      const hue = (particle.hue + freq / 2) % 360;\r\n      \r\n      // Draw particle\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        particle.x,\r\n        particle.y,\r\n        particle.size * (1 + intensity * 0.5),\r\n        0,\r\n        Math.PI * 2\r\n      );\r\n      ctx.fillStyle = `hsla(${hue}, 100%, 50%, ${0.7 + intensity * 0.3})`;\r\n      ctx.fill();\r\n      \r\n      // Draw connections\r\n      particlesRef.current.forEach((otherParticle, j) => {\r\n        if (i === j) return;\r\n        \r\n        const dx = particle.x - otherParticle.x;\r\n        const dy = particle.y - otherParticle.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < 100) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y);\r\n          ctx.lineTo(otherParticle.x, otherParticle.y);\r\n          ctx.strokeStyle = `hsla(${hue}, 100%, 50%, ${(1 - distance / 100) * 0.2})`;\r\n          ctx.lineWidth = 1;\r\n          ctx.stroke();\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const startVisualization = () => {\r\n    // Cancel any existing animation frame\r\n    if (animationFrameRef.current) {\r\n      cancelAnimationFrame(animationFrameRef.current);\r\n    }\r\n\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const analyser = analyserRef.current;\r\n    const bufferLength = analyser.frequencyBinCount;\r\n    const dataArray = new Uint8Array(bufferLength);\r\n    const timeArray = new Uint8Array(bufferLength);\r\n\r\n    // Clear the canvas before starting new visualization\r\n    ctx.fillStyle = 'rgb(0, 0, 0)';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Initialize particles if needed\r\n    if (template === 'particles') {\r\n      initParticles(ctx);\r\n    }\r\n\r\n    const draw = () => {\r\n      animationFrameRef.current = requestAnimationFrame(draw);\r\n      analyser.getByteFrequencyData(dataArray);\r\n      analyser.getByteTimeDomainData(timeArray);\r\n\r\n      // Clear canvas with slight fade effect\r\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      switch (template) {\r\n        case 'waveform':\r\n          drawWaveform(ctx, dataArray, bufferLength);\r\n          break;\r\n        case 'bars':\r\n          drawBars(ctx, dataArray, bufferLength);\r\n          break;\r\n        case 'circles':\r\n          drawCircles(ctx, dataArray, bufferLength);\r\n          break;\r\n        case 'kaleidoscope':\r\n          drawKaleidoscope(ctx, dataArray, timeArray, bufferLength);\r\n          break;\r\n        case 'spiral':\r\n          drawSpiral(ctx, dataArray, timeArray, bufferLength);\r\n          break;\r\n        case 'particles':\r\n          updateAndDrawParticles(ctx, dataArray, bufferLength);\r\n          break;\r\n        default:\r\n          drawWaveform(ctx, dataArray, bufferLength);\r\n      }\r\n    };\r\n\r\n    draw();\r\n  };\r\n\r\n  const drawWaveform = (ctx, dataArray, bufferLength) => {\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'rgb(0, 255, 0)';\r\n    ctx.beginPath();\r\n\r\n    const sliceWidth = ctx.canvas.width / bufferLength;\r\n    let x = 0;\r\n\r\n    for (let i = 0; i < bufferLength; i++) {\r\n      const v = dataArray[i] / 128.0;\r\n      const y = v * ctx.canvas.height / 2;\r\n\r\n      if (i === 0) {\r\n        ctx.moveTo(x, y);\r\n      } else {\r\n        ctx.lineTo(x, y);\r\n      }\r\n\r\n      x += sliceWidth;\r\n    }\r\n\r\n    ctx.lineTo(ctx.canvas.width, ctx.canvas.height / 2);\r\n    ctx.stroke();\r\n  };\r\n\r\n  const drawBars = (ctx, dataArray, bufferLength) => {\r\n    const barWidth = (ctx.canvas.width / bufferLength) * 2.5;\r\n    let barHeight;\r\n    let x = 0;\r\n\r\n    for (let i = 0; i < bufferLength; i++) {\r\n      barHeight = dataArray[i] / 2;\r\n\r\n      ctx.fillStyle = `rgb(${barHeight + 100}, 50, 50)`;\r\n      ctx.fillRect(x, ctx.canvas.height - barHeight, barWidth, barHeight);\r\n\r\n      x += barWidth + 1;\r\n    }\r\n  };\r\n\r\n  const drawCircles = (ctx, dataArray, bufferLength) => {\r\n    const centerX = ctx.canvas.width / 2;\r\n    const centerY = ctx.canvas.height / 2;\r\n    const maxRadius = Math.min(centerX, centerY) * 0.8;\r\n\r\n    for (let i = 0; i < bufferLength; i++) {\r\n      const radius = (dataArray[i] / 255) * maxRadius;\r\n      const angle = (i / bufferLength) * Math.PI * 2;\r\n\r\n      const x = centerX + Math.cos(angle) * radius;\r\n      const y = centerY + Math.sin(angle) * radius;\r\n\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, 2, 0, Math.PI * 2);\r\n      ctx.fillStyle = `hsl(${(i / bufferLength) * 360}, 100%, 50%)`;\r\n      ctx.fill();\r\n    }\r\n  };\r\n\r\n  const drawKaleidoscope = (ctx, dataArray, timeArray, bufferLength) => {\r\n    const centerX = ctx.canvas.width / 2;\r\n    const centerY = ctx.canvas.height / 2;\r\n    const segments = 8;\r\n    const angleStep = (Math.PI * 2) / segments;\r\n    \r\n    // Calculate average frequency for color\r\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\r\n    const hue = (avgFreq + performance.now() / 50) % 360;\r\n    \r\n    ctx.save();\r\n    ctx.translate(centerX, centerY);\r\n\r\n    for (let s = 0; s < segments; s++) {\r\n      ctx.rotate(angleStep);\r\n      \r\n      ctx.beginPath();\r\n      ctx.moveTo(0, 0);\r\n      \r\n      for (let i = 0; i < bufferLength; i += 4) {\r\n        const freq = dataArray[i];\r\n        const time = timeArray[i];\r\n        const x = (i / bufferLength) * 200;\r\n        const y = (freq / 256) * 200;\r\n        \r\n        const wave = Math.sin(time / 128 * Math.PI + x / 50) * 20;\r\n        \r\n        ctx.lineTo(x, y + wave);\r\n      }\r\n      \r\n      ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;\r\n      ctx.lineWidth = 2;\r\n      ctx.stroke();\r\n      \r\n      // Mirror effect\r\n      ctx.scale(-1, 1);\r\n    }\r\n    \r\n    ctx.restore();\r\n  };\r\n\r\n  const drawSpiral = (ctx, dataArray, timeArray, bufferLength) => {\r\n    const centerX = ctx.canvas.width / 2;\r\n    const centerY = ctx.canvas.height / 2;\r\n    const maxRadius = Math.min(centerX, centerY) * 0.9;\r\n    \r\n    // Calculate average frequency for effects\r\n    const avgFreq = dataArray.reduce((a, b) => a + b, 0) / bufferLength;\r\n    const time = performance.now() / 1000;\r\n    \r\n    ctx.save();\r\n    ctx.translate(centerX, centerY);\r\n    \r\n    for (let i = 0; i < bufferLength; i += 2) {\r\n      const freq = dataArray[i];\r\n      const amplitude = freq / 256;\r\n      \r\n      // Create spiral effect\r\n      const angle = (i / bufferLength) * Math.PI * 20 + time;\r\n      const radius = (i / bufferLength) * maxRadius * (1 + amplitude * 0.2);\r\n      \r\n      const x = Math.cos(angle) * radius;\r\n      const y = Math.sin(angle) * radius;\r\n      \r\n      const hue = (angle * 30 + time * 50) % 360;\r\n      const size = 2 + amplitude * 5;\r\n      \r\n      ctx.beginPath();\r\n      ctx.arc(x, y, size, 0, Math.PI * 2);\r\n      ctx.fillStyle = `hsla(${hue}, 100%, 50%, ${0.5 + amplitude * 0.5})`;\r\n      ctx.fill();\r\n      \r\n      // Add connecting lines for more psychedelic effect\r\n      if (i > 0) {\r\n        const prevAngle = ((i - 2) / bufferLength) * Math.PI * 20 + time;\r\n        const prevRadius = ((i - 2) / bufferLength) * maxRadius;\r\n        const prevX = Math.cos(prevAngle) * prevRadius;\r\n        const prevY = Math.sin(prevAngle) * prevRadius;\r\n        \r\n        ctx.beginPath();\r\n        ctx.moveTo(prevX, prevY);\r\n        ctx.lineTo(x, y);\r\n        ctx.strokeStyle = `hsla(${hue}, 100%, 50%, 0.3)`;\r\n        ctx.lineWidth = 1;\r\n        ctx.stroke();\r\n      }\r\n    }\r\n    \r\n    ctx.restore();\r\n  };\r\n\r\n  return (\r\n    <div className=\"visualizer-container\">\r\n      <canvas\r\n        ref={(el) => {\r\n          canvasRef.current = el;\r\n          if (ref) ref.current = el;\r\n        }}\r\n        className=\"visualizer-canvas\"\r\n        width={1920}\r\n        height={1080}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Visualizer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}