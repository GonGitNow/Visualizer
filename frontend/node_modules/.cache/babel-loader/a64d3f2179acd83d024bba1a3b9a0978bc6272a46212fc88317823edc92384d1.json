{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\ThreeVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeVisualizer = ({\n  audioData,\n  template,\n  isPlaying\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const particlesRef = useRef(null);\n  const waveformRef = useRef(null);\n  const timeRef = useRef(0);\n  const controlsRef = useRef(null);\n\n  // Initialize Three.js scene\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Create scene\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Create camera\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n    cameraRef.current = camera;\n\n    // Create renderer\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    renderer.setClearColor(0x000000, 1);\n    mountRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Add orbit controls for user interaction\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.rotateSpeed = 0.5;\n    controlsRef.current = controls;\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 1, 1);\n    scene.add(directionalLight);\n\n    // Handle window resize\n    const handleResize = () => {\n      if (!mountRef.current || !cameraRef.current || !rendererRef.current) return;\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      cameraRef.current.aspect = width / height;\n      cameraRef.current.updateProjectionMatrix();\n      rendererRef.current.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Clean up\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (rendererRef.current && mountRef.current) {\n        mountRef.current.removeChild(rendererRef.current.domElement);\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n\n      // Dispose of Three.js objects\n      if (particlesRef.current) {\n        particlesRef.current.geometry.dispose();\n        particlesRef.current.material.dispose();\n        sceneRef.current.remove(particlesRef.current);\n      }\n      if (waveformRef.current) {\n        waveformRef.current.geometry.dispose();\n        waveformRef.current.material.dispose();\n        sceneRef.current.remove(waveformRef.current);\n      }\n    };\n  }, []);\n\n  // Create or update visualization based on template\n  useEffect(() => {\n    if (!sceneRef.current || !audioData) return;\n\n    // Clear previous visualizations\n    if (particlesRef.current) {\n      particlesRef.current.geometry.dispose();\n      particlesRef.current.material.dispose();\n      sceneRef.current.remove(particlesRef.current);\n      particlesRef.current = null;\n    }\n    if (waveformRef.current) {\n      waveformRef.current.geometry.dispose();\n      waveformRef.current.material.dispose();\n      sceneRef.current.remove(waveformRef.current);\n      waveformRef.current = null;\n    }\n\n    // Create new visualization based on template\n    switch (template) {\n      case 'particles':\n        createParticleSystem();\n        break;\n      case 'waveform':\n        createWaveform();\n        break;\n      case 'spiral':\n        createSpiral();\n        break;\n      case 'kaleidoscope':\n        createKaleidoscope();\n        break;\n      default:\n        createParticleSystem();\n    }\n\n    // Start animation\n    if (isPlaying) {\n      animate();\n    }\n  }, [template, audioData]);\n\n  // Handle play/pause\n  useEffect(() => {\n    if (isPlaying) {\n      animate();\n    } else if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isPlaying]);\n\n  // Create particle system visualization\n  const createParticleSystem = () => {\n    const particleCount = 5000;\n    const particles = new THREE.BufferGeometry();\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    const sizes = new Float32Array(particleCount);\n    const color = new THREE.Color();\n    for (let i = 0; i < particleCount; i++) {\n      // Position particles in a sphere\n      const radius = 3 + Math.random() * 2;\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.acos(2 * Math.random() - 1);\n      positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\n      positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n      positions[i * 3 + 2] = radius * Math.cos(phi);\n\n      // Random colors\n      color.setHSL(Math.random(), 0.7, 0.5);\n      colors[i * 3] = color.r;\n      colors[i * 3 + 1] = color.g;\n      colors[i * 3 + 2] = color.b;\n\n      // Random sizes\n      sizes[i] = Math.random() * 20 + 5;\n    }\n    particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n    particles.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n    const particleMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        time: {\n          value: 0\n        },\n        audioData: {\n          value: new Float32Array(128)\n        },\n        baseSize: {\n          value: 10.0\n        }\n      },\n      vertexShader: `\n        attribute float size;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float time;\n        uniform float baseSize;\n        uniform float audioData[128];\n        \n        void main() {\n          vColor = color;\n          \n          // Get audio data for this vertex\n          float audioIndex = mod(position.x + position.y + position.z, 128.0);\n          int index = int(audioIndex);\n          float audioValue = audioData[index] * 0.5;\n          \n          // Calculate new position with audio reactivity\n          vec3 newPosition = position;\n          float dist = length(position);\n          newPosition += normalize(position) * sin(time * 0.5 + dist) * audioValue;\n          \n          // Calculate size with audio reactivity\n          float particleSize = size * (1.0 + audioValue) * baseSize;\n          \n          vec4 mvPosition = modelViewMatrix * vec4(newPosition, 1.0);\n          gl_PointSize = particleSize * (300.0 / -mvPosition.z);\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      `,\n      fragmentShader: `\n        varying vec3 vColor;\n        \n        void main() {\n          // Create a circular particle\n          float r = 0.5;\n          vec2 uv = gl_PointCoord - vec2(0.5);\n          float d = length(uv);\n          float c = smoothstep(r, r - 0.05, d);\n          \n          gl_FragColor = vec4(vColor, c);\n        }\n      `,\n      transparent: true,\n      depthWrite: false,\n      blending: THREE.AdditiveBlending\n    });\n    const particleSystem = new THREE.Points(particles, particleMaterial);\n    sceneRef.current.add(particleSystem);\n    particlesRef.current = particleSystem;\n  };\n\n  // Create waveform visualization\n  const createWaveform = () => {\n    const geometry = new THREE.BufferGeometry();\n    const vertices = new Float32Array(128 * 3);\n    const colors = new Float32Array(128 * 3);\n    for (let i = 0; i < 128; i++) {\n      const x = i / 128 * 10 - 5;\n      vertices[i * 3] = x;\n      vertices[i * 3 + 1] = 0;\n      vertices[i * 3 + 2] = 0;\n\n      // Color gradient from blue to red\n      const hue = i / 128;\n      const color = new THREE.Color().setHSL(hue, 0.8, 0.5);\n      colors[i * 3] = color.r;\n      colors[i * 3 + 1] = color.g;\n      colors[i * 3 + 2] = color.b;\n    }\n    geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n    const material = new THREE.LineBasicMaterial({\n      vertexColors: true,\n      linewidth: 2\n    });\n    const waveform = new THREE.Line(geometry, material);\n    sceneRef.current.add(waveform);\n    waveformRef.current = waveform;\n  };\n\n  // Create spiral visualization\n  const createSpiral = () => {\n    const geometry = new THREE.BufferGeometry();\n    const vertices = new Float32Array(2000 * 3);\n    const colors = new Float32Array(2000 * 3);\n    for (let i = 0; i < 2000; i++) {\n      const t = i / 2000;\n      const angle = t * Math.PI * 20;\n      const radius = t * 5;\n      vertices[i * 3] = Math.cos(angle) * radius;\n      vertices[i * 3 + 1] = Math.sin(angle) * radius;\n      vertices[i * 3 + 2] = t * 2 - 1;\n\n      // Color gradient\n      const hue = t;\n      const color = new THREE.Color().setHSL(hue, 0.8, 0.5);\n      colors[i * 3] = color.r;\n      colors[i * 3 + 1] = color.g;\n      colors[i * 3 + 2] = color.b;\n    }\n    geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n    const material = new THREE.PointsMaterial({\n      size: 0.1,\n      vertexColors: true,\n      transparent: true,\n      opacity: 0.8,\n      blending: THREE.AdditiveBlending\n    });\n    const spiral = new THREE.Points(geometry, material);\n    sceneRef.current.add(spiral);\n    particlesRef.current = spiral;\n  };\n\n  // Create kaleidoscope visualization\n  const createKaleidoscope = () => {\n    const geometry = new THREE.IcosahedronGeometry(2, 3);\n    const material = new THREE.MeshPhongMaterial({\n      color: 0xffffff,\n      wireframe: true,\n      emissive: 0x444444,\n      specular: 0xffffff,\n      shininess: 100\n    });\n    const kaleidoscope = new THREE.Mesh(geometry, material);\n    sceneRef.current.add(kaleidoscope);\n    particlesRef.current = kaleidoscope;\n  };\n\n  // Animation loop\n  const animate = () => {\n    if (!sceneRef.current || !cameraRef.current || !rendererRef.current) return;\n    animationFrameRef.current = requestAnimationFrame(animate);\n    timeRef.current += 0.01;\n\n    // Update audio data uniform if available\n    if (particlesRef.current && particlesRef.current.material.uniforms) {\n      particlesRef.current.material.uniforms.time.value = timeRef.current;\n      if (audioData && audioData.dataArray) {\n        particlesRef.current.material.uniforms.audioData.value = audioData.dataArray;\n      }\n    }\n\n    // Update waveform if available\n    if (waveformRef.current && audioData && audioData.dataArray) {\n      const positions = waveformRef.current.geometry.attributes.position.array;\n      for (let i = 0; i < 128; i++) {\n        positions[i * 3 + 1] = audioData.dataArray[i] * 2;\n      }\n      waveformRef.current.geometry.attributes.position.needsUpdate = true;\n    }\n\n    // Update spiral if available\n    if (particlesRef.current && template === 'spiral' && audioData && audioData.dataArray) {\n      particlesRef.current.rotation.z += 0.005;\n      const positions = particlesRef.current.geometry.attributes.position.array;\n      const originalPositions = new Float32Array(positions.length);\n\n      // Store original positions\n      for (let i = 0; i < positions.length; i++) {\n        originalPositions[i] = positions[i];\n      }\n\n      // Apply audio data to positions\n      for (let i = 0; i < positions.length / 3; i++) {\n        const audioIndex = i % 128;\n        const audioValue = audioData.dataArray[audioIndex] * 0.1;\n        positions[i * 3] = originalPositions[i * 3] * (1 + audioValue);\n        positions[i * 3 + 1] = originalPositions[i * 3 + 1] * (1 + audioValue);\n      }\n      particlesRef.current.geometry.attributes.position.needsUpdate = true;\n    }\n\n    // Update kaleidoscope if available\n    if (particlesRef.current && template === 'kaleidoscope' && audioData && audioData.dataArray) {\n      let avgAudio = 0;\n      for (let i = 0; i < 128; i++) {\n        avgAudio += audioData.dataArray[i];\n      }\n      avgAudio /= 128;\n      particlesRef.current.rotation.x += 0.005;\n      particlesRef.current.rotation.y += 0.01;\n      particlesRef.current.scale.set(1 + avgAudio * 0.2, 1 + avgAudio * 0.2, 1 + avgAudio * 0.2);\n    }\n\n    // Update controls\n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n\n    // Render scene\n    rendererRef.current.render(sceneRef.current, cameraRef.current);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 408,\n    columnNumber: 10\n  }, this);\n};\n_s(ThreeVisualizer, \"8+VoFegv1/AOqA6i5dmuN+AOmFg=\");\n_c = ThreeVisualizer;\nexport default ThreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"ThreeVisualizer\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","jsxDEV","_jsxDEV","ThreeVisualizer","audioData","template","isPlaying","_s","mountRef","sceneRef","cameraRef","rendererRef","animationFrameRef","particlesRef","waveformRef","timeRef","controlsRef","current","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","setClearColor","appendChild","domElement","controls","enableDamping","dampingFactor","rotateSpeed","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","set","handleResize","width","height","aspect","updateProjectionMatrix","window","addEventListener","removeEventListener","removeChild","cancelAnimationFrame","geometry","dispose","material","remove","createParticleSystem","createWaveform","createSpiral","createKaleidoscope","animate","particleCount","particles","BufferGeometry","positions","Float32Array","colors","sizes","color","Color","i","radius","Math","random","theta","PI","phi","acos","sin","cos","setHSL","r","g","b","setAttribute","BufferAttribute","particleMaterial","ShaderMaterial","uniforms","time","value","baseSize","vertexShader","fragmentShader","transparent","depthWrite","blending","AdditiveBlending","particleSystem","Points","vertices","x","hue","LineBasicMaterial","vertexColors","linewidth","waveform","Line","t","angle","PointsMaterial","size","opacity","spiral","IcosahedronGeometry","MeshPhongMaterial","wireframe","emissive","specular","shininess","kaleidoscope","Mesh","requestAnimationFrame","dataArray","attributes","array","needsUpdate","rotation","originalPositions","length","audioIndex","audioValue","avgAudio","y","scale","update","render","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/ThreeVisualizer.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst ThreeVisualizer = ({ audioData, template, isPlaying }) => {\r\n  const mountRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const animationFrameRef = useRef(null);\r\n  const particlesRef = useRef(null);\r\n  const waveformRef = useRef(null);\r\n  const timeRef = useRef(0);\r\n  const controlsRef = useRef(null);\r\n\r\n  // Initialize Three.js scene\r\n  useEffect(() => {\r\n    if (!mountRef.current) return;\r\n\r\n    // Create scene\r\n    const scene = new THREE.Scene();\r\n    sceneRef.current = scene;\r\n\r\n    // Create camera\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      mountRef.current.clientWidth / mountRef.current.clientHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    camera.position.z = 5;\r\n    cameraRef.current = camera;\r\n\r\n    // Create renderer\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\r\n    renderer.setClearColor(0x000000, 1);\r\n    mountRef.current.appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n\r\n    // Add orbit controls for user interaction\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    controls.rotateSpeed = 0.5;\r\n    controlsRef.current = controls;\r\n\r\n    // Add ambient light\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    // Add directional light\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    directionalLight.position.set(0, 1, 1);\r\n    scene.add(directionalLight);\r\n\r\n    // Handle window resize\r\n    const handleResize = () => {\r\n      if (!mountRef.current || !cameraRef.current || !rendererRef.current) return;\r\n      \r\n      const width = mountRef.current.clientWidth;\r\n      const height = mountRef.current.clientHeight;\r\n      \r\n      cameraRef.current.aspect = width / height;\r\n      cameraRef.current.updateProjectionMatrix();\r\n      \r\n      rendererRef.current.setSize(width, height);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    // Clean up\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      \r\n      if (rendererRef.current && mountRef.current) {\r\n        mountRef.current.removeChild(rendererRef.current.domElement);\r\n      }\r\n      \r\n      if (animationFrameRef.current) {\r\n        cancelAnimationFrame(animationFrameRef.current);\r\n      }\r\n      \r\n      // Dispose of Three.js objects\r\n      if (particlesRef.current) {\r\n        particlesRef.current.geometry.dispose();\r\n        particlesRef.current.material.dispose();\r\n        sceneRef.current.remove(particlesRef.current);\r\n      }\r\n      \r\n      if (waveformRef.current) {\r\n        waveformRef.current.geometry.dispose();\r\n        waveformRef.current.material.dispose();\r\n        sceneRef.current.remove(waveformRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Create or update visualization based on template\r\n  useEffect(() => {\r\n    if (!sceneRef.current || !audioData) return;\r\n\r\n    // Clear previous visualizations\r\n    if (particlesRef.current) {\r\n      particlesRef.current.geometry.dispose();\r\n      particlesRef.current.material.dispose();\r\n      sceneRef.current.remove(particlesRef.current);\r\n      particlesRef.current = null;\r\n    }\r\n\r\n    if (waveformRef.current) {\r\n      waveformRef.current.geometry.dispose();\r\n      waveformRef.current.material.dispose();\r\n      sceneRef.current.remove(waveformRef.current);\r\n      waveformRef.current = null;\r\n    }\r\n\r\n    // Create new visualization based on template\r\n    switch (template) {\r\n      case 'particles':\r\n        createParticleSystem();\r\n        break;\r\n      case 'waveform':\r\n        createWaveform();\r\n        break;\r\n      case 'spiral':\r\n        createSpiral();\r\n        break;\r\n      case 'kaleidoscope':\r\n        createKaleidoscope();\r\n        break;\r\n      default:\r\n        createParticleSystem();\r\n    }\r\n\r\n    // Start animation\r\n    if (isPlaying) {\r\n      animate();\r\n    }\r\n  }, [template, audioData]);\r\n\r\n  // Handle play/pause\r\n  useEffect(() => {\r\n    if (isPlaying) {\r\n      animate();\r\n    } else if (animationFrameRef.current) {\r\n      cancelAnimationFrame(animationFrameRef.current);\r\n    }\r\n  }, [isPlaying]);\r\n\r\n  // Create particle system visualization\r\n  const createParticleSystem = () => {\r\n    const particleCount = 5000;\r\n    const particles = new THREE.BufferGeometry();\r\n    \r\n    const positions = new Float32Array(particleCount * 3);\r\n    const colors = new Float32Array(particleCount * 3);\r\n    const sizes = new Float32Array(particleCount);\r\n    \r\n    const color = new THREE.Color();\r\n    \r\n    for (let i = 0; i < particleCount; i++) {\r\n      // Position particles in a sphere\r\n      const radius = 3 + Math.random() * 2;\r\n      const theta = Math.random() * Math.PI * 2;\r\n      const phi = Math.acos(2 * Math.random() - 1);\r\n      \r\n      positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\r\n      positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\r\n      positions[i * 3 + 2] = radius * Math.cos(phi);\r\n      \r\n      // Random colors\r\n      color.setHSL(Math.random(), 0.7, 0.5);\r\n      colors[i * 3] = color.r;\r\n      colors[i * 3 + 1] = color.g;\r\n      colors[i * 3 + 2] = color.b;\r\n      \r\n      // Random sizes\r\n      sizes[i] = Math.random() * 20 + 5;\r\n    }\r\n    \r\n    particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n    particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n    particles.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n    \r\n    const particleMaterial = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        time: { value: 0 },\r\n        audioData: { value: new Float32Array(128) },\r\n        baseSize: { value: 10.0 },\r\n      },\r\n      vertexShader: `\r\n        attribute float size;\r\n        attribute vec3 color;\r\n        varying vec3 vColor;\r\n        uniform float time;\r\n        uniform float baseSize;\r\n        uniform float audioData[128];\r\n        \r\n        void main() {\r\n          vColor = color;\r\n          \r\n          // Get audio data for this vertex\r\n          float audioIndex = mod(position.x + position.y + position.z, 128.0);\r\n          int index = int(audioIndex);\r\n          float audioValue = audioData[index] * 0.5;\r\n          \r\n          // Calculate new position with audio reactivity\r\n          vec3 newPosition = position;\r\n          float dist = length(position);\r\n          newPosition += normalize(position) * sin(time * 0.5 + dist) * audioValue;\r\n          \r\n          // Calculate size with audio reactivity\r\n          float particleSize = size * (1.0 + audioValue) * baseSize;\r\n          \r\n          vec4 mvPosition = modelViewMatrix * vec4(newPosition, 1.0);\r\n          gl_PointSize = particleSize * (300.0 / -mvPosition.z);\r\n          gl_Position = projectionMatrix * mvPosition;\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        varying vec3 vColor;\r\n        \r\n        void main() {\r\n          // Create a circular particle\r\n          float r = 0.5;\r\n          vec2 uv = gl_PointCoord - vec2(0.5);\r\n          float d = length(uv);\r\n          float c = smoothstep(r, r - 0.05, d);\r\n          \r\n          gl_FragColor = vec4(vColor, c);\r\n        }\r\n      `,\r\n      transparent: true,\r\n      depthWrite: false,\r\n      blending: THREE.AdditiveBlending,\r\n    });\r\n    \r\n    const particleSystem = new THREE.Points(particles, particleMaterial);\r\n    sceneRef.current.add(particleSystem);\r\n    particlesRef.current = particleSystem;\r\n  };\r\n\r\n  // Create waveform visualization\r\n  const createWaveform = () => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const vertices = new Float32Array(128 * 3);\r\n    const colors = new Float32Array(128 * 3);\r\n    \r\n    for (let i = 0; i < 128; i++) {\r\n      const x = (i / 128) * 10 - 5;\r\n      vertices[i * 3] = x;\r\n      vertices[i * 3 + 1] = 0;\r\n      vertices[i * 3 + 2] = 0;\r\n      \r\n      // Color gradient from blue to red\r\n      const hue = i / 128;\r\n      const color = new THREE.Color().setHSL(hue, 0.8, 0.5);\r\n      colors[i * 3] = color.r;\r\n      colors[i * 3 + 1] = color.g;\r\n      colors[i * 3 + 2] = color.b;\r\n    }\r\n    \r\n    geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n    \r\n    const material = new THREE.LineBasicMaterial({\r\n      vertexColors: true,\r\n      linewidth: 2,\r\n    });\r\n    \r\n    const waveform = new THREE.Line(geometry, material);\r\n    sceneRef.current.add(waveform);\r\n    waveformRef.current = waveform;\r\n  };\r\n\r\n  // Create spiral visualization\r\n  const createSpiral = () => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const vertices = new Float32Array(2000 * 3);\r\n    const colors = new Float32Array(2000 * 3);\r\n    \r\n    for (let i = 0; i < 2000; i++) {\r\n      const t = i / 2000;\r\n      const angle = t * Math.PI * 20;\r\n      const radius = t * 5;\r\n      \r\n      vertices[i * 3] = Math.cos(angle) * radius;\r\n      vertices[i * 3 + 1] = Math.sin(angle) * radius;\r\n      vertices[i * 3 + 2] = t * 2 - 1;\r\n      \r\n      // Color gradient\r\n      const hue = t;\r\n      const color = new THREE.Color().setHSL(hue, 0.8, 0.5);\r\n      colors[i * 3] = color.r;\r\n      colors[i * 3 + 1] = color.g;\r\n      colors[i * 3 + 2] = color.b;\r\n    }\r\n    \r\n    geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n    \r\n    const material = new THREE.PointsMaterial({\r\n      size: 0.1,\r\n      vertexColors: true,\r\n      transparent: true,\r\n      opacity: 0.8,\r\n      blending: THREE.AdditiveBlending,\r\n    });\r\n    \r\n    const spiral = new THREE.Points(geometry, material);\r\n    sceneRef.current.add(spiral);\r\n    particlesRef.current = spiral;\r\n  };\r\n\r\n  // Create kaleidoscope visualization\r\n  const createKaleidoscope = () => {\r\n    const geometry = new THREE.IcosahedronGeometry(2, 3);\r\n    const material = new THREE.MeshPhongMaterial({\r\n      color: 0xffffff,\r\n      wireframe: true,\r\n      emissive: 0x444444,\r\n      specular: 0xffffff,\r\n      shininess: 100,\r\n    });\r\n    \r\n    const kaleidoscope = new THREE.Mesh(geometry, material);\r\n    sceneRef.current.add(kaleidoscope);\r\n    particlesRef.current = kaleidoscope;\r\n  };\r\n\r\n  // Animation loop\r\n  const animate = () => {\r\n    if (!sceneRef.current || !cameraRef.current || !rendererRef.current) return;\r\n    \r\n    animationFrameRef.current = requestAnimationFrame(animate);\r\n    \r\n    timeRef.current += 0.01;\r\n    \r\n    // Update audio data uniform if available\r\n    if (particlesRef.current && particlesRef.current.material.uniforms) {\r\n      particlesRef.current.material.uniforms.time.value = timeRef.current;\r\n      \r\n      if (audioData && audioData.dataArray) {\r\n        particlesRef.current.material.uniforms.audioData.value = audioData.dataArray;\r\n      }\r\n    }\r\n    \r\n    // Update waveform if available\r\n    if (waveformRef.current && audioData && audioData.dataArray) {\r\n      const positions = waveformRef.current.geometry.attributes.position.array;\r\n      \r\n      for (let i = 0; i < 128; i++) {\r\n        positions[i * 3 + 1] = audioData.dataArray[i] * 2;\r\n      }\r\n      \r\n      waveformRef.current.geometry.attributes.position.needsUpdate = true;\r\n    }\r\n    \r\n    // Update spiral if available\r\n    if (particlesRef.current && template === 'spiral' && audioData && audioData.dataArray) {\r\n      particlesRef.current.rotation.z += 0.005;\r\n      \r\n      const positions = particlesRef.current.geometry.attributes.position.array;\r\n      const originalPositions = new Float32Array(positions.length);\r\n      \r\n      // Store original positions\r\n      for (let i = 0; i < positions.length; i++) {\r\n        originalPositions[i] = positions[i];\r\n      }\r\n      \r\n      // Apply audio data to positions\r\n      for (let i = 0; i < positions.length / 3; i++) {\r\n        const audioIndex = i % 128;\r\n        const audioValue = audioData.dataArray[audioIndex] * 0.1;\r\n        \r\n        positions[i * 3] = originalPositions[i * 3] * (1 + audioValue);\r\n        positions[i * 3 + 1] = originalPositions[i * 3 + 1] * (1 + audioValue);\r\n      }\r\n      \r\n      particlesRef.current.geometry.attributes.position.needsUpdate = true;\r\n    }\r\n    \r\n    // Update kaleidoscope if available\r\n    if (particlesRef.current && template === 'kaleidoscope' && audioData && audioData.dataArray) {\r\n      let avgAudio = 0;\r\n      \r\n      for (let i = 0; i < 128; i++) {\r\n        avgAudio += audioData.dataArray[i];\r\n      }\r\n      \r\n      avgAudio /= 128;\r\n      \r\n      particlesRef.current.rotation.x += 0.005;\r\n      particlesRef.current.rotation.y += 0.01;\r\n      particlesRef.current.scale.set(1 + avgAudio * 0.2, 1 + avgAudio * 0.2, 1 + avgAudio * 0.2);\r\n    }\r\n    \r\n    // Update controls\r\n    if (controlsRef.current) {\r\n      controlsRef.current.update();\r\n    }\r\n    \r\n    // Render scene\r\n    rendererRef.current.render(sceneRef.current, cameraRef.current);\r\n  };\r\n\r\n  return <div ref={mountRef} style={{ width: '100%', height: '100%' }} />;\r\n};\r\n\r\nexport default ThreeVisualizer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}