{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\VideoExporter.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './VideoExporter.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoExporter = ({\n  visualizerRef,\n  audioFile,\n  isPlaying\n}) => {\n  _s();\n  const [isExporting, setIsExporting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [debug, setDebug] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startTimeRef = useRef(null);\n  const audioDurationRef = useRef(null);\n  const progressIntervalRef = useRef(null);\n  const dataRequestIntervalRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioSourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n\n  // High quality settings\n  const HIGH_VIDEO_BITRATE = 8000000; // 8 Mbps for high quality video\n  const HIGH_AUDIO_BITRATE = 320000; // 320 kbps for high quality audio\n  const FRAME_RATE = 60; // 60 fps for smooth animation\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      cleanupResources();\n    };\n  }, []);\n\n  // Clean up resources function to centralize cleanup logic\n  const cleanupResources = () => {\n    if (progressIntervalRef.current) {\n      clearInterval(progressIntervalRef.current);\n      progressIntervalRef.current = null;\n    }\n    if (dataRequestIntervalRef.current) {\n      clearInterval(dataRequestIntervalRef.current);\n      dataRequestIntervalRef.current = null;\n    }\n    if (audioSourceRef.current) {\n      try {\n        audioSourceRef.current.disconnect();\n      } catch (e) {\n        console.error('Error disconnecting audio source:', e);\n      }\n      audioSourceRef.current = null;\n    }\n    if (audioElementRef.current) {\n      try {\n        audioElementRef.current.pause();\n        // Remove all event listeners\n        audioElementRef.current.oncanplaythrough = null;\n        audioElementRef.current.onerror = null;\n        audioElementRef.current.onended = null;\n        // Clear source and load to release resources\n        audioElementRef.current.removeAttribute('src');\n        audioElementRef.current.load();\n      } catch (e) {\n        console.error('Error cleaning up audio element:', e);\n      }\n      audioElementRef.current = null;\n    }\n    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n      try {\n        audioContextRef.current.close().catch(e => console.error('Error closing audio context:', e));\n      } catch (e) {\n        console.error('Error closing audio context:', e);\n      }\n      audioContextRef.current = null;\n    }\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      try {\n        mediaRecorderRef.current.stop();\n      } catch (e) {\n        console.error('Error stopping media recorder:', e);\n      }\n      mediaRecorderRef.current = null;\n    }\n    chunksRef.current = [];\n  };\n\n  // Validate that the audio file path is valid\n  const validateAudioFile = () => {\n    if (!audioFile) {\n      return false;\n    }\n    if (!audioFile.path) {\n      console.error('Audio file has no path');\n      setDebug('Error: Audio file has no path');\n      return false;\n    }\n    return true;\n  };\n\n  // Function to ensure the visualizer is active and rendering\n  const ensureVisualizerActive = () => {\n    if (!(visualizerRef !== null && visualizerRef !== void 0 && visualizerRef.current)) {\n      console.error('Visualizer reference not available');\n      return false;\n    }\n\n    // Force a render cycle on the canvas to ensure it's active\n    const canvas = visualizerRef.current.getCanvas();\n    if (!canvas) {\n      console.error('Canvas not found in visualizer');\n      return false;\n    }\n    try {\n      // Force a frame to be drawn on the canvas to ensure it has content\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(imageData, 0, 0);\n      return true;\n    } catch (e) {\n      console.error('Error activating visualizer:', e);\n      return false;\n    }\n  };\n\n  // Get the current canvas resolution\n  const getCanvasResolution = canvas => {\n    if (!canvas) return {\n      width: 0,\n      height: 0\n    };\n\n    // Get the actual canvas dimensions\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Log the resolution\n    console.log(`Canvas resolution: ${width}x${height}`);\n    setDebug(`Canvas resolution: ${width}x${height}`);\n    return {\n      width,\n      height\n    };\n  };\n\n  // Function to properly activate the visualizer with the audio element\n  const activateVisualizer = async audioElement => {\n    if (!(visualizerRef !== null && visualizerRef !== void 0 && visualizerRef.current) || !audioElement) {\n      console.error('Cannot activate visualizer: missing references');\n      return false;\n    }\n    try {\n      // First, ensure we have a canvas\n      const canvas = visualizerRef.current.getCanvas();\n      if (!canvas) {\n        console.error('Canvas not found in visualizer');\n        return false;\n      }\n\n      // Check if the App component has registered the audio element with the visualizer\n      // If not, we need to manually trigger the visualization\n\n      // 1. Try to access any public methods on the visualizer ref\n      if (typeof visualizerRef.current.startVisualization === 'function') {\n        console.log('Using visualizer.startVisualization() method');\n        visualizerRef.current.startVisualization();\n        setDebug('Activated visualizer using startVisualization method');\n        return true;\n      }\n\n      // 2. If no direct method, try to find and call the animation frame function\n      // This is a more direct approach to force the visualizer to render\n      const animationFrameId = requestAnimationFrame(() => {\n        // Force a render cycle\n        const ctx = canvas.getContext('2d');\n        // Clear the canvas to force a full redraw\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // Draw something to ensure the canvas is active\n        ctx.fillStyle = 'rgba(0,0,0,0.01)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      });\n\n      // 3. Dispatch events that might trigger the visualizer\n      // Create and dispatch custom events that the visualizer might be listening for\n      const playEvent = new Event('play', {\n        bubbles: true\n      });\n      audioElement.dispatchEvent(playEvent);\n\n      // Also try to dispatch a custom event directly on the canvas\n      const visualizeEvent = new CustomEvent('visualize', {\n        bubbles: true,\n        detail: {\n          isPlaying: true,\n          audioElement\n        }\n      });\n      canvas.dispatchEvent(visualizeEvent);\n      setDebug('Activated visualizer using multiple methods');\n      return true;\n    } catch (e) {\n      console.error('Error activating visualizer:', e);\n      setDebug(`Error activating visualizer: ${e.message}`);\n      return false;\n    }\n  };\n  const exportVideo = async () => {\n    if (!(visualizerRef !== null && visualizerRef !== void 0 && visualizerRef.current) || !audioFile) {\n      alert(\"Please upload an audio file first\");\n      return;\n    }\n\n    // Validate audio file\n    if (!validateAudioFile()) {\n      alert(\"Invalid audio file. Please upload a valid audio file.\");\n      return;\n    }\n\n    // Check if already exporting\n    if (isExporting) {\n      console.log('Already exporting, ignoring request');\n      return;\n    }\n    try {\n      // Clean up any existing resources first\n      cleanupResources();\n      setIsExporting(true);\n      setProgress(0);\n      setDebug('Starting export process...');\n      startTimeRef.current = Date.now();\n\n      // Ensure visualizer is active\n      if (!ensureVisualizerActive()) {\n        throw new Error(\"Could not activate visualizer\");\n      }\n\n      // Get the canvas element from the visualizer using the exposed method\n      const canvas = visualizerRef.current.getCanvas();\n      if (!canvas) {\n        throw new Error(\"Canvas element not found\");\n      }\n\n      // Get and log the canvas resolution\n      const resolution = getCanvasResolution(canvas);\n      setDebug(`Canvas found, dimensions: ${resolution.width}x${resolution.height}`);\n\n      // Ensure the canvas has a reasonable size for high-quality export\n      if (resolution.width < 720 || resolution.height < 720) {\n        setDebug(`Warning: Canvas resolution (${resolution.width}x${resolution.height}) is low. Consider using a higher resolution for better quality.`);\n      }\n\n      // Create a stream from the canvas with high frame rate\n      let stream = null;\n\n      // Method 1: Standard captureStream with high frame rate\n      try {\n        stream = canvas.captureStream(FRAME_RATE);\n        setDebug(`Canvas stream created with ${FRAME_RATE}fps`);\n      } catch (e) {\n        console.error('Standard captureStream failed:', e);\n        setDebug('Standard captureStream failed, trying alternatives...');\n      }\n\n      // Method 2: Mozilla captureStream\n      if (!stream) {\n        try {\n          stream = canvas.mozCaptureStream && canvas.mozCaptureStream(FRAME_RATE);\n          if (stream) {\n            setDebug(`Canvas stream created with mozCaptureStream at ${FRAME_RATE}fps`);\n          }\n        } catch (e) {\n          console.error('mozCaptureStream failed:', e);\n          setDebug('mozCaptureStream failed, trying alternatives...');\n        }\n      }\n\n      // Method 3: WebKit captureStream\n      if (!stream) {\n        try {\n          stream = canvas.webkitCaptureStream && canvas.webkitCaptureStream(FRAME_RATE);\n          if (stream) {\n            setDebug(`Canvas stream created with webkitCaptureStream at ${FRAME_RATE}fps`);\n          }\n        } catch (e) {\n          console.error('webkitCaptureStream failed:', e);\n          setDebug('webkitCaptureStream failed');\n        }\n      }\n      if (!stream) {\n        throw new Error(\"Your browser doesn't support canvas streaming. Try using a different browser like Chrome.\");\n      }\n\n      // Verify we have video tracks\n      const videoTracks = stream.getVideoTracks();\n      if (videoTracks.length === 0) {\n        throw new Error(\"No video tracks found in canvas stream\");\n      }\n      setDebug(`Stream created with ${videoTracks.length} video tracks`);\n\n      // Log video track details and try to set constraints for higher quality\n      videoTracks.forEach((track, index) => {\n        console.log(`Video track ${index}:`, track.label, track.enabled, track.readyState);\n\n        // Try to set constraints for higher quality if supported\n        try {\n          if (track.applyConstraints) {\n            track.applyConstraints({\n              width: {\n                ideal: resolution.width\n              },\n              height: {\n                ideal: resolution.height\n              },\n              frameRate: {\n                ideal: FRAME_RATE\n              }\n            });\n            console.log(`Applied constraints to video track ${index}`);\n          }\n        } catch (e) {\n          console.error('Could not apply constraints to video track:', e);\n        }\n      });\n\n      // Create audio context and connect to stream - use a more reliable approach\n      try {\n        // Create a new audio context with high sample rate\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        const audioContext = new AudioContext({\n          sampleRate: 48000\n        });\n        audioContextRef.current = audioContext;\n\n        // Construct the audio URL with proper encoding\n        const timestamp = new Date().getTime();\n        // Ensure the path is properly encoded\n        const encodedPath = encodeURI(audioFile.path);\n        const audioUrl = `http://localhost:5001${encodedPath}?t=${timestamp}`;\n        console.log('Audio URL:', audioUrl);\n        setDebug(`Using audio URL: ${audioUrl}`);\n\n        // Create a new audio element for playback during recording\n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n        audioElementRef.current = audioElement;\n\n        // Set up error handler before setting source\n        audioElement.onerror = e => {\n          const errorDetail = e.target.error ? `${e.target.error.message || ''} (code: ${e.target.error.code})` : 'Unknown error';\n          console.error('Audio error:', e.target.error);\n          setDebug(`Audio error: ${errorDetail}`);\n          throw new Error(`Audio error: ${errorDetail}`);\n        };\n\n        // Wait for audio to be loaded enough to play\n        setDebug('Loading audio...');\n\n        // Create a promise to handle audio loading\n        const audioLoadPromise = new Promise((resolve, reject) => {\n          // Set up success handler\n          audioElement.oncanplaythrough = () => {\n            console.log('Audio loaded successfully, duration:', audioElement.duration);\n            setDebug('Audio loaded successfully');\n            resolve();\n          };\n\n          // Set up error handler\n          audioElement.onerror = e => {\n            const errorDetail = e.target.error ? `${e.target.error.message || ''} (code: ${e.target.error.code})` : 'Unknown error';\n            console.error('Audio load error:', e.target.error);\n            setDebug(`Audio load error: ${errorDetail}`);\n            reject(new Error(`Audio load error: ${errorDetail}`));\n          };\n\n          // Set a timeout in case the audio never loads\n          const timeoutId = setTimeout(() => {\n            audioElement.oncanplaythrough = null;\n            audioElement.onerror = null;\n            setDebug('Audio load timeout - took too long to load');\n            reject(new Error('Audio load timeout - took too long to load'));\n          }, 10000);\n\n          // Clean up timeout if audio loads or errors\n          const clearTimeoutHandler = () => {\n            clearTimeout(timeoutId);\n          };\n          audioElement.addEventListener('canplaythrough', clearTimeoutHandler, {\n            once: true\n          });\n          audioElement.addEventListener('error', clearTimeoutHandler, {\n            once: true\n          });\n        });\n\n        // Set source AFTER setting up all event handlers\n        audioElement.src = audioUrl;\n\n        // Start loading\n        audioElement.load();\n\n        // Wait for audio to load\n        await audioLoadPromise;\n\n        // Store the duration for progress calculation\n        audioDurationRef.current = audioElement.duration;\n        setDebug(`Audio duration: ${audioDurationRef.current.toFixed(2)} seconds`);\n\n        // Create and connect the audio source\n        const audioSource = audioContext.createMediaElementSource(audioElement);\n        audioSourceRef.current = audioSource;\n\n        // Create a destination with high-quality settings\n        const audioDestination = audioContext.createMediaStreamDestination();\n\n        // Optional: Add audio processing for better quality\n        const gainNode = audioContext.createGain();\n        gainNode.gain.value = 1.0; // Ensure full volume\n\n        // Connect the audio processing chain\n        audioSource.connect(gainNode);\n        gainNode.connect(audioDestination);\n        gainNode.connect(audioContext.destination); // Also connect to speakers\n\n        // Verify we have audio tracks\n        const audioTracks = audioDestination.stream.getAudioTracks();\n        if (audioTracks.length === 0) {\n          setDebug('Warning: No audio tracks found in audio stream');\n        } else {\n          setDebug(`Audio stream created with ${audioTracks.length} audio tracks`);\n\n          // Log audio track details\n          audioTracks.forEach((track, index) => {\n            console.log(`Audio track ${index}:`, track.label, track.enabled, track.readyState);\n          });\n        }\n\n        // Combine video and audio streams\n        const combinedStream = new MediaStream([...videoTracks, ...audioTracks]);\n\n        // Check if combined stream has tracks\n        if (combinedStream.getTracks().length === 0) {\n          throw new Error(\"Combined stream has no tracks\");\n        }\n        setDebug(`Combined stream created with ${combinedStream.getTracks().length} total tracks`);\n\n        // Try different MIME types in order of preference for high quality\n        const mimeTypes = ['video/webm;codecs=vp9,opus',\n        // VP9 is higher quality than VP8\n        'video/webm;codecs=h264,opus',\n        // H.264 is widely supported\n        'video/webm;codecs=vp8,opus',\n        // VP8 fallback\n        'video/webm' // Generic fallback\n        ];\n        let selectedMimeType = '';\n        for (const type of mimeTypes) {\n          if (MediaRecorder.isTypeSupported(type)) {\n            selectedMimeType = type;\n            setDebug(`Using MIME type: ${selectedMimeType}`);\n            break;\n          }\n        }\n        if (!selectedMimeType) {\n          setDebug('Warning: No standard MIME types supported, trying without specifying codec');\n        }\n\n        // Create MediaRecorder with high quality options\n        const options = {\n          mimeType: selectedMimeType || 'video/webm',\n          videoBitsPerSecond: HIGH_VIDEO_BITRATE,\n          audioBitsPerSecond: HIGH_AUDIO_BITRATE\n        };\n        try {\n          const mediaRecorder = new MediaRecorder(combinedStream, options);\n          mediaRecorderRef.current = mediaRecorder;\n\n          // Log MediaRecorder details\n          console.log('MediaRecorder created:', mediaRecorder.mimeType, mediaRecorder.state);\n          setDebug(`MediaRecorder created with mime type: ${mediaRecorder.mimeType}, video bitrate: ${HIGH_VIDEO_BITRATE / 1000000}Mbps`);\n\n          // Log MediaRecorder state changes\n          mediaRecorder.addEventListener('start', () => {\n            console.log('MediaRecorder started');\n            setDebug('Recording started at high quality');\n          });\n          mediaRecorder.addEventListener('error', event => {\n            console.error('MediaRecorder error:', event);\n            setDebug(`MediaRecorder error: ${event.error || 'Unknown error'}`);\n          });\n\n          // Handle data available - this is critical\n          mediaRecorder.ondataavailable = event => {\n            console.log('Data available event, size:', event.data.size);\n            if (event.data && event.data.size > 0) {\n              chunksRef.current.push(event.data);\n              setDebug(`Received data chunk: ${(event.data.size / 1024).toFixed(2)} KB, total chunks: ${chunksRef.current.length}`);\n            } else {\n              console.warn('Received empty data chunk');\n              setDebug('Warning: Received empty data chunk');\n            }\n          };\n\n          // Handle recording stop\n          mediaRecorder.onstop = () => {\n            console.log('MediaRecorder stopped, chunks:', chunksRef.current.length);\n            setDebug(`Recording stopped with ${chunksRef.current.length} chunks`);\n            if (chunksRef.current.length === 0) {\n              setDebug('Error: No data chunks were recorded');\n              alert('Error: No video data was captured during recording. This may be due to browser compatibility issues. Try using Chrome or Edge.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n\n            // Calculate total size of all chunks\n            const totalSize = chunksRef.current.reduce((size, chunk) => size + chunk.size, 0);\n            setDebug(`Total data size: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);\n            if (totalSize === 0) {\n              setDebug('Error: Recorded data has zero size');\n              alert('Error: The recorded video has no data (0 bytes). Try using a different browser or visualization.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n            try {\n              // Create blob from chunks with high quality settings\n              const blob = new Blob(chunksRef.current, {\n                type: selectedMimeType || 'video/webm'\n              });\n              console.log('Created blob, size:', blob.size);\n              setDebug(`Created video blob: ${(blob.size / 1024 / 1024).toFixed(2)} MB`);\n              if (blob.size === 0) {\n                setDebug('Error: Final blob has zero size');\n                alert('Error: The final video file has no data (0 bytes). Try using a different browser.');\n                setIsExporting(false);\n                cleanupResources();\n                return;\n              }\n              const url = URL.createObjectURL(blob);\n\n              // Create filename based on audio file name with fallback\n              let fileName = \"visualization.webm\";\n              if (audioFile && audioFile.name) {\n                fileName = audioFile.name.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n              } else if (audioFile && audioFile.path) {\n                // Extract filename from path as fallback\n                const pathParts = audioFile.path.split('/');\n                const pathFileName = pathParts[pathParts.length - 1];\n                fileName = pathFileName.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n              }\n\n              // Download the file\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = fileName;\n              a.click();\n\n              // Clean up\n              URL.revokeObjectURL(url);\n              setIsExporting(false);\n              setProgress(100);\n              setDebug('Export completed successfully');\n\n              // Clean up resources\n              cleanupResources();\n            } catch (blobError) {\n              console.error('Error creating blob:', blobError);\n              setDebug(`Error creating video file: ${blobError.message}`);\n              alert(`Error creating video file: ${blobError.message}`);\n              setIsExporting(false);\n              cleanupResources();\n            }\n          };\n\n          // CRITICAL: First activate the visualizer BEFORE starting the MediaRecorder\n          // This ensures the visualizer is active and rendering before we start recording\n          setDebug('Activating visualizer before starting recording...');\n          const visualizerActivated = await activateVisualizer(audioElement);\n          if (!visualizerActivated) {\n            setDebug('Warning: Could not properly activate visualizer, recording may not include visuals');\n          }\n\n          // Use smaller timeslice for higher quality\n          mediaRecorder.start(100); // Capture in 100ms chunks for more frequent data\n          setDebug('MediaRecorder started with 100ms timeslice for high quality');\n\n          // Start audio playback and ensure visualization is active\n          try {\n            // Start audio playback\n            await audioElement.play();\n            setDebug('Audio playback started');\n\n            // Double-check that the visualizer is active after audio starts\n            // This is a critical step to ensure synchronization\n            setTimeout(async () => {\n              const reactivated = await activateVisualizer(audioElement);\n              if (reactivated) {\n                setDebug('Visualizer re-activated after audio start');\n              }\n            }, 100);\n\n            // Force a render cycle to ensure the canvas is updating\n            if (canvas) {\n              const ctx = canvas.getContext('2d');\n              ctx.fillStyle = 'rgba(0,0,0,0.01)';\n              ctx.fillRect(0, 0, 1, 1); // Minimal draw to force a render cycle\n            }\n          } catch (playError) {\n            console.error('Error playing audio:', playError);\n            setDebug(`Failed to play audio: ${playError.message || 'Unknown error'}`);\n            throw new Error(`Failed to play audio: ${playError.message}`);\n          }\n\n          // Periodically request data to ensure chunks are being collected\n          // and keep the visualizer active\n          dataRequestIntervalRef.current = setInterval(() => {\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              mediaRecorderRef.current.requestData();\n\n              // Also periodically check if the canvas is still active\n              if (canvas) {\n                try {\n                  const ctx = canvas.getContext('2d');\n                  ctx.fillStyle = 'rgba(0,0,0,0.01)';\n                  ctx.fillRect(0, 0, 1, 1); // Minimal draw to keep the canvas active\n\n                  // Periodically try to re-activate the visualizer to ensure it stays active\n                  activateVisualizer(audioElement);\n                } catch (e) {\n                  console.error('Error keeping canvas active:', e);\n                }\n              }\n            }\n          }, 1000);\n\n          // Update progress based on audio time\n          progressIntervalRef.current = setInterval(() => {\n            if (audioDurationRef.current) {\n              const elapsed = (Date.now() - startTimeRef.current) / 1000;\n              const percentage = Math.min(Math.floor(elapsed / audioDurationRef.current * 100), 99);\n              setProgress(percentage);\n\n              // Log data chunks periodically\n              setDebug(`Progress: ${percentage}%, Chunks: ${chunksRef.current.length}, Duration: ${elapsed.toFixed(1)}s/${audioDurationRef.current.toFixed(1)}s`);\n\n              // If we've been recording for a while but have no chunks, something is wrong\n              if (elapsed > 3 && chunksRef.current.length === 0) {\n                setDebug('Warning: No data chunks received after 3 seconds');\n\n                // Try to re-activate the visualizer as a last resort\n                activateVisualizer(audioElement);\n              }\n            }\n          }, 500);\n\n          // Stop recording when audio ends\n          audioElement.onended = () => {\n            setDebug('Audio playback ended, stopping recording');\n\n            // Clear the data request interval\n            if (dataRequestIntervalRef.current) {\n              clearInterval(dataRequestIntervalRef.current);\n              dataRequestIntervalRef.current = null;\n            }\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              // Force one last dataavailable event before stopping\n              mediaRecorderRef.current.requestData();\n\n              // Small delay to ensure the last data is captured\n              setTimeout(() => {\n                try {\n                  mediaRecorderRef.current.stop();\n                } catch (stopError) {\n                  console.error('Error stopping MediaRecorder:', stopError);\n                  setDebug(`Error stopping recording: ${stopError.message}`);\n                  setIsExporting(false);\n                  cleanupResources();\n                }\n              }, 500);\n            }\n          };\n        } catch (recorderError) {\n          console.error('Error creating MediaRecorder:', recorderError);\n          setDebug(`Failed to create MediaRecorder: ${recorderError.message}`);\n          throw new Error(`Failed to create MediaRecorder: ${recorderError.message}. Try using a different browser.`);\n        }\n      } catch (audioError) {\n        console.error('Error setting up audio:', audioError);\n        setDebug(`Audio setup error: ${audioError.message}`);\n        throw new Error(`Failed to set up audio: ${audioError.message}`);\n      }\n    } catch (error) {\n      console.error(\"Error exporting video:\", error);\n      setDebug(`Export error: ${error.message || 'Unknown error'}`);\n      alert(`Error exporting video: ${error.message}`);\n      setIsExporting(false);\n      cleanupResources();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-exporter\",\n    children: isExporting ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-text\",\n        children: [progress, \"% Exporting...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        children: debug\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"export-button\",\n      onClick: exportVideo,\n      disabled: !visualizerRef || !audioFile || isPlaying,\n      children: \"Export Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 710,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoExporter, \"OD03VhHTo0MVmpYUY8bNZerExU0=\");\n_c = VideoExporter;\nexport default VideoExporter;\nvar _c;\n$RefreshReg$(_c, \"VideoExporter\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","VideoExporter","visualizerRef","audioFile","isPlaying","_s","isExporting","setIsExporting","progress","setProgress","debug","setDebug","mediaRecorderRef","chunksRef","startTimeRef","audioDurationRef","progressIntervalRef","dataRequestIntervalRef","audioContextRef","audioSourceRef","audioElementRef","HIGH_VIDEO_BITRATE","HIGH_AUDIO_BITRATE","FRAME_RATE","cleanupResources","current","clearInterval","disconnect","e","console","error","pause","oncanplaythrough","onerror","onended","removeAttribute","load","state","close","catch","stop","validateAudioFile","path","ensureVisualizerActive","canvas","getCanvas","ctx","getContext","imageData","getImageData","width","height","putImageData","getCanvasResolution","log","activateVisualizer","audioElement","startVisualization","animationFrameId","requestAnimationFrame","clearRect","fillStyle","fillRect","playEvent","Event","bubbles","dispatchEvent","visualizeEvent","CustomEvent","detail","message","exportVideo","alert","Date","now","Error","resolution","stream","captureStream","mozCaptureStream","webkitCaptureStream","videoTracks","getVideoTracks","length","forEach","track","index","label","enabled","readyState","applyConstraints","ideal","frameRate","AudioContext","window","webkitAudioContext","audioContext","sampleRate","timestamp","getTime","encodedPath","encodeURI","audioUrl","Audio","crossOrigin","preload","errorDetail","target","code","audioLoadPromise","Promise","resolve","reject","duration","timeoutId","setTimeout","clearTimeoutHandler","clearTimeout","addEventListener","once","src","toFixed","audioSource","createMediaElementSource","audioDestination","createMediaStreamDestination","gainNode","createGain","gain","value","connect","destination","audioTracks","getAudioTracks","combinedStream","MediaStream","getTracks","mimeTypes","selectedMimeType","type","MediaRecorder","isTypeSupported","options","mimeType","videoBitsPerSecond","audioBitsPerSecond","mediaRecorder","event","ondataavailable","data","size","push","warn","onstop","totalSize","reduce","chunk","blob","Blob","url","URL","createObjectURL","fileName","name","replace","pathParts","split","pathFileName","a","document","createElement","href","download","click","revokeObjectURL","blobError","visualizerActivated","start","play","reactivated","playError","setInterval","requestData","elapsed","percentage","Math","min","floor","stopError","recorderError","audioError","className","children","style","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/VideoExporter.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport './VideoExporter.css';\n\nconst VideoExporter = ({ visualizerRef, audioFile, isPlaying }) => {\n  const [isExporting, setIsExporting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [debug, setDebug] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startTimeRef = useRef(null);\n  const audioDurationRef = useRef(null);\n  const progressIntervalRef = useRef(null);\n  const dataRequestIntervalRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioSourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n  \n  // High quality settings\n  const HIGH_VIDEO_BITRATE = 8000000; // 8 Mbps for high quality video\n  const HIGH_AUDIO_BITRATE = 320000;  // 320 kbps for high quality audio\n  const FRAME_RATE = 60;              // 60 fps for smooth animation\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      cleanupResources();\n    };\n  }, []);\n\n  // Clean up resources function to centralize cleanup logic\n  const cleanupResources = () => {\n    if (progressIntervalRef.current) {\n      clearInterval(progressIntervalRef.current);\n      progressIntervalRef.current = null;\n    }\n    \n    if (dataRequestIntervalRef.current) {\n      clearInterval(dataRequestIntervalRef.current);\n      dataRequestIntervalRef.current = null;\n    }\n    \n    if (audioSourceRef.current) {\n      try {\n        audioSourceRef.current.disconnect();\n      } catch (e) {\n        console.error('Error disconnecting audio source:', e);\n      }\n      audioSourceRef.current = null;\n    }\n    \n    if (audioElementRef.current) {\n      try {\n        audioElementRef.current.pause();\n        // Remove all event listeners\n        audioElementRef.current.oncanplaythrough = null;\n        audioElementRef.current.onerror = null;\n        audioElementRef.current.onended = null;\n        // Clear source and load to release resources\n        audioElementRef.current.removeAttribute('src');\n        audioElementRef.current.load();\n      } catch (e) {\n        console.error('Error cleaning up audio element:', e);\n      }\n      audioElementRef.current = null;\n    }\n    \n    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n      try {\n        audioContextRef.current.close().catch(e => console.error('Error closing audio context:', e));\n      } catch (e) {\n        console.error('Error closing audio context:', e);\n      }\n      audioContextRef.current = null;\n    }\n    \n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      try {\n        mediaRecorderRef.current.stop();\n      } catch (e) {\n        console.error('Error stopping media recorder:', e);\n      }\n      mediaRecorderRef.current = null;\n    }\n    \n    chunksRef.current = [];\n  };\n\n  // Validate that the audio file path is valid\n  const validateAudioFile = () => {\n    if (!audioFile) {\n      return false;\n    }\n    \n    if (!audioFile.path) {\n      console.error('Audio file has no path');\n      setDebug('Error: Audio file has no path');\n      return false;\n    }\n    \n    return true;\n  };\n\n  // Function to ensure the visualizer is active and rendering\n  const ensureVisualizerActive = () => {\n    if (!visualizerRef?.current) {\n      console.error('Visualizer reference not available');\n      return false;\n    }\n    \n    // Force a render cycle on the canvas to ensure it's active\n    const canvas = visualizerRef.current.getCanvas();\n    if (!canvas) {\n      console.error('Canvas not found in visualizer');\n      return false;\n    }\n    \n    try {\n      // Force a frame to be drawn on the canvas to ensure it has content\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(imageData, 0, 0);\n      return true;\n    } catch (e) {\n      console.error('Error activating visualizer:', e);\n      return false;\n    }\n  };\n  \n  // Get the current canvas resolution\n  const getCanvasResolution = (canvas) => {\n    if (!canvas) return { width: 0, height: 0 };\n    \n    // Get the actual canvas dimensions\n    const width = canvas.width;\n    const height = canvas.height;\n    \n    // Log the resolution\n    console.log(`Canvas resolution: ${width}x${height}`);\n    setDebug(`Canvas resolution: ${width}x${height}`);\n    \n    return { width, height };\n  };\n  \n  // Function to properly activate the visualizer with the audio element\n  const activateVisualizer = async (audioElement) => {\n    if (!visualizerRef?.current || !audioElement) {\n      console.error('Cannot activate visualizer: missing references');\n      return false;\n    }\n    \n    try {\n      // First, ensure we have a canvas\n      const canvas = visualizerRef.current.getCanvas();\n      if (!canvas) {\n        console.error('Canvas not found in visualizer');\n        return false;\n      }\n      \n      // Check if the App component has registered the audio element with the visualizer\n      // If not, we need to manually trigger the visualization\n      \n      // 1. Try to access any public methods on the visualizer ref\n      if (typeof visualizerRef.current.startVisualization === 'function') {\n        console.log('Using visualizer.startVisualization() method');\n        visualizerRef.current.startVisualization();\n        setDebug('Activated visualizer using startVisualization method');\n        return true;\n      }\n      \n      // 2. If no direct method, try to find and call the animation frame function\n      // This is a more direct approach to force the visualizer to render\n      const animationFrameId = requestAnimationFrame(() => {\n        // Force a render cycle\n        const ctx = canvas.getContext('2d');\n        // Clear the canvas to force a full redraw\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        \n        // Draw something to ensure the canvas is active\n        ctx.fillStyle = 'rgba(0,0,0,0.01)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      });\n      \n      // 3. Dispatch events that might trigger the visualizer\n      // Create and dispatch custom events that the visualizer might be listening for\n      const playEvent = new Event('play', { bubbles: true });\n      audioElement.dispatchEvent(playEvent);\n      \n      // Also try to dispatch a custom event directly on the canvas\n      const visualizeEvent = new CustomEvent('visualize', { \n        bubbles: true,\n        detail: { isPlaying: true, audioElement }\n      });\n      canvas.dispatchEvent(visualizeEvent);\n      \n      setDebug('Activated visualizer using multiple methods');\n      return true;\n    } catch (e) {\n      console.error('Error activating visualizer:', e);\n      setDebug(`Error activating visualizer: ${e.message}`);\n      return false;\n    }\n  };\n\n  const exportVideo = async () => {\n    if (!visualizerRef?.current || !audioFile) {\n      alert(\"Please upload an audio file first\");\n      return;\n    }\n    \n    // Validate audio file\n    if (!validateAudioFile()) {\n      alert(\"Invalid audio file. Please upload a valid audio file.\");\n      return;\n    }\n    \n    // Check if already exporting\n    if (isExporting) {\n      console.log('Already exporting, ignoring request');\n      return;\n    }\n\n    try {\n      // Clean up any existing resources first\n      cleanupResources();\n      \n      setIsExporting(true);\n      setProgress(0);\n      setDebug('Starting export process...');\n      startTimeRef.current = Date.now();\n\n      // Ensure visualizer is active\n      if (!ensureVisualizerActive()) {\n        throw new Error(\"Could not activate visualizer\");\n      }\n      \n      // Get the canvas element from the visualizer using the exposed method\n      const canvas = visualizerRef.current.getCanvas();\n      if (!canvas) {\n        throw new Error(\"Canvas element not found\");\n      }\n      \n      // Get and log the canvas resolution\n      const resolution = getCanvasResolution(canvas);\n      setDebug(`Canvas found, dimensions: ${resolution.width}x${resolution.height}`);\n      \n      // Ensure the canvas has a reasonable size for high-quality export\n      if (resolution.width < 720 || resolution.height < 720) {\n        setDebug(`Warning: Canvas resolution (${resolution.width}x${resolution.height}) is low. Consider using a higher resolution for better quality.`);\n      }\n\n      // Create a stream from the canvas with high frame rate\n      let stream = null;\n      \n      // Method 1: Standard captureStream with high frame rate\n      try {\n        stream = canvas.captureStream(FRAME_RATE);\n        setDebug(`Canvas stream created with ${FRAME_RATE}fps`);\n      } catch (e) {\n        console.error('Standard captureStream failed:', e);\n        setDebug('Standard captureStream failed, trying alternatives...');\n      }\n      \n      // Method 2: Mozilla captureStream\n      if (!stream) {\n        try {\n          stream = canvas.mozCaptureStream && canvas.mozCaptureStream(FRAME_RATE);\n          if (stream) {\n            setDebug(`Canvas stream created with mozCaptureStream at ${FRAME_RATE}fps`);\n          }\n        } catch (e) {\n          console.error('mozCaptureStream failed:', e);\n          setDebug('mozCaptureStream failed, trying alternatives...');\n        }\n      }\n      \n      // Method 3: WebKit captureStream\n      if (!stream) {\n        try {\n          stream = canvas.webkitCaptureStream && canvas.webkitCaptureStream(FRAME_RATE);\n          if (stream) {\n            setDebug(`Canvas stream created with webkitCaptureStream at ${FRAME_RATE}fps`);\n          }\n        } catch (e) {\n          console.error('webkitCaptureStream failed:', e);\n          setDebug('webkitCaptureStream failed');\n        }\n      }\n\n      if (!stream) {\n        throw new Error(\"Your browser doesn't support canvas streaming. Try using a different browser like Chrome.\");\n      }\n\n      // Verify we have video tracks\n      const videoTracks = stream.getVideoTracks();\n      if (videoTracks.length === 0) {\n        throw new Error(\"No video tracks found in canvas stream\");\n      }\n      setDebug(`Stream created with ${videoTracks.length} video tracks`);\n      \n      // Log video track details and try to set constraints for higher quality\n      videoTracks.forEach((track, index) => {\n        console.log(`Video track ${index}:`, track.label, track.enabled, track.readyState);\n        \n        // Try to set constraints for higher quality if supported\n        try {\n          if (track.applyConstraints) {\n            track.applyConstraints({\n              width: { ideal: resolution.width },\n              height: { ideal: resolution.height },\n              frameRate: { ideal: FRAME_RATE }\n            });\n            console.log(`Applied constraints to video track ${index}`);\n          }\n        } catch (e) {\n          console.error('Could not apply constraints to video track:', e);\n        }\n      });\n\n      // Create audio context and connect to stream - use a more reliable approach\n      try {\n        // Create a new audio context with high sample rate\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        const audioContext = new AudioContext({ sampleRate: 48000 });\n        audioContextRef.current = audioContext;\n        \n        // Construct the audio URL with proper encoding\n        const timestamp = new Date().getTime();\n        // Ensure the path is properly encoded\n        const encodedPath = encodeURI(audioFile.path);\n        const audioUrl = `http://localhost:5001${encodedPath}?t=${timestamp}`;\n        \n        console.log('Audio URL:', audioUrl);\n        setDebug(`Using audio URL: ${audioUrl}`);\n        \n        // Create a new audio element for playback during recording\n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n        audioElementRef.current = audioElement;\n        \n        // Set up error handler before setting source\n        audioElement.onerror = (e) => {\n          const errorDetail = e.target.error \n            ? `${e.target.error.message || ''} (code: ${e.target.error.code})` \n            : 'Unknown error';\n          console.error('Audio error:', e.target.error);\n          setDebug(`Audio error: ${errorDetail}`);\n          throw new Error(`Audio error: ${errorDetail}`);\n        };\n        \n        // Wait for audio to be loaded enough to play\n        setDebug('Loading audio...');\n        \n        // Create a promise to handle audio loading\n        const audioLoadPromise = new Promise((resolve, reject) => {\n          // Set up success handler\n          audioElement.oncanplaythrough = () => {\n            console.log('Audio loaded successfully, duration:', audioElement.duration);\n            setDebug('Audio loaded successfully');\n            resolve();\n          };\n          \n          // Set up error handler\n          audioElement.onerror = (e) => {\n            const errorDetail = e.target.error \n              ? `${e.target.error.message || ''} (code: ${e.target.error.code})` \n              : 'Unknown error';\n            console.error('Audio load error:', e.target.error);\n            setDebug(`Audio load error: ${errorDetail}`);\n            reject(new Error(`Audio load error: ${errorDetail}`));\n          };\n          \n          // Set a timeout in case the audio never loads\n          const timeoutId = setTimeout(() => {\n            audioElement.oncanplaythrough = null;\n            audioElement.onerror = null;\n            setDebug('Audio load timeout - took too long to load');\n            reject(new Error('Audio load timeout - took too long to load'));\n          }, 10000);\n          \n          // Clean up timeout if audio loads or errors\n          const clearTimeoutHandler = () => {\n            clearTimeout(timeoutId);\n          };\n          \n          audioElement.addEventListener('canplaythrough', clearTimeoutHandler, { once: true });\n          audioElement.addEventListener('error', clearTimeoutHandler, { once: true });\n        });\n        \n        // Set source AFTER setting up all event handlers\n        audioElement.src = audioUrl;\n        \n        // Start loading\n        audioElement.load();\n        \n        // Wait for audio to load\n        await audioLoadPromise;\n        \n        // Store the duration for progress calculation\n        audioDurationRef.current = audioElement.duration;\n        setDebug(`Audio duration: ${audioDurationRef.current.toFixed(2)} seconds`);\n        \n        // Create and connect the audio source\n        const audioSource = audioContext.createMediaElementSource(audioElement);\n        audioSourceRef.current = audioSource;\n        \n        // Create a destination with high-quality settings\n        const audioDestination = audioContext.createMediaStreamDestination();\n        \n        // Optional: Add audio processing for better quality\n        const gainNode = audioContext.createGain();\n        gainNode.gain.value = 1.0; // Ensure full volume\n        \n        // Connect the audio processing chain\n        audioSource.connect(gainNode);\n        gainNode.connect(audioDestination);\n        gainNode.connect(audioContext.destination); // Also connect to speakers\n\n        // Verify we have audio tracks\n        const audioTracks = audioDestination.stream.getAudioTracks();\n        if (audioTracks.length === 0) {\n          setDebug('Warning: No audio tracks found in audio stream');\n        } else {\n          setDebug(`Audio stream created with ${audioTracks.length} audio tracks`);\n          \n          // Log audio track details\n          audioTracks.forEach((track, index) => {\n            console.log(`Audio track ${index}:`, track.label, track.enabled, track.readyState);\n          });\n        }\n\n        // Combine video and audio streams\n        const combinedStream = new MediaStream([\n          ...videoTracks,\n          ...audioTracks\n        ]);\n\n        // Check if combined stream has tracks\n        if (combinedStream.getTracks().length === 0) {\n          throw new Error(\"Combined stream has no tracks\");\n        }\n        setDebug(`Combined stream created with ${combinedStream.getTracks().length} total tracks`);\n\n        // Try different MIME types in order of preference for high quality\n        const mimeTypes = [\n          'video/webm;codecs=vp9,opus', // VP9 is higher quality than VP8\n          'video/webm;codecs=h264,opus', // H.264 is widely supported\n          'video/webm;codecs=vp8,opus', // VP8 fallback\n          'video/webm' // Generic fallback\n        ];\n        \n        let selectedMimeType = '';\n        for (const type of mimeTypes) {\n          if (MediaRecorder.isTypeSupported(type)) {\n            selectedMimeType = type;\n            setDebug(`Using MIME type: ${selectedMimeType}`);\n            break;\n          }\n        }\n        \n        if (!selectedMimeType) {\n          setDebug('Warning: No standard MIME types supported, trying without specifying codec');\n        }\n        \n        // Create MediaRecorder with high quality options\n        const options = {\n          mimeType: selectedMimeType || 'video/webm',\n          videoBitsPerSecond: HIGH_VIDEO_BITRATE,\n          audioBitsPerSecond: HIGH_AUDIO_BITRATE\n        };\n          \n        try {\n          const mediaRecorder = new MediaRecorder(combinedStream, options);\n          mediaRecorderRef.current = mediaRecorder;\n          \n          // Log MediaRecorder details\n          console.log('MediaRecorder created:', mediaRecorder.mimeType, mediaRecorder.state);\n          setDebug(`MediaRecorder created with mime type: ${mediaRecorder.mimeType}, video bitrate: ${HIGH_VIDEO_BITRATE/1000000}Mbps`);\n          \n          // Log MediaRecorder state changes\n          mediaRecorder.addEventListener('start', () => {\n            console.log('MediaRecorder started');\n            setDebug('Recording started at high quality');\n          });\n\n          mediaRecorder.addEventListener('error', (event) => {\n            console.error('MediaRecorder error:', event);\n            setDebug(`MediaRecorder error: ${event.error || 'Unknown error'}`);\n          });\n\n          // Handle data available - this is critical\n          mediaRecorder.ondataavailable = (event) => {\n            console.log('Data available event, size:', event.data.size);\n            if (event.data && event.data.size > 0) {\n              chunksRef.current.push(event.data);\n              setDebug(`Received data chunk: ${(event.data.size / 1024).toFixed(2)} KB, total chunks: ${chunksRef.current.length}`);\n            } else {\n              console.warn('Received empty data chunk');\n              setDebug('Warning: Received empty data chunk');\n            }\n          };\n\n          // Handle recording stop\n          mediaRecorder.onstop = () => {\n            console.log('MediaRecorder stopped, chunks:', chunksRef.current.length);\n            setDebug(`Recording stopped with ${chunksRef.current.length} chunks`);\n            \n            if (chunksRef.current.length === 0) {\n              setDebug('Error: No data chunks were recorded');\n              alert('Error: No video data was captured during recording. This may be due to browser compatibility issues. Try using Chrome or Edge.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n            \n            // Calculate total size of all chunks\n            const totalSize = chunksRef.current.reduce((size, chunk) => size + chunk.size, 0);\n            setDebug(`Total data size: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);\n            \n            if (totalSize === 0) {\n              setDebug('Error: Recorded data has zero size');\n              alert('Error: The recorded video has no data (0 bytes). Try using a different browser or visualization.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n\n            try {\n              // Create blob from chunks with high quality settings\n              const blob = new Blob(chunksRef.current, { type: selectedMimeType || 'video/webm' });\n              console.log('Created blob, size:', blob.size);\n              setDebug(`Created video blob: ${(blob.size / 1024 / 1024).toFixed(2)} MB`);\n              \n              if (blob.size === 0) {\n                setDebug('Error: Final blob has zero size');\n                alert('Error: The final video file has no data (0 bytes). Try using a different browser.');\n                setIsExporting(false);\n                cleanupResources();\n                return;\n              }\n              \n              const url = URL.createObjectURL(blob);\n              \n              // Create filename based on audio file name with fallback\n              let fileName = \"visualization.webm\";\n              if (audioFile && audioFile.name) {\n                fileName = audioFile.name.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n              } else if (audioFile && audioFile.path) {\n                // Extract filename from path as fallback\n                const pathParts = audioFile.path.split('/');\n                const pathFileName = pathParts[pathParts.length - 1];\n                fileName = pathFileName.replace(/\\.[^/.]+$/, \"\") + \"_visualization.webm\";\n              }\n              \n              // Download the file\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = fileName;\n              a.click();\n              \n              // Clean up\n              URL.revokeObjectURL(url);\n              setIsExporting(false);\n              setProgress(100);\n              setDebug('Export completed successfully');\n              \n              // Clean up resources\n              cleanupResources();\n            } catch (blobError) {\n              console.error('Error creating blob:', blobError);\n              setDebug(`Error creating video file: ${blobError.message}`);\n              alert(`Error creating video file: ${blobError.message}`);\n              setIsExporting(false);\n              cleanupResources();\n            }\n          };\n\n          // CRITICAL: First activate the visualizer BEFORE starting the MediaRecorder\n          // This ensures the visualizer is active and rendering before we start recording\n          setDebug('Activating visualizer before starting recording...');\n          const visualizerActivated = await activateVisualizer(audioElement);\n          \n          if (!visualizerActivated) {\n            setDebug('Warning: Could not properly activate visualizer, recording may not include visuals');\n          }\n          \n          // Use smaller timeslice for higher quality\n          mediaRecorder.start(100); // Capture in 100ms chunks for more frequent data\n          setDebug('MediaRecorder started with 100ms timeslice for high quality');\n\n          // Start audio playback and ensure visualization is active\n          try {\n            // Start audio playback\n            await audioElement.play();\n            setDebug('Audio playback started');\n            \n            // Double-check that the visualizer is active after audio starts\n            // This is a critical step to ensure synchronization\n            setTimeout(async () => {\n              const reactivated = await activateVisualizer(audioElement);\n              if (reactivated) {\n                setDebug('Visualizer re-activated after audio start');\n              }\n            }, 100);\n            \n            // Force a render cycle to ensure the canvas is updating\n            if (canvas) {\n              const ctx = canvas.getContext('2d');\n              ctx.fillStyle = 'rgba(0,0,0,0.01)';\n              ctx.fillRect(0, 0, 1, 1); // Minimal draw to force a render cycle\n            }\n            \n          } catch (playError) {\n            console.error('Error playing audio:', playError);\n            setDebug(`Failed to play audio: ${playError.message || 'Unknown error'}`);\n            throw new Error(`Failed to play audio: ${playError.message}`);\n          }\n\n          // Periodically request data to ensure chunks are being collected\n          // and keep the visualizer active\n          dataRequestIntervalRef.current = setInterval(() => {\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              mediaRecorderRef.current.requestData();\n              \n              // Also periodically check if the canvas is still active\n              if (canvas) {\n                try {\n                  const ctx = canvas.getContext('2d');\n                  ctx.fillStyle = 'rgba(0,0,0,0.01)';\n                  ctx.fillRect(0, 0, 1, 1); // Minimal draw to keep the canvas active\n                  \n                  // Periodically try to re-activate the visualizer to ensure it stays active\n                  activateVisualizer(audioElement);\n                } catch (e) {\n                  console.error('Error keeping canvas active:', e);\n                }\n              }\n            }\n          }, 1000);\n\n          // Update progress based on audio time\n          progressIntervalRef.current = setInterval(() => {\n            if (audioDurationRef.current) {\n              const elapsed = (Date.now() - startTimeRef.current) / 1000;\n              const percentage = Math.min(Math.floor((elapsed / audioDurationRef.current) * 100), 99);\n              setProgress(percentage);\n              \n              // Log data chunks periodically\n              setDebug(`Progress: ${percentage}%, Chunks: ${chunksRef.current.length}, Duration: ${elapsed.toFixed(1)}s/${audioDurationRef.current.toFixed(1)}s`);\n              \n              // If we've been recording for a while but have no chunks, something is wrong\n              if (elapsed > 3 && chunksRef.current.length === 0) {\n                setDebug('Warning: No data chunks received after 3 seconds');\n                \n                // Try to re-activate the visualizer as a last resort\n                activateVisualizer(audioElement);\n              }\n            }\n          }, 500);\n\n          // Stop recording when audio ends\n          audioElement.onended = () => {\n            setDebug('Audio playback ended, stopping recording');\n            \n            // Clear the data request interval\n            if (dataRequestIntervalRef.current) {\n              clearInterval(dataRequestIntervalRef.current);\n              dataRequestIntervalRef.current = null;\n            }\n            \n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              // Force one last dataavailable event before stopping\n              mediaRecorderRef.current.requestData();\n              \n              // Small delay to ensure the last data is captured\n              setTimeout(() => {\n                try {\n                  mediaRecorderRef.current.stop();\n                } catch (stopError) {\n                  console.error('Error stopping MediaRecorder:', stopError);\n                  setDebug(`Error stopping recording: ${stopError.message}`);\n                  setIsExporting(false);\n                  cleanupResources();\n                }\n              }, 500);\n            }\n          };\n          \n        } catch (recorderError) {\n          console.error('Error creating MediaRecorder:', recorderError);\n          setDebug(`Failed to create MediaRecorder: ${recorderError.message}`);\n          throw new Error(`Failed to create MediaRecorder: ${recorderError.message}. Try using a different browser.`);\n        }\n      } catch (audioError) {\n        console.error('Error setting up audio:', audioError);\n        setDebug(`Audio setup error: ${audioError.message}`);\n        throw new Error(`Failed to set up audio: ${audioError.message}`);\n      }\n\n    } catch (error) {\n      console.error(\"Error exporting video:\", error);\n      setDebug(`Export error: ${error.message || 'Unknown error'}`);\n      alert(`Error exporting video: ${error.message}`);\n      setIsExporting(false);\n      cleanupResources();\n    }\n  };\n\n  return (\n    <div className=\"video-exporter\">\n      {isExporting ? (\n        <div className=\"export-progress\">\n          <div className=\"progress-bar\">\n            <div className=\"progress-fill\" style={{ width: `${progress}%` }}></div>\n          </div>\n          <div className=\"progress-text\">{progress}% Exporting...</div>\n          <div className=\"debug-info\">{debug}</div>\n        </div>\n      ) : (\n        <button\n          className=\"export-button\"\n          onClick={exportVideo}\n          disabled={!visualizerRef || !audioFile || isPlaying}\n        >\n          Export Video\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default VideoExporter; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}