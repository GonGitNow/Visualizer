{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\VideoExporter.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './VideoExporter.css';\n\n// Quality presets for different export options\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QUALITY_PRESETS = {\n  high: {\n    videoBitrate: 8000000,\n    audioBitrate: 320000,\n    frameRate: 60,\n    label: 'High Quality'\n  },\n  medium: {\n    videoBitrate: 4000000,\n    audioBitrate: 192000,\n    frameRate: 30,\n    label: 'Medium Quality'\n  },\n  low: {\n    videoBitrate: 2000000,\n    audioBitrate: 128000,\n    frameRate: 30,\n    label: 'Low Quality'\n  }\n};\n\n// Export format options with MIME type checks\nconst EXPORT_FORMATS = {\n  webm: {\n    mimeType: 'video/webm;codecs=vp9,opus',\n    extension: 'webm',\n    label: 'WebM (VP9)',\n    fallback: null\n  },\n  mp4: {\n    mimeType: 'video/mp4;codecs=h264,aac',\n    extension: 'mp4',\n    label: 'MP4 (H.264)',\n    fallback: 'webm'\n  }\n};\n\n// Maximum number of retries for failed exports\nconst MAX_RETRIES = 3;\nconst VideoExporter = ({\n  visualizerRef,\n  audioFile,\n  isPlaying\n}) => {\n  _s();\n  const [isExporting, setIsExporting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [debug, setDebug] = useState('');\n  const [selectedQuality, setSelectedQuality] = useState('high');\n  const [selectedFormat, setSelectedFormat] = useState('webm');\n  const [retryCount, setRetryCount] = useState(0);\n  const [supportedFormats, setSupportedFormats] = useState([]);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startTimeRef = useRef(null);\n  const audioDurationRef = useRef(null);\n  const progressIntervalRef = useRef(null);\n  const dataRequestIntervalRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioSourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n  const originalAudioRef = useRef(null);\n  const originalIsPlayingRef = useRef(false);\n\n  // Check supported formats on component mount\n  useEffect(() => {\n    const checkSupportedFormats = () => {\n      const supported = Object.entries(EXPORT_FORMATS).filter(([_, format]) => MediaRecorder.isTypeSupported(format.mimeType)).map(([key]) => key);\n      setSupportedFormats(supported);\n      setDebug(`Supported formats: ${supported.join(', ')}`);\n\n      // If current format is not supported, switch to a supported one\n      if (!supported.includes(selectedFormat)) {\n        const fallbackFormat = EXPORT_FORMATS[selectedFormat].fallback;\n        if (fallbackFormat && supported.includes(fallbackFormat)) {\n          setSelectedFormat(fallbackFormat);\n          setDebug(`Switched to fallback format: ${fallbackFormat}`);\n        } else if (supported.length > 0) {\n          setSelectedFormat(supported[0]);\n          setDebug(`Switched to first supported format: ${supported[0]}`);\n        }\n      }\n    };\n    checkSupportedFormats();\n  }, []);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      cleanupResources();\n    };\n  }, []);\n\n  // Store the original audio element and isPlaying state\n  useEffect(() => {\n    const audioElements = document.querySelectorAll('audio');\n    if (audioElements.length > 0) {\n      originalAudioRef.current = audioElements[0];\n      console.log('Found original audio element:', originalAudioRef.current);\n    }\n    originalIsPlayingRef.current = isPlaying;\n  }, [isPlaying]);\n\n  // Clean up resources function\n  const cleanupResources = () => {\n    if (originalIsPlayingRef.current && originalAudioRef.current) {\n      try {\n        originalAudioRef.current.play().catch(e => {\n          console.error('Error resuming original audio:', e);\n        });\n      } catch (e) {\n        console.error('Error resuming original audio:', e);\n      }\n    }\n    if (progressIntervalRef.current) {\n      clearInterval(progressIntervalRef.current);\n      progressIntervalRef.current = null;\n    }\n    if (dataRequestIntervalRef.current) {\n      clearInterval(dataRequestIntervalRef.current);\n      dataRequestIntervalRef.current = null;\n    }\n    if (audioSourceRef.current) {\n      try {\n        audioSourceRef.current.disconnect();\n      } catch (e) {\n        console.error('Error disconnecting audio source:', e);\n      }\n      audioSourceRef.current = null;\n    }\n    if (audioElementRef.current) {\n      try {\n        audioElementRef.current.pause();\n        audioElementRef.current.oncanplaythrough = null;\n        audioElementRef.current.onerror = null;\n        audioElementRef.current.onended = null;\n        audioElementRef.current.removeAttribute('src');\n        audioElementRef.current.load();\n      } catch (e) {\n        console.error('Error cleaning up audio element:', e);\n      }\n      audioElementRef.current = null;\n    }\n    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n      try {\n        audioContextRef.current.close().catch(e => console.error('Error closing audio context:', e));\n      } catch (e) {\n        console.error('Error closing audio context:', e);\n      }\n      audioContextRef.current = null;\n    }\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      try {\n        mediaRecorderRef.current.stop();\n      } catch (e) {\n        console.error('Error stopping media recorder:', e);\n      }\n      mediaRecorderRef.current = null;\n    }\n    chunksRef.current = [];\n  };\n\n  // Validate audio file\n  const validateAudioFile = () => {\n    if (!audioFile) {\n      setDebug('Error: No audio file selected');\n      return false;\n    }\n    if (!audioFile.path) {\n      setDebug('Error: Audio file has no path');\n      return false;\n    }\n    return true;\n  };\n\n  // Ensure visualizer is active\n  const ensureVisualizerActive = () => {\n    if (!(visualizerRef !== null && visualizerRef !== void 0 && visualizerRef.current)) {\n      setDebug('Error: Visualizer reference not available');\n      return false;\n    }\n    const canvas = visualizerRef.current.getCanvas();\n    if (!canvas) {\n      setDebug('Error: Canvas not found in visualizer');\n      return false;\n    }\n    try {\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(imageData, 0, 0);\n      return true;\n    } catch (e) {\n      setDebug(`Error activating visualizer: ${e.message}`);\n      return false;\n    }\n  };\n\n  // Get canvas resolution\n  const getCanvasResolution = canvas => {\n    if (!canvas) return {\n      width: 0,\n      height: 0\n    };\n    const width = canvas.width;\n    const height = canvas.height;\n    console.log(`Canvas resolution: ${width}x${height}`);\n    setDebug(`Canvas resolution: ${width}x${height}`);\n    return {\n      width,\n      height\n    };\n  };\n\n  // Activate visualizer with original audio\n  const activateVisualizerWithOriginalAudio = async () => {\n    try {\n      const playButtons = document.querySelectorAll('button');\n      let playButton = null;\n      for (const button of playButtons) {\n        if (button.textContent.includes('Play') || button.className.includes('play') || button.title.includes('Play')) {\n          playButton = button;\n          break;\n        }\n      }\n      originalIsPlayingRef.current = isPlaying;\n      if (playButton && !isPlaying) {\n        setDebug('Clicking play button to activate visualizer');\n        playButton.click();\n        await new Promise(resolve => setTimeout(resolve, 500));\n        if (originalAudioRef.current) {\n          originalAudioRef.current.pause();\n          setDebug('Paused original audio to avoid duplication');\n        } else if (playButton) {\n          playButton.click();\n          setDebug('Clicked play button again to pause audio');\n        }\n        return true;\n      } else {\n        setDebug('Audio is already playing or play button not found');\n        return isPlaying;\n      }\n    } catch (e) {\n      setDebug(`Error activating visualizer: ${e.message}`);\n      return false;\n    }\n  };\n\n  // Retry mechanism for failed exports\n  const retryExport = async (exportFunction, maxRetries = MAX_RETRIES) => {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        setRetryCount(i + 1);\n        setDebug(`Attempt ${i + 1} of ${maxRetries}`);\n        await exportFunction();\n        return;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        setDebug(`Export failed, retrying in ${i + 1} seconds...`);\n        await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));\n      }\n    }\n  };\n  const exportVideo = async () => {\n    if (!(visualizerRef !== null && visualizerRef !== void 0 && visualizerRef.current) || !audioFile) {\n      alert(\"Please upload an audio file first\");\n      return;\n    }\n    if (!validateAudioFile()) {\n      alert(\"Invalid audio file. Please upload a valid audio file.\");\n      return;\n    }\n    if (isExporting) {\n      console.log('Already exporting, ignoring request');\n      return;\n    }\n    try {\n      cleanupResources();\n      setIsExporting(true);\n      setProgress(0);\n      setDebug('Starting export process...');\n      startTimeRef.current = Date.now();\n      setDebug('Activating visualizer with original audio...');\n      const visualizerActivated = await activateVisualizerWithOriginalAudio();\n      if (!visualizerActivated) {\n        setDebug('Warning: Could not activate visualizer with original audio');\n      }\n      await new Promise(resolve => setTimeout(resolve, 500));\n      if (!ensureVisualizerActive()) {\n        throw new Error(\"Could not activate visualizer\");\n      }\n      const canvas = visualizerRef.current.getCanvas();\n      if (!canvas) {\n        throw new Error(\"Canvas element not found\");\n      }\n      const resolution = getCanvasResolution(canvas);\n      setDebug(`Canvas found, dimensions: ${resolution.width}x${resolution.height}`);\n      if (resolution.width < 720 || resolution.height < 720) {\n        setDebug(`Warning: Canvas resolution (${resolution.width}x${resolution.height}) is low. Consider using a higher resolution for better quality.`);\n      }\n      let stream = null;\n\n      // Try different stream capture methods\n      try {\n        stream = canvas.captureStream(QUALITY_PRESETS[selectedQuality].frameRate);\n        setDebug(`Canvas stream created with ${QUALITY_PRESETS[selectedQuality].frameRate}fps`);\n      } catch (e) {\n        console.error('Standard captureStream failed:', e);\n        setDebug('Standard captureStream failed, trying alternatives...');\n      }\n      if (!stream) {\n        try {\n          stream = canvas.mozCaptureStream && canvas.mozCaptureStream(QUALITY_PRESETS[selectedQuality].frameRate);\n          if (stream) {\n            setDebug(`Canvas stream created with mozCaptureStream at ${QUALITY_PRESETS[selectedQuality].frameRate}fps`);\n          }\n        } catch (e) {\n          console.error('mozCaptureStream failed:', e);\n          setDebug('mozCaptureStream failed, trying alternatives...');\n        }\n      }\n      if (!stream) {\n        try {\n          stream = canvas.webkitCaptureStream && canvas.webkitCaptureStream(QUALITY_PRESETS[selectedQuality].frameRate);\n          if (stream) {\n            setDebug(`Canvas stream created with webkitCaptureStream at ${QUALITY_PRESETS[selectedQuality].frameRate}fps`);\n          }\n        } catch (e) {\n          console.error('webkitCaptureStream failed:', e);\n          setDebug('webkitCaptureStream failed');\n        }\n      }\n      if (!stream) {\n        throw new Error(\"Your browser doesn't support canvas streaming. Try using a different browser like Chrome.\");\n      }\n      const videoTracks = stream.getVideoTracks();\n      if (videoTracks.length === 0) {\n        throw new Error(\"No video tracks found in canvas stream\");\n      }\n      setDebug(`Stream created with ${videoTracks.length} video tracks`);\n      videoTracks.forEach((track, index) => {\n        console.log(`Video track ${index}:`, track.label, track.enabled, track.readyState);\n        try {\n          if (track.applyConstraints) {\n            track.applyConstraints({\n              width: {\n                ideal: resolution.width\n              },\n              height: {\n                ideal: resolution.height\n              },\n              frameRate: {\n                ideal: QUALITY_PRESETS[selectedQuality].frameRate\n              }\n            });\n            console.log(`Applied constraints to video track ${index}`);\n          }\n        } catch (e) {\n          console.error('Could not apply constraints to video track:', e);\n        }\n      });\n      try {\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        const audioContext = new AudioContext({\n          sampleRate: 48000\n        });\n        audioContextRef.current = audioContext;\n        const timestamp = new Date().getTime();\n        const encodedPath = encodeURI(audioFile.path);\n        const audioUrl = `http://localhost:5001${encodedPath}?t=${timestamp}`;\n        console.log('Audio URL:', audioUrl);\n        setDebug(`Using audio URL: ${audioUrl}`);\n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n        audioElement.volume = 0;\n        audioElementRef.current = audioElement;\n        audioElement.onerror = e => {\n          const errorDetail = e.target.error ? `${e.target.error.message || ''} (code: ${e.target.error.code})` : 'Unknown error';\n          console.error('Audio error:', e.target.error);\n          setDebug(`Audio error: ${errorDetail}`);\n          throw new Error(`Audio error: ${errorDetail}`);\n        };\n        setDebug('Loading audio...');\n        const audioLoadPromise = new Promise((resolve, reject) => {\n          audioElement.oncanplaythrough = () => {\n            console.log('Audio loaded successfully, duration:', audioElement.duration);\n            setDebug('Audio loaded successfully');\n            resolve();\n          };\n          audioElement.onerror = e => {\n            const errorDetail = e.target.error ? `${e.target.error.message || ''} (code: ${e.target.error.code})` : 'Unknown error';\n            console.error('Audio load error:', e.target.error);\n            setDebug(`Audio load error: ${errorDetail}`);\n            reject(new Error(`Audio load error: ${errorDetail}`));\n          };\n          const timeoutId = setTimeout(() => {\n            audioElement.oncanplaythrough = null;\n            audioElement.onerror = null;\n            setDebug('Audio load timeout - took too long to load');\n            reject(new Error('Audio load timeout - took too long to load'));\n          }, 10000);\n          const clearTimeoutHandler = () => {\n            clearTimeout(timeoutId);\n          };\n          audioElement.addEventListener('canplaythrough', clearTimeoutHandler, {\n            once: true\n          });\n          audioElement.addEventListener('error', clearTimeoutHandler, {\n            once: true\n          });\n        });\n        audioElement.src = audioUrl;\n        audioElement.load();\n        await audioLoadPromise;\n        audioDurationRef.current = audioElement.duration;\n        setDebug(`Audio duration: ${audioDurationRef.current.toFixed(2)} seconds`);\n        const audioSource = audioContext.createMediaElementSource(audioElement);\n        audioSourceRef.current = audioSource;\n        const audioDestination = audioContext.createMediaStreamDestination();\n        const gainNode = audioContext.createGain();\n        gainNode.gain.value = 1.0;\n        audioSource.connect(gainNode);\n        gainNode.connect(audioDestination);\n        const audioTracks = audioDestination.stream.getAudioTracks();\n        if (audioTracks.length === 0) {\n          setDebug('Warning: No audio tracks found in audio stream');\n        } else {\n          setDebug(`Audio stream created with ${audioTracks.length} audio tracks`);\n          audioTracks.forEach((track, index) => {\n            console.log(`Audio track ${index}:`, track.label, track.enabled, track.readyState);\n          });\n        }\n        const combinedStream = new MediaStream([...videoTracks, ...audioTracks]);\n        if (combinedStream.getTracks().length === 0) {\n          throw new Error(\"Combined stream has no tracks\");\n        }\n        setDebug(`Combined stream created with ${combinedStream.getTracks().length} total tracks`);\n        const selectedMimeType = EXPORT_FORMATS[selectedFormat].mimeType;\n        if (!MediaRecorder.isTypeSupported(selectedMimeType)) {\n          throw new Error(`Selected format ${EXPORT_FORMATS[selectedFormat].label} is not supported by your browser`);\n        }\n        const options = {\n          mimeType: selectedMimeType,\n          videoBitsPerSecond: QUALITY_PRESETS[selectedQuality].videoBitrate,\n          audioBitsPerSecond: QUALITY_PRESETS[selectedQuality].audioBitrate\n        };\n        try {\n          const mediaRecorder = new MediaRecorder(combinedStream, options);\n          mediaRecorderRef.current = mediaRecorder;\n          console.log('MediaRecorder created:', mediaRecorder.mimeType, mediaRecorder.state);\n          setDebug(`MediaRecorder created with mime type: ${mediaRecorder.mimeType}, video bitrate: ${QUALITY_PRESETS[selectedQuality].videoBitrate / 1000000}Mbps`);\n          mediaRecorder.addEventListener('start', () => {\n            console.log('MediaRecorder started');\n            setDebug('Recording started at high quality');\n          });\n          mediaRecorder.addEventListener('error', event => {\n            console.error('MediaRecorder error:', event);\n            setDebug(`MediaRecorder error: ${event.error || 'Unknown error'}`);\n          });\n          mediaRecorder.ondataavailable = event => {\n            console.log('Data available event, size:', event.data.size);\n            if (event.data && event.data.size > 0) {\n              chunksRef.current.push(event.data);\n              setDebug(`Received data chunk: ${(event.data.size / 1024).toFixed(2)} KB, total chunks: ${chunksRef.current.length}`);\n            } else {\n              console.warn('Received empty data chunk');\n              setDebug('Warning: Received empty data chunk');\n            }\n          };\n          mediaRecorder.onstop = () => {\n            console.log('MediaRecorder stopped, chunks:', chunksRef.current.length);\n            setDebug(`Recording stopped with ${chunksRef.current.length} chunks`);\n            if (chunksRef.current.length === 0) {\n              setDebug('Error: No data chunks were recorded');\n              alert('Error: No video data was captured during recording. This may be due to browser compatibility issues. Try using Chrome or Edge.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n            const totalSize = chunksRef.current.reduce((size, chunk) => size + chunk.size, 0);\n            setDebug(`Total data size: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);\n            if (totalSize === 0) {\n              setDebug('Error: Recorded data has zero size');\n              alert('Error: The recorded video has no data (0 bytes). Try using a different browser or visualization.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n            try {\n              const blob = new Blob(chunksRef.current, {\n                type: selectedMimeType\n              });\n              console.log('Created blob, size:', blob.size);\n              setDebug(`Created video blob: ${(blob.size / 1024 / 1024).toFixed(2)} MB`);\n              if (blob.size === 0) {\n                setDebug('Error: Final blob has zero size');\n                alert('Error: The final video file has no data (0 bytes). Try using a different browser.');\n                setIsExporting(false);\n                cleanupResources();\n                return;\n              }\n              const url = URL.createObjectURL(blob);\n              let fileName = \"visualization.\" + EXPORT_FORMATS[selectedFormat].extension;\n              if (audioFile && audioFile.name) {\n                fileName = audioFile.name.replace(/\\.[^/.]+$/, \"\") + \"_visualization.\" + EXPORT_FORMATS[selectedFormat].extension;\n              } else if (audioFile && audioFile.path) {\n                const pathParts = audioFile.path.split('/');\n                const pathFileName = pathParts[pathParts.length - 1];\n                fileName = pathFileName.replace(/\\.[^/.]+$/, \"\") + \"_visualization.\" + EXPORT_FORMATS[selectedFormat].extension;\n              }\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = fileName;\n              a.click();\n              URL.revokeObjectURL(url);\n              setIsExporting(false);\n              setProgress(100);\n              setDebug('Export completed successfully');\n              cleanupResources();\n            } catch (blobError) {\n              console.error('Error creating blob:', blobError);\n              setDebug(`Error creating video file: ${blobError.message}`);\n              alert(`Error creating video file: ${blobError.message}`);\n              setIsExporting(false);\n              cleanupResources();\n            }\n          };\n          mediaRecorder.start(100);\n          setDebug('MediaRecorder started with 100ms timeslice for high quality');\n          try {\n            await audioElement.play();\n            setDebug('Silent audio playback started for timing');\n            if (canvas) {\n              const ctx = canvas.getContext('2d');\n              ctx.fillStyle = 'rgba(0,0,0,0.01)';\n              ctx.fillRect(0, 0, 1, 1);\n            }\n          } catch (playError) {\n            console.error('Error playing audio:', playError);\n            setDebug(`Failed to play audio: ${playError.message || 'Unknown error'}`);\n            throw new Error(`Failed to play audio: ${playError.message}`);\n          }\n          dataRequestIntervalRef.current = setInterval(() => {\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              mediaRecorderRef.current.requestData();\n              if (canvas) {\n                try {\n                  const ctx = canvas.getContext('2d');\n                  ctx.fillStyle = 'rgba(0,0,0,0.01)';\n                  ctx.fillRect(0, 0, 1, 1);\n                } catch (e) {\n                  console.error('Error keeping canvas active:', e);\n                }\n              }\n            }\n          }, 1000);\n          progressIntervalRef.current = setInterval(() => {\n            if (audioDurationRef.current) {\n              const elapsed = (Date.now() - startTimeRef.current) / 1000;\n              const percentage = Math.min(Math.floor(elapsed / audioDurationRef.current * 100), 99);\n              setProgress(percentage);\n              setDebug(`Progress: ${percentage}%, Chunks: ${chunksRef.current.length}, Duration: ${elapsed.toFixed(1)}s/${audioDurationRef.current.toFixed(1)}s`);\n              if (elapsed > 3 && chunksRef.current.length === 0) {\n                setDebug('Warning: No data chunks received after 3 seconds');\n              }\n            }\n          }, 500);\n          audioElement.onended = () => {\n            setDebug('Audio playback ended, stopping recording');\n            if (dataRequestIntervalRef.current) {\n              clearInterval(dataRequestIntervalRef.current);\n              dataRequestIntervalRef.current = null;\n            }\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              mediaRecorderRef.current.requestData();\n              setTimeout(() => {\n                try {\n                  mediaRecorderRef.current.stop();\n                } catch (stopError) {\n                  console.error('Error stopping MediaRecorder:', stopError);\n                  setDebug(`Error stopping recording: ${stopError.message}`);\n                  setIsExporting(false);\n                  cleanupResources();\n                }\n              }, 500);\n            }\n          };\n        } catch (recorderError) {\n          console.error('Error creating MediaRecorder:', recorderError);\n          setDebug(`Failed to create MediaRecorder: ${recorderError.message}`);\n          throw new Error(`Failed to create MediaRecorder: ${recorderError.message}. Try using a different browser.`);\n        }\n      } catch (audioError) {\n        console.error('Error setting up audio:', audioError);\n        setDebug(`Audio setup error: ${audioError.message}`);\n        throw new Error(`Failed to set up audio: ${audioError.message}`);\n      }\n    } catch (error) {\n      console.error(\"Error exporting video:\", error);\n      setDebug(`Export error: ${error.message || 'Unknown error'}`);\n      if (retryCount < MAX_RETRIES) {\n        setDebug(`Retrying export (attempt ${retryCount + 1} of ${MAX_RETRIES})...`);\n        await retryExport(exportVideo);\n      } else {\n        alert(`Error exporting video: ${error.message}`);\n        setIsExporting(false);\n        cleanupResources();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-exporter\",\n    children: isExporting ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-text\",\n        children: [progress, \"% Exporting...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        children: debug\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedQuality,\n        onChange: e => setSelectedQuality(e.target.value),\n        className: \"quality-select\",\n        children: Object.entries(QUALITY_PRESETS).map(([key, preset]) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: preset.label\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedFormat,\n        onChange: e => setSelectedFormat(e.target.value),\n        className: \"format-select\",\n        disabled: supportedFormats.length <= 1,\n        children: Object.entries(EXPORT_FORMATS).filter(([key]) => supportedFormats.includes(key)).map(([key, format]) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: format.label\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"export-button\",\n        onClick: exportVideo,\n        disabled: !visualizerRef || !audioFile || isPlaying || supportedFormats.length === 0,\n        children: \"Export Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 702,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoExporter, \"k6O9tR91WAUoOvX0I9xeL0Kj0Lw=\");\n_c = VideoExporter;\nexport default VideoExporter;\nvar _c;\n$RefreshReg$(_c, \"VideoExporter\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","QUALITY_PRESETS","high","videoBitrate","audioBitrate","frameRate","label","medium","low","EXPORT_FORMATS","webm","mimeType","extension","fallback","mp4","MAX_RETRIES","VideoExporter","visualizerRef","audioFile","isPlaying","_s","isExporting","setIsExporting","progress","setProgress","debug","setDebug","selectedQuality","setSelectedQuality","selectedFormat","setSelectedFormat","retryCount","setRetryCount","supportedFormats","setSupportedFormats","mediaRecorderRef","chunksRef","startTimeRef","audioDurationRef","progressIntervalRef","dataRequestIntervalRef","audioContextRef","audioSourceRef","audioElementRef","originalAudioRef","originalIsPlayingRef","checkSupportedFormats","supported","Object","entries","filter","_","format","MediaRecorder","isTypeSupported","map","key","join","includes","fallbackFormat","length","cleanupResources","audioElements","document","querySelectorAll","current","console","log","play","catch","e","error","clearInterval","disconnect","pause","oncanplaythrough","onerror","onended","removeAttribute","load","state","close","stop","validateAudioFile","path","ensureVisualizerActive","canvas","getCanvas","ctx","getContext","imageData","getImageData","width","height","putImageData","message","getCanvasResolution","activateVisualizerWithOriginalAudio","playButtons","playButton","button","textContent","className","title","click","Promise","resolve","setTimeout","retryExport","exportFunction","maxRetries","i","exportVideo","alert","Date","now","visualizerActivated","Error","resolution","stream","captureStream","mozCaptureStream","webkitCaptureStream","videoTracks","getVideoTracks","forEach","track","index","enabled","readyState","applyConstraints","ideal","AudioContext","window","webkitAudioContext","audioContext","sampleRate","timestamp","getTime","encodedPath","encodeURI","audioUrl","audioElement","Audio","crossOrigin","preload","volume","errorDetail","target","code","audioLoadPromise","reject","duration","timeoutId","clearTimeoutHandler","clearTimeout","addEventListener","once","src","toFixed","audioSource","createMediaElementSource","audioDestination","createMediaStreamDestination","gainNode","createGain","gain","value","connect","audioTracks","getAudioTracks","combinedStream","MediaStream","getTracks","selectedMimeType","options","videoBitsPerSecond","audioBitsPerSecond","mediaRecorder","event","ondataavailable","data","size","push","warn","onstop","totalSize","reduce","chunk","blob","Blob","type","url","URL","createObjectURL","fileName","name","replace","pathParts","split","pathFileName","a","createElement","href","download","revokeObjectURL","blobError","start","fillStyle","fillRect","playError","setInterval","requestData","elapsed","percentage","Math","min","floor","stopError","recorderError","audioError","children","style","_jsxFileName","lineNumber","columnNumber","onChange","preset","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/VideoExporter.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport './VideoExporter.css';\n\n// Quality presets for different export options\nconst QUALITY_PRESETS = {\n  high: {\n    videoBitrate: 8000000,\n    audioBitrate: 320000,\n    frameRate: 60,\n    label: 'High Quality'\n  },\n  medium: {\n    videoBitrate: 4000000,\n    audioBitrate: 192000,\n    frameRate: 30,\n    label: 'Medium Quality'\n  },\n  low: {\n    videoBitrate: 2000000,\n    audioBitrate: 128000,\n    frameRate: 30,\n    label: 'Low Quality'\n  }\n};\n\n// Export format options with MIME type checks\nconst EXPORT_FORMATS = {\n  webm: {\n    mimeType: 'video/webm;codecs=vp9,opus',\n    extension: 'webm',\n    label: 'WebM (VP9)',\n    fallback: null\n  },\n  mp4: {\n    mimeType: 'video/mp4;codecs=h264,aac',\n    extension: 'mp4',\n    label: 'MP4 (H.264)',\n    fallback: 'webm'\n  }\n};\n\n// Maximum number of retries for failed exports\nconst MAX_RETRIES = 3;\n\nconst VideoExporter = ({ visualizerRef, audioFile, isPlaying }) => {\n  const [isExporting, setIsExporting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [debug, setDebug] = useState('');\n  const [selectedQuality, setSelectedQuality] = useState('high');\n  const [selectedFormat, setSelectedFormat] = useState('webm');\n  const [retryCount, setRetryCount] = useState(0);\n  const [supportedFormats, setSupportedFormats] = useState([]);\n  \n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startTimeRef = useRef(null);\n  const audioDurationRef = useRef(null);\n  const progressIntervalRef = useRef(null);\n  const dataRequestIntervalRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioSourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n  const originalAudioRef = useRef(null);\n  const originalIsPlayingRef = useRef(false);\n  \n  // Check supported formats on component mount\n  useEffect(() => {\n    const checkSupportedFormats = () => {\n      const supported = Object.entries(EXPORT_FORMATS)\n        .filter(([_, format]) => MediaRecorder.isTypeSupported(format.mimeType))\n        .map(([key]) => key);\n      \n      setSupportedFormats(supported);\n      setDebug(`Supported formats: ${supported.join(', ')}`);\n      \n      // If current format is not supported, switch to a supported one\n      if (!supported.includes(selectedFormat)) {\n        const fallbackFormat = EXPORT_FORMATS[selectedFormat].fallback;\n        if (fallbackFormat && supported.includes(fallbackFormat)) {\n          setSelectedFormat(fallbackFormat);\n          setDebug(`Switched to fallback format: ${fallbackFormat}`);\n        } else if (supported.length > 0) {\n          setSelectedFormat(supported[0]);\n          setDebug(`Switched to first supported format: ${supported[0]}`);\n        }\n      }\n    };\n\n    checkSupportedFormats();\n  }, []);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      cleanupResources();\n    };\n  }, []);\n\n  // Store the original audio element and isPlaying state\n  useEffect(() => {\n    const audioElements = document.querySelectorAll('audio');\n    if (audioElements.length > 0) {\n      originalAudioRef.current = audioElements[0];\n      console.log('Found original audio element:', originalAudioRef.current);\n    }\n    originalIsPlayingRef.current = isPlaying;\n  }, [isPlaying]);\n\n  // Clean up resources function\n  const cleanupResources = () => {\n    if (originalIsPlayingRef.current && originalAudioRef.current) {\n      try {\n        originalAudioRef.current.play().catch(e => {\n          console.error('Error resuming original audio:', e);\n        });\n      } catch (e) {\n        console.error('Error resuming original audio:', e);\n      }\n    }\n    \n    if (progressIntervalRef.current) {\n      clearInterval(progressIntervalRef.current);\n      progressIntervalRef.current = null;\n    }\n    \n    if (dataRequestIntervalRef.current) {\n      clearInterval(dataRequestIntervalRef.current);\n      dataRequestIntervalRef.current = null;\n    }\n    \n    if (audioSourceRef.current) {\n      try {\n        audioSourceRef.current.disconnect();\n      } catch (e) {\n        console.error('Error disconnecting audio source:', e);\n      }\n      audioSourceRef.current = null;\n    }\n    \n    if (audioElementRef.current) {\n      try {\n        audioElementRef.current.pause();\n        audioElementRef.current.oncanplaythrough = null;\n        audioElementRef.current.onerror = null;\n        audioElementRef.current.onended = null;\n        audioElementRef.current.removeAttribute('src');\n        audioElementRef.current.load();\n      } catch (e) {\n        console.error('Error cleaning up audio element:', e);\n      }\n      audioElementRef.current = null;\n    }\n    \n    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n      try {\n        audioContextRef.current.close().catch(e => console.error('Error closing audio context:', e));\n      } catch (e) {\n        console.error('Error closing audio context:', e);\n      }\n      audioContextRef.current = null;\n    }\n    \n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      try {\n        mediaRecorderRef.current.stop();\n      } catch (e) {\n        console.error('Error stopping media recorder:', e);\n      }\n      mediaRecorderRef.current = null;\n    }\n    \n    chunksRef.current = [];\n  };\n\n  // Validate audio file\n  const validateAudioFile = () => {\n    if (!audioFile) {\n      setDebug('Error: No audio file selected');\n      return false;\n    }\n    \n    if (!audioFile.path) {\n      setDebug('Error: Audio file has no path');\n      return false;\n    }\n    \n    return true;\n  };\n\n  // Ensure visualizer is active\n  const ensureVisualizerActive = () => {\n    if (!visualizerRef?.current) {\n      setDebug('Error: Visualizer reference not available');\n      return false;\n    }\n    \n    const canvas = visualizerRef.current.getCanvas();\n    if (!canvas) {\n      setDebug('Error: Canvas not found in visualizer');\n      return false;\n    }\n    \n    try {\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(imageData, 0, 0);\n      return true;\n    } catch (e) {\n      setDebug(`Error activating visualizer: ${e.message}`);\n      return false;\n    }\n  };\n\n  // Get canvas resolution\n  const getCanvasResolution = (canvas) => {\n    if (!canvas) return { width: 0, height: 0 };\n    \n    const width = canvas.width;\n    const height = canvas.height;\n    \n    console.log(`Canvas resolution: ${width}x${height}`);\n    setDebug(`Canvas resolution: ${width}x${height}`);\n    \n    return { width, height };\n  };\n\n  // Activate visualizer with original audio\n  const activateVisualizerWithOriginalAudio = async () => {\n    try {\n      const playButtons = document.querySelectorAll('button');\n      let playButton = null;\n      \n      for (const button of playButtons) {\n        if (button.textContent.includes('Play') || \n            button.className.includes('play') || \n            button.title.includes('Play')) {\n          playButton = button;\n          break;\n        }\n      }\n      \n      originalIsPlayingRef.current = isPlaying;\n      \n      if (playButton && !isPlaying) {\n        setDebug('Clicking play button to activate visualizer');\n        playButton.click();\n        \n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        if (originalAudioRef.current) {\n          originalAudioRef.current.pause();\n          setDebug('Paused original audio to avoid duplication');\n        } else if (playButton) {\n          playButton.click();\n          setDebug('Clicked play button again to pause audio');\n        }\n        \n        return true;\n      } else {\n        setDebug('Audio is already playing or play button not found');\n        return isPlaying;\n      }\n    } catch (e) {\n      setDebug(`Error activating visualizer: ${e.message}`);\n      return false;\n    }\n  };\n\n  // Retry mechanism for failed exports\n  const retryExport = async (exportFunction, maxRetries = MAX_RETRIES) => {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        setRetryCount(i + 1);\n        setDebug(`Attempt ${i + 1} of ${maxRetries}`);\n        await exportFunction();\n        return;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        setDebug(`Export failed, retrying in ${i + 1} seconds...`);\n        await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));\n      }\n    }\n  };\n\n  const exportVideo = async () => {\n    if (!visualizerRef?.current || !audioFile) {\n      alert(\"Please upload an audio file first\");\n      return;\n    }\n    \n    if (!validateAudioFile()) {\n      alert(\"Invalid audio file. Please upload a valid audio file.\");\n      return;\n    }\n    \n    if (isExporting) {\n      console.log('Already exporting, ignoring request');\n      return;\n    }\n\n    try {\n      cleanupResources();\n      \n      setIsExporting(true);\n      setProgress(0);\n      setDebug('Starting export process...');\n      startTimeRef.current = Date.now();\n      \n      setDebug('Activating visualizer with original audio...');\n      const visualizerActivated = await activateVisualizerWithOriginalAudio();\n      \n      if (!visualizerActivated) {\n        setDebug('Warning: Could not activate visualizer with original audio');\n      }\n      \n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      if (!ensureVisualizerActive()) {\n        throw new Error(\"Could not activate visualizer\");\n      }\n      \n      const canvas = visualizerRef.current.getCanvas();\n      if (!canvas) {\n        throw new Error(\"Canvas element not found\");\n      }\n      \n      const resolution = getCanvasResolution(canvas);\n      setDebug(`Canvas found, dimensions: ${resolution.width}x${resolution.height}`);\n      \n      if (resolution.width < 720 || resolution.height < 720) {\n        setDebug(`Warning: Canvas resolution (${resolution.width}x${resolution.height}) is low. Consider using a higher resolution for better quality.`);\n      }\n\n      let stream = null;\n      \n      // Try different stream capture methods\n      try {\n        stream = canvas.captureStream(QUALITY_PRESETS[selectedQuality].frameRate);\n        setDebug(`Canvas stream created with ${QUALITY_PRESETS[selectedQuality].frameRate}fps`);\n      } catch (e) {\n        console.error('Standard captureStream failed:', e);\n        setDebug('Standard captureStream failed, trying alternatives...');\n      }\n      \n      if (!stream) {\n        try {\n          stream = canvas.mozCaptureStream && canvas.mozCaptureStream(QUALITY_PRESETS[selectedQuality].frameRate);\n          if (stream) {\n            setDebug(`Canvas stream created with mozCaptureStream at ${QUALITY_PRESETS[selectedQuality].frameRate}fps`);\n          }\n        } catch (e) {\n          console.error('mozCaptureStream failed:', e);\n          setDebug('mozCaptureStream failed, trying alternatives...');\n        }\n      }\n      \n      if (!stream) {\n        try {\n          stream = canvas.webkitCaptureStream && canvas.webkitCaptureStream(QUALITY_PRESETS[selectedQuality].frameRate);\n          if (stream) {\n            setDebug(`Canvas stream created with webkitCaptureStream at ${QUALITY_PRESETS[selectedQuality].frameRate}fps`);\n          }\n        } catch (e) {\n          console.error('webkitCaptureStream failed:', e);\n          setDebug('webkitCaptureStream failed');\n        }\n      }\n\n      if (!stream) {\n        throw new Error(\"Your browser doesn't support canvas streaming. Try using a different browser like Chrome.\");\n      }\n\n      const videoTracks = stream.getVideoTracks();\n      if (videoTracks.length === 0) {\n        throw new Error(\"No video tracks found in canvas stream\");\n      }\n      setDebug(`Stream created with ${videoTracks.length} video tracks`);\n      \n      videoTracks.forEach((track, index) => {\n        console.log(`Video track ${index}:`, track.label, track.enabled, track.readyState);\n        \n        try {\n          if (track.applyConstraints) {\n            track.applyConstraints({\n              width: { ideal: resolution.width },\n              height: { ideal: resolution.height },\n              frameRate: { ideal: QUALITY_PRESETS[selectedQuality].frameRate }\n            });\n            console.log(`Applied constraints to video track ${index}`);\n          }\n        } catch (e) {\n          console.error('Could not apply constraints to video track:', e);\n        }\n      });\n\n      try {\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        const audioContext = new AudioContext({ sampleRate: 48000 });\n        audioContextRef.current = audioContext;\n        \n        const timestamp = new Date().getTime();\n        const encodedPath = encodeURI(audioFile.path);\n        const audioUrl = `http://localhost:5001${encodedPath}?t=${timestamp}`;\n        \n        console.log('Audio URL:', audioUrl);\n        setDebug(`Using audio URL: ${audioUrl}`);\n        \n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n        audioElement.volume = 0;\n        audioElementRef.current = audioElement;\n        \n        audioElement.onerror = (e) => {\n          const errorDetail = e.target.error \n            ? `${e.target.error.message || ''} (code: ${e.target.error.code})` \n            : 'Unknown error';\n          console.error('Audio error:', e.target.error);\n          setDebug(`Audio error: ${errorDetail}`);\n          throw new Error(`Audio error: ${errorDetail}`);\n        };\n        \n        setDebug('Loading audio...');\n        \n        const audioLoadPromise = new Promise((resolve, reject) => {\n          audioElement.oncanplaythrough = () => {\n            console.log('Audio loaded successfully, duration:', audioElement.duration);\n            setDebug('Audio loaded successfully');\n            resolve();\n          };\n          \n          audioElement.onerror = (e) => {\n            const errorDetail = e.target.error \n              ? `${e.target.error.message || ''} (code: ${e.target.error.code})` \n              : 'Unknown error';\n            console.error('Audio load error:', e.target.error);\n            setDebug(`Audio load error: ${errorDetail}`);\n            reject(new Error(`Audio load error: ${errorDetail}`));\n          };\n          \n          const timeoutId = setTimeout(() => {\n            audioElement.oncanplaythrough = null;\n            audioElement.onerror = null;\n            setDebug('Audio load timeout - took too long to load');\n            reject(new Error('Audio load timeout - took too long to load'));\n          }, 10000);\n          \n          const clearTimeoutHandler = () => {\n            clearTimeout(timeoutId);\n          };\n          \n          audioElement.addEventListener('canplaythrough', clearTimeoutHandler, { once: true });\n          audioElement.addEventListener('error', clearTimeoutHandler, { once: true });\n        });\n        \n        audioElement.src = audioUrl;\n        audioElement.load();\n        \n        await audioLoadPromise;\n        \n        audioDurationRef.current = audioElement.duration;\n        setDebug(`Audio duration: ${audioDurationRef.current.toFixed(2)} seconds`);\n        \n        const audioSource = audioContext.createMediaElementSource(audioElement);\n        audioSourceRef.current = audioSource;\n        \n        const audioDestination = audioContext.createMediaStreamDestination();\n        \n        const gainNode = audioContext.createGain();\n        gainNode.gain.value = 1.0;\n        \n        audioSource.connect(gainNode);\n        gainNode.connect(audioDestination);\n        \n        const audioTracks = audioDestination.stream.getAudioTracks();\n        if (audioTracks.length === 0) {\n          setDebug('Warning: No audio tracks found in audio stream');\n        } else {\n          setDebug(`Audio stream created with ${audioTracks.length} audio tracks`);\n          \n          audioTracks.forEach((track, index) => {\n            console.log(`Audio track ${index}:`, track.label, track.enabled, track.readyState);\n          });\n        }\n\n        const combinedStream = new MediaStream([\n          ...videoTracks,\n          ...audioTracks\n        ]);\n\n        if (combinedStream.getTracks().length === 0) {\n          throw new Error(\"Combined stream has no tracks\");\n        }\n        setDebug(`Combined stream created with ${combinedStream.getTracks().length} total tracks`);\n\n        const selectedMimeType = EXPORT_FORMATS[selectedFormat].mimeType;\n        if (!MediaRecorder.isTypeSupported(selectedMimeType)) {\n          throw new Error(`Selected format ${EXPORT_FORMATS[selectedFormat].label} is not supported by your browser`);\n        }\n        \n        const options = {\n          mimeType: selectedMimeType,\n          videoBitsPerSecond: QUALITY_PRESETS[selectedQuality].videoBitrate,\n          audioBitsPerSecond: QUALITY_PRESETS[selectedQuality].audioBitrate\n        };\n          \n        try {\n          const mediaRecorder = new MediaRecorder(combinedStream, options);\n          mediaRecorderRef.current = mediaRecorder;\n          \n          console.log('MediaRecorder created:', mediaRecorder.mimeType, mediaRecorder.state);\n          setDebug(`MediaRecorder created with mime type: ${mediaRecorder.mimeType}, video bitrate: ${QUALITY_PRESETS[selectedQuality].videoBitrate/1000000}Mbps`);\n          \n          mediaRecorder.addEventListener('start', () => {\n            console.log('MediaRecorder started');\n            setDebug('Recording started at high quality');\n          });\n\n          mediaRecorder.addEventListener('error', (event) => {\n            console.error('MediaRecorder error:', event);\n            setDebug(`MediaRecorder error: ${event.error || 'Unknown error'}`);\n          });\n\n          mediaRecorder.ondataavailable = (event) => {\n            console.log('Data available event, size:', event.data.size);\n            if (event.data && event.data.size > 0) {\n              chunksRef.current.push(event.data);\n              setDebug(`Received data chunk: ${(event.data.size / 1024).toFixed(2)} KB, total chunks: ${chunksRef.current.length}`);\n            } else {\n              console.warn('Received empty data chunk');\n              setDebug('Warning: Received empty data chunk');\n            }\n          };\n\n          mediaRecorder.onstop = () => {\n            console.log('MediaRecorder stopped, chunks:', chunksRef.current.length);\n            setDebug(`Recording stopped with ${chunksRef.current.length} chunks`);\n            \n            if (chunksRef.current.length === 0) {\n              setDebug('Error: No data chunks were recorded');\n              alert('Error: No video data was captured during recording. This may be due to browser compatibility issues. Try using Chrome or Edge.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n            \n            const totalSize = chunksRef.current.reduce((size, chunk) => size + chunk.size, 0);\n            setDebug(`Total data size: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);\n            \n            if (totalSize === 0) {\n              setDebug('Error: Recorded data has zero size');\n              alert('Error: The recorded video has no data (0 bytes). Try using a different browser or visualization.');\n              setIsExporting(false);\n              cleanupResources();\n              return;\n            }\n\n            try {\n              const blob = new Blob(chunksRef.current, { type: selectedMimeType });\n              console.log('Created blob, size:', blob.size);\n              setDebug(`Created video blob: ${(blob.size / 1024 / 1024).toFixed(2)} MB`);\n              \n              if (blob.size === 0) {\n                setDebug('Error: Final blob has zero size');\n                alert('Error: The final video file has no data (0 bytes). Try using a different browser.');\n                setIsExporting(false);\n                cleanupResources();\n                return;\n              }\n              \n              const url = URL.createObjectURL(blob);\n              \n              let fileName = \"visualization.\" + EXPORT_FORMATS[selectedFormat].extension;\n              if (audioFile && audioFile.name) {\n                fileName = audioFile.name.replace(/\\.[^/.]+$/, \"\") + \"_visualization.\" + EXPORT_FORMATS[selectedFormat].extension;\n              } else if (audioFile && audioFile.path) {\n                const pathParts = audioFile.path.split('/');\n                const pathFileName = pathParts[pathParts.length - 1];\n                fileName = pathFileName.replace(/\\.[^/.]+$/, \"\") + \"_visualization.\" + EXPORT_FORMATS[selectedFormat].extension;\n              }\n              \n              const a = document.createElement('a');\n              a.href = url;\n              a.download = fileName;\n              a.click();\n              \n              URL.revokeObjectURL(url);\n              setIsExporting(false);\n              setProgress(100);\n              setDebug('Export completed successfully');\n              \n              cleanupResources();\n            } catch (blobError) {\n              console.error('Error creating blob:', blobError);\n              setDebug(`Error creating video file: ${blobError.message}`);\n              alert(`Error creating video file: ${blobError.message}`);\n              setIsExporting(false);\n              cleanupResources();\n            }\n          };\n\n          mediaRecorder.start(100);\n          setDebug('MediaRecorder started with 100ms timeslice for high quality');\n\n          try {\n            await audioElement.play();\n            setDebug('Silent audio playback started for timing');\n            \n            if (canvas) {\n              const ctx = canvas.getContext('2d');\n              ctx.fillStyle = 'rgba(0,0,0,0.01)';\n              ctx.fillRect(0, 0, 1, 1);\n            }\n            \n          } catch (playError) {\n            console.error('Error playing audio:', playError);\n            setDebug(`Failed to play audio: ${playError.message || 'Unknown error'}`);\n            throw new Error(`Failed to play audio: ${playError.message}`);\n          }\n\n          dataRequestIntervalRef.current = setInterval(() => {\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              mediaRecorderRef.current.requestData();\n              \n              if (canvas) {\n                try {\n                  const ctx = canvas.getContext('2d');\n                  ctx.fillStyle = 'rgba(0,0,0,0.01)';\n                  ctx.fillRect(0, 0, 1, 1);\n                } catch (e) {\n                  console.error('Error keeping canvas active:', e);\n                }\n              }\n            }\n          }, 1000);\n\n          progressIntervalRef.current = setInterval(() => {\n            if (audioDurationRef.current) {\n              const elapsed = (Date.now() - startTimeRef.current) / 1000;\n              const percentage = Math.min(Math.floor((elapsed / audioDurationRef.current) * 100), 99);\n              setProgress(percentage);\n              \n              setDebug(`Progress: ${percentage}%, Chunks: ${chunksRef.current.length}, Duration: ${elapsed.toFixed(1)}s/${audioDurationRef.current.toFixed(1)}s`);\n              \n              if (elapsed > 3 && chunksRef.current.length === 0) {\n                setDebug('Warning: No data chunks received after 3 seconds');\n              }\n            }\n          }, 500);\n\n          audioElement.onended = () => {\n            setDebug('Audio playback ended, stopping recording');\n            \n            if (dataRequestIntervalRef.current) {\n              clearInterval(dataRequestIntervalRef.current);\n              dataRequestIntervalRef.current = null;\n            }\n            \n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n              mediaRecorderRef.current.requestData();\n              \n              setTimeout(() => {\n                try {\n                  mediaRecorderRef.current.stop();\n                } catch (stopError) {\n                  console.error('Error stopping MediaRecorder:', stopError);\n                  setDebug(`Error stopping recording: ${stopError.message}`);\n                  setIsExporting(false);\n                  cleanupResources();\n                }\n              }, 500);\n            }\n          };\n          \n        } catch (recorderError) {\n          console.error('Error creating MediaRecorder:', recorderError);\n          setDebug(`Failed to create MediaRecorder: ${recorderError.message}`);\n          throw new Error(`Failed to create MediaRecorder: ${recorderError.message}. Try using a different browser.`);\n        }\n      } catch (audioError) {\n        console.error('Error setting up audio:', audioError);\n        setDebug(`Audio setup error: ${audioError.message}`);\n        throw new Error(`Failed to set up audio: ${audioError.message}`);\n      }\n\n    } catch (error) {\n      console.error(\"Error exporting video:\", error);\n      setDebug(`Export error: ${error.message || 'Unknown error'}`);\n      \n      if (retryCount < MAX_RETRIES) {\n        setDebug(`Retrying export (attempt ${retryCount + 1} of ${MAX_RETRIES})...`);\n        await retryExport(exportVideo);\n      } else {\n        alert(`Error exporting video: ${error.message}`);\n        setIsExporting(false);\n        cleanupResources();\n      }\n    }\n  };\n\n  return (\n    <div className=\"video-exporter\">\n      {isExporting ? (\n        <div className=\"export-progress\">\n          <div className=\"progress-bar\">\n            <div className=\"progress-fill\" style={{ width: `${progress}%` }}></div>\n          </div>\n          <div className=\"progress-text\">{progress}% Exporting...</div>\n          <div className=\"debug-info\">{debug}</div>\n        </div>\n      ) : (\n        <div className=\"export-controls\">\n          <select \n            value={selectedQuality} \n            onChange={(e) => setSelectedQuality(e.target.value)}\n            className=\"quality-select\"\n          >\n            {Object.entries(QUALITY_PRESETS).map(([key, preset]) => (\n              <option key={key} value={key}>{preset.label}</option>\n            ))}\n          </select>\n          <select \n            value={selectedFormat} \n            onChange={(e) => setSelectedFormat(e.target.value)}\n            className=\"format-select\"\n            disabled={supportedFormats.length <= 1}\n          >\n            {Object.entries(EXPORT_FORMATS)\n              .filter(([key]) => supportedFormats.includes(key))\n              .map(([key, format]) => (\n                <option key={key} value={key}>{format.label}</option>\n              ))}\n          </select>\n          <button\n            className=\"export-button\"\n            onClick={exportVideo}\n            disabled={!visualizerRef || !audioFile || isPlaying || supportedFormats.length === 0}\n          >\n            Export Video\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default VideoExporter; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}