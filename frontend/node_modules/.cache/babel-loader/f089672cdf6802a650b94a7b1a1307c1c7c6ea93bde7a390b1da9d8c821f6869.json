{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\ThreeVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeVisualizer = ({\n  audioData,\n  template,\n  isPlaying\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const particlesRef = useRef(null);\n  const waveformRef = useRef(null);\n  const timeRef = useRef(0);\n  const controlsRef = useRef(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  console.log(\"ThreeVisualizer rendering with template:\", template);\n  console.log(\"Audio data:\", audioData);\n  console.log(\"Is playing:\", isPlaying);\n\n  // Initialize Three.js scene\n  useEffect(() => {\n    if (!mountRef.current) return;\n    console.log(\"Initializing Three.js scene\");\n    try {\n      // Create scene\n      const scene = new THREE.Scene();\n      sceneRef.current = scene;\n\n      // Create camera\n      const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n      camera.position.z = 5;\n      cameraRef.current = camera;\n\n      // Create renderer\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n      renderer.setClearColor(0x000000, 1);\n      mountRef.current.appendChild(renderer.domElement);\n      rendererRef.current = renderer;\n\n      // Add orbit controls for user interaction\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.05;\n      controls.rotateSpeed = 0.5;\n      controlsRef.current = controls;\n\n      // Add ambient light\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n\n      // Add directional light\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(0, 1, 1);\n      scene.add(directionalLight);\n\n      // Handle window resize\n      const handleResize = () => {\n        if (!mountRef.current || !cameraRef.current || !rendererRef.current) return;\n        const width = mountRef.current.clientWidth;\n        const height = mountRef.current.clientHeight;\n        cameraRef.current.aspect = width / height;\n        cameraRef.current.updateProjectionMatrix();\n        rendererRef.current.setSize(width, height);\n      };\n      window.addEventListener('resize', handleResize);\n\n      // Initial render\n      renderer.render(scene, camera);\n      setIsInitialized(true);\n      console.log(\"Three.js scene initialized successfully\");\n\n      // Clean up\n      return () => {\n        console.log(\"Cleaning up Three.js scene\");\n        window.removeEventListener('resize', handleResize);\n        if (rendererRef.current && mountRef.current) {\n          try {\n            mountRef.current.removeChild(rendererRef.current.domElement);\n          } catch (error) {\n            console.error(\"Error removing renderer:\", error);\n          }\n        }\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n        }\n\n        // Dispose of Three.js objects\n        if (particlesRef.current) {\n          try {\n            particlesRef.current.geometry.dispose();\n            particlesRef.current.material.dispose();\n            sceneRef.current.remove(particlesRef.current);\n          } catch (error) {\n            console.error(\"Error disposing particles:\", error);\n          }\n        }\n        if (waveformRef.current) {\n          try {\n            waveformRef.current.geometry.dispose();\n            waveformRef.current.material.dispose();\n            sceneRef.current.remove(waveformRef.current);\n          } catch (error) {\n            console.error(\"Error disposing waveform:\", error);\n          }\n        }\n        setIsInitialized(false);\n      };\n    } catch (error) {\n      console.error(\"Error initializing Three.js:\", error);\n    }\n  }, []);\n\n  // Create or update visualization based on template\n  useEffect(() => {\n    if (!isInitialized || !sceneRef.current) {\n      console.log(\"Scene not initialized yet, skipping visualization creation\");\n      return;\n    }\n    console.log(\"Creating visualization for template:\", template);\n    try {\n      // Clear previous visualizations\n      if (particlesRef.current) {\n        particlesRef.current.geometry.dispose();\n        particlesRef.current.material.dispose();\n        sceneRef.current.remove(particlesRef.current);\n        particlesRef.current = null;\n      }\n      if (waveformRef.current) {\n        waveformRef.current.geometry.dispose();\n        waveformRef.current.material.dispose();\n        sceneRef.current.remove(waveformRef.current);\n        waveformRef.current = null;\n      }\n\n      // Create new visualization based on template\n      switch (template) {\n        case 'particles':\n          createParticleSystem();\n          break;\n        case 'waveform':\n          createWaveform();\n          break;\n        case 'spiral':\n          createSpiral();\n          break;\n        case 'kaleidoscope':\n          createKaleidoscope();\n          break;\n        default:\n          console.log(\"Unknown template, defaulting to particles\");\n          createParticleSystem();\n      }\n      console.log(\"Visualization created successfully\");\n\n      // Start animation if playing\n      if (isPlaying) {\n        animate();\n      }\n    } catch (error) {\n      console.error(\"Error creating visualization:\", error);\n    }\n  }, [template, isInitialized]);\n\n  // Handle play/pause\n  useEffect(() => {\n    console.log(\"Play state changed:\", isPlaying);\n    if (!isInitialized) {\n      console.log(\"Scene not initialized yet, skipping animation\");\n      return;\n    }\n    if (isPlaying) {\n      console.log(\"Starting animation\");\n      animate();\n    } else if (animationFrameRef.current) {\n      console.log(\"Stopping animation\");\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isPlaying, isInitialized]);\n\n  // Create particle system visualization\n  const createParticleSystem = () => {\n    console.log(\"Creating particle system\");\n    try {\n      const particleCount = 5000;\n      const particles = new THREE.BufferGeometry();\n      const positions = new Float32Array(particleCount * 3);\n      const colors = new Float32Array(particleCount * 3);\n      const sizes = new Float32Array(particleCount);\n      const color = new THREE.Color();\n      for (let i = 0; i < particleCount; i++) {\n        // Position particles in a sphere\n        const radius = 3 + Math.random() * 2;\n        const theta = Math.random() * Math.PI * 2;\n        const phi = Math.acos(2 * Math.random() - 1);\n        positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\n        positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n        positions[i * 3 + 2] = radius * Math.cos(phi);\n\n        // Random colors\n        color.setHSL(Math.random(), 0.7, 0.5);\n        colors[i * 3] = color.r;\n        colors[i * 3 + 1] = color.g;\n        colors[i * 3 + 2] = color.b;\n\n        // Random sizes\n        sizes[i] = Math.random() * 20 + 5;\n      }\n      particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n      particles.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n\n      // Use simpler material for better compatibility\n      const particleMaterial = new THREE.PointsMaterial({\n        size: 0.1,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.8,\n        blending: THREE.AdditiveBlending\n      });\n      const particleSystem = new THREE.Points(particles, particleMaterial);\n      sceneRef.current.add(particleSystem);\n      particlesRef.current = particleSystem;\n      console.log(\"Particle system created successfully\");\n    } catch (error) {\n      console.error(\"Error creating particle system:\", error);\n    }\n  };\n\n  // Create waveform visualization\n  const createWaveform = () => {\n    console.log(\"Creating waveform\");\n    try {\n      const geometry = new THREE.BufferGeometry();\n      const vertices = new Float32Array(128 * 3);\n      const colors = new Float32Array(128 * 3);\n      for (let i = 0; i < 128; i++) {\n        const x = i / 128 * 10 - 5;\n        vertices[i * 3] = x;\n        vertices[i * 3 + 1] = 0;\n        vertices[i * 3 + 2] = 0;\n\n        // Color gradient from blue to red\n        const hue = i / 128;\n        const color = new THREE.Color().setHSL(hue, 0.8, 0.5);\n        colors[i * 3] = color.r;\n        colors[i * 3 + 1] = color.g;\n        colors[i * 3 + 2] = color.b;\n      }\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n      const material = new THREE.LineBasicMaterial({\n        vertexColors: true,\n        linewidth: 2\n      });\n      const waveform = new THREE.Line(geometry, material);\n      sceneRef.current.add(waveform);\n      waveformRef.current = waveform;\n      console.log(\"Waveform created successfully\");\n    } catch (error) {\n      console.error(\"Error creating waveform:\", error);\n    }\n  };\n\n  // Create spiral visualization\n  const createSpiral = () => {\n    console.log(\"Creating spiral\");\n    try {\n      const geometry = new THREE.BufferGeometry();\n      const vertices = new Float32Array(2000 * 3);\n      const colors = new Float32Array(2000 * 3);\n      for (let i = 0; i < 2000; i++) {\n        const t = i / 2000;\n        const angle = t * Math.PI * 20;\n        const radius = t * 5;\n        vertices[i * 3] = Math.cos(angle) * radius;\n        vertices[i * 3 + 1] = Math.sin(angle) * radius;\n        vertices[i * 3 + 2] = t * 2 - 1;\n\n        // Color gradient\n        const hue = t;\n        const color = new THREE.Color().setHSL(hue, 0.8, 0.5);\n        colors[i * 3] = color.r;\n        colors[i * 3 + 1] = color.g;\n        colors[i * 3 + 2] = color.b;\n      }\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n      const material = new THREE.PointsMaterial({\n        size: 0.1,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.8,\n        blending: THREE.AdditiveBlending\n      });\n      const spiral = new THREE.Points(geometry, material);\n      sceneRef.current.add(spiral);\n      particlesRef.current = spiral;\n      console.log(\"Spiral created successfully\");\n    } catch (error) {\n      console.error(\"Error creating spiral:\", error);\n    }\n  };\n\n  // Create kaleidoscope visualization\n  const createKaleidoscope = () => {\n    console.log(\"Creating kaleidoscope\");\n    try {\n      // Create a simpler geometry for better compatibility\n      const geometry = new THREE.IcosahedronGeometry(2, 2);\n      const material = new THREE.MeshPhongMaterial({\n        color: 0xffffff,\n        wireframe: true,\n        emissive: 0x444444,\n        specular: 0xffffff,\n        shininess: 100\n      });\n      const kaleidoscope = new THREE.Mesh(geometry, material);\n      sceneRef.current.add(kaleidoscope);\n      particlesRef.current = kaleidoscope;\n      console.log(\"Kaleidoscope created successfully\");\n    } catch (error) {\n      console.error(\"Error creating kaleidoscope:\", error);\n    }\n  };\n\n  // Animation loop\n  const animate = () => {\n    if (!sceneRef.current || !cameraRef.current || !rendererRef.current) {\n      console.log(\"Missing required refs for animation\");\n      return;\n    }\n    try {\n      animationFrameRef.current = requestAnimationFrame(animate);\n      timeRef.current += 0.01;\n\n      // Update based on template\n      if (particlesRef.current) {\n        if (template === 'particles') {\n          particlesRef.current.rotation.y += 0.002;\n          particlesRef.current.rotation.x += 0.001;\n        } else if (template === 'spiral') {\n          particlesRef.current.rotation.z += 0.005;\n        } else if (template === 'kaleidoscope') {\n          particlesRef.current.rotation.x += 0.005;\n          particlesRef.current.rotation.y += 0.01;\n\n          // Scale based on audio if available\n          if (audioData && audioData.dataArray) {\n            let avgAudio = 0;\n            for (let i = 0; i < Math.min(128, audioData.dataArray.length); i++) {\n              avgAudio += audioData.dataArray[i];\n            }\n            avgAudio = avgAudio / Math.min(128, audioData.dataArray.length) / 255;\n            particlesRef.current.scale.set(1 + avgAudio, 1 + avgAudio, 1 + avgAudio);\n          }\n        }\n      }\n\n      // Update waveform if available\n      if (waveformRef.current && audioData && audioData.dataArray) {\n        const positions = waveformRef.current.geometry.attributes.position.array;\n        for (let i = 0; i < Math.min(128, audioData.dataArray.length); i++) {\n          positions[i * 3 + 1] = audioData.dataArray[i] / 128 * 2 - 1;\n        }\n        waveformRef.current.geometry.attributes.position.needsUpdate = true;\n      }\n\n      // Update controls\n      if (controlsRef.current) {\n        controlsRef.current.update();\n      }\n\n      // Render scene\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n    } catch (error) {\n      console.error(\"Error in animation loop:\", error);\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 10\n  }, this);\n};\n_s(ThreeVisualizer, \"W4f4LKY75zhLXbeSd3VGVQv1u/w=\");\n_c = ThreeVisualizer;\nexport default ThreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"ThreeVisualizer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","OrbitControls","jsxDEV","_jsxDEV","ThreeVisualizer","audioData","template","isPlaying","_s","mountRef","sceneRef","cameraRef","rendererRef","animationFrameRef","particlesRef","waveformRef","timeRef","controlsRef","isInitialized","setIsInitialized","console","log","current","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","setClearColor","appendChild","domElement","controls","enableDamping","dampingFactor","rotateSpeed","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","set","handleResize","width","height","aspect","updateProjectionMatrix","window","addEventListener","render","removeEventListener","removeChild","error","cancelAnimationFrame","geometry","dispose","material","remove","createParticleSystem","createWaveform","createSpiral","createKaleidoscope","animate","particleCount","particles","BufferGeometry","positions","Float32Array","colors","sizes","color","Color","i","radius","Math","random","theta","PI","phi","acos","sin","cos","setHSL","r","g","b","setAttribute","BufferAttribute","particleMaterial","PointsMaterial","size","vertexColors","transparent","opacity","blending","AdditiveBlending","particleSystem","Points","vertices","x","hue","LineBasicMaterial","linewidth","waveform","Line","t","angle","spiral","IcosahedronGeometry","MeshPhongMaterial","wireframe","emissive","specular","shininess","kaleidoscope","Mesh","requestAnimationFrame","rotation","y","dataArray","avgAudio","min","length","scale","attributes","array","needsUpdate","update","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/ThreeVisualizer.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst ThreeVisualizer = ({ audioData, template, isPlaying }) => {\r\n  const mountRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const animationFrameRef = useRef(null);\r\n  const particlesRef = useRef(null);\r\n  const waveformRef = useRef(null);\r\n  const timeRef = useRef(0);\r\n  const controlsRef = useRef(null);\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n\r\n  console.log(\"ThreeVisualizer rendering with template:\", template);\r\n  console.log(\"Audio data:\", audioData);\r\n  console.log(\"Is playing:\", isPlaying);\r\n\r\n  // Initialize Three.js scene\r\n  useEffect(() => {\r\n    if (!mountRef.current) return;\r\n    \r\n    console.log(\"Initializing Three.js scene\");\r\n\r\n    try {\r\n      // Create scene\r\n      const scene = new THREE.Scene();\r\n      sceneRef.current = scene;\r\n\r\n      // Create camera\r\n      const camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        mountRef.current.clientWidth / mountRef.current.clientHeight,\r\n        0.1,\r\n        1000\r\n      );\r\n      camera.position.z = 5;\r\n      cameraRef.current = camera;\r\n\r\n      // Create renderer\r\n      const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\r\n      renderer.setClearColor(0x000000, 1);\r\n      mountRef.current.appendChild(renderer.domElement);\r\n      rendererRef.current = renderer;\r\n\r\n      // Add orbit controls for user interaction\r\n      const controls = new OrbitControls(camera, renderer.domElement);\r\n      controls.enableDamping = true;\r\n      controls.dampingFactor = 0.05;\r\n      controls.rotateSpeed = 0.5;\r\n      controlsRef.current = controls;\r\n\r\n      // Add ambient light\r\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n      scene.add(ambientLight);\r\n\r\n      // Add directional light\r\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n      directionalLight.position.set(0, 1, 1);\r\n      scene.add(directionalLight);\r\n\r\n      // Handle window resize\r\n      const handleResize = () => {\r\n        if (!mountRef.current || !cameraRef.current || !rendererRef.current) return;\r\n        \r\n        const width = mountRef.current.clientWidth;\r\n        const height = mountRef.current.clientHeight;\r\n        \r\n        cameraRef.current.aspect = width / height;\r\n        cameraRef.current.updateProjectionMatrix();\r\n        \r\n        rendererRef.current.setSize(width, height);\r\n      };\r\n\r\n      window.addEventListener('resize', handleResize);\r\n      \r\n      // Initial render\r\n      renderer.render(scene, camera);\r\n      setIsInitialized(true);\r\n      \r\n      console.log(\"Three.js scene initialized successfully\");\r\n\r\n      // Clean up\r\n      return () => {\r\n        console.log(\"Cleaning up Three.js scene\");\r\n        window.removeEventListener('resize', handleResize);\r\n        \r\n        if (rendererRef.current && mountRef.current) {\r\n          try {\r\n            mountRef.current.removeChild(rendererRef.current.domElement);\r\n          } catch (error) {\r\n            console.error(\"Error removing renderer:\", error);\r\n          }\r\n        }\r\n        \r\n        if (animationFrameRef.current) {\r\n          cancelAnimationFrame(animationFrameRef.current);\r\n        }\r\n        \r\n        // Dispose of Three.js objects\r\n        if (particlesRef.current) {\r\n          try {\r\n            particlesRef.current.geometry.dispose();\r\n            particlesRef.current.material.dispose();\r\n            sceneRef.current.remove(particlesRef.current);\r\n          } catch (error) {\r\n            console.error(\"Error disposing particles:\", error);\r\n          }\r\n        }\r\n        \r\n        if (waveformRef.current) {\r\n          try {\r\n            waveformRef.current.geometry.dispose();\r\n            waveformRef.current.material.dispose();\r\n            sceneRef.current.remove(waveformRef.current);\r\n          } catch (error) {\r\n            console.error(\"Error disposing waveform:\", error);\r\n          }\r\n        }\r\n        \r\n        setIsInitialized(false);\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error initializing Three.js:\", error);\r\n    }\r\n  }, []);\r\n\r\n  // Create or update visualization based on template\r\n  useEffect(() => {\r\n    if (!isInitialized || !sceneRef.current) {\r\n      console.log(\"Scene not initialized yet, skipping visualization creation\");\r\n      return;\r\n    }\r\n    \r\n    console.log(\"Creating visualization for template:\", template);\r\n\r\n    try {\r\n      // Clear previous visualizations\r\n      if (particlesRef.current) {\r\n        particlesRef.current.geometry.dispose();\r\n        particlesRef.current.material.dispose();\r\n        sceneRef.current.remove(particlesRef.current);\r\n        particlesRef.current = null;\r\n      }\r\n\r\n      if (waveformRef.current) {\r\n        waveformRef.current.geometry.dispose();\r\n        waveformRef.current.material.dispose();\r\n        sceneRef.current.remove(waveformRef.current);\r\n        waveformRef.current = null;\r\n      }\r\n\r\n      // Create new visualization based on template\r\n      switch (template) {\r\n        case 'particles':\r\n          createParticleSystem();\r\n          break;\r\n        case 'waveform':\r\n          createWaveform();\r\n          break;\r\n        case 'spiral':\r\n          createSpiral();\r\n          break;\r\n        case 'kaleidoscope':\r\n          createKaleidoscope();\r\n          break;\r\n        default:\r\n          console.log(\"Unknown template, defaulting to particles\");\r\n          createParticleSystem();\r\n      }\r\n      \r\n      console.log(\"Visualization created successfully\");\r\n\r\n      // Start animation if playing\r\n      if (isPlaying) {\r\n        animate();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating visualization:\", error);\r\n    }\r\n  }, [template, isInitialized]);\r\n\r\n  // Handle play/pause\r\n  useEffect(() => {\r\n    console.log(\"Play state changed:\", isPlaying);\r\n    \r\n    if (!isInitialized) {\r\n      console.log(\"Scene not initialized yet, skipping animation\");\r\n      return;\r\n    }\r\n\r\n    if (isPlaying) {\r\n      console.log(\"Starting animation\");\r\n      animate();\r\n    } else if (animationFrameRef.current) {\r\n      console.log(\"Stopping animation\");\r\n      cancelAnimationFrame(animationFrameRef.current);\r\n    }\r\n  }, [isPlaying, isInitialized]);\r\n\r\n  // Create particle system visualization\r\n  const createParticleSystem = () => {\r\n    console.log(\"Creating particle system\");\r\n    \r\n    try {\r\n      const particleCount = 5000;\r\n      const particles = new THREE.BufferGeometry();\r\n      \r\n      const positions = new Float32Array(particleCount * 3);\r\n      const colors = new Float32Array(particleCount * 3);\r\n      const sizes = new Float32Array(particleCount);\r\n      \r\n      const color = new THREE.Color();\r\n      \r\n      for (let i = 0; i < particleCount; i++) {\r\n        // Position particles in a sphere\r\n        const radius = 3 + Math.random() * 2;\r\n        const theta = Math.random() * Math.PI * 2;\r\n        const phi = Math.acos(2 * Math.random() - 1);\r\n        \r\n        positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\r\n        positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\r\n        positions[i * 3 + 2] = radius * Math.cos(phi);\r\n        \r\n        // Random colors\r\n        color.setHSL(Math.random(), 0.7, 0.5);\r\n        colors[i * 3] = color.r;\r\n        colors[i * 3 + 1] = color.g;\r\n        colors[i * 3 + 2] = color.b;\r\n        \r\n        // Random sizes\r\n        sizes[i] = Math.random() * 20 + 5;\r\n      }\r\n      \r\n      particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n      particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n      particles.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n      \r\n      // Use simpler material for better compatibility\r\n      const particleMaterial = new THREE.PointsMaterial({\r\n        size: 0.1,\r\n        vertexColors: true,\r\n        transparent: true,\r\n        opacity: 0.8,\r\n        blending: THREE.AdditiveBlending\r\n      });\r\n      \r\n      const particleSystem = new THREE.Points(particles, particleMaterial);\r\n      sceneRef.current.add(particleSystem);\r\n      particlesRef.current = particleSystem;\r\n      \r\n      console.log(\"Particle system created successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error creating particle system:\", error);\r\n    }\r\n  };\r\n\r\n  // Create waveform visualization\r\n  const createWaveform = () => {\r\n    console.log(\"Creating waveform\");\r\n    \r\n    try {\r\n      const geometry = new THREE.BufferGeometry();\r\n      const vertices = new Float32Array(128 * 3);\r\n      const colors = new Float32Array(128 * 3);\r\n      \r\n      for (let i = 0; i < 128; i++) {\r\n        const x = (i / 128) * 10 - 5;\r\n        vertices[i * 3] = x;\r\n        vertices[i * 3 + 1] = 0;\r\n        vertices[i * 3 + 2] = 0;\r\n        \r\n        // Color gradient from blue to red\r\n        const hue = i / 128;\r\n        const color = new THREE.Color().setHSL(hue, 0.8, 0.5);\r\n        colors[i * 3] = color.r;\r\n        colors[i * 3 + 1] = color.g;\r\n        colors[i * 3 + 2] = color.b;\r\n      }\r\n      \r\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n      geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n      \r\n      const material = new THREE.LineBasicMaterial({\r\n        vertexColors: true,\r\n        linewidth: 2,\r\n      });\r\n      \r\n      const waveform = new THREE.Line(geometry, material);\r\n      sceneRef.current.add(waveform);\r\n      waveformRef.current = waveform;\r\n      \r\n      console.log(\"Waveform created successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error creating waveform:\", error);\r\n    }\r\n  };\r\n\r\n  // Create spiral visualization\r\n  const createSpiral = () => {\r\n    console.log(\"Creating spiral\");\r\n    \r\n    try {\r\n      const geometry = new THREE.BufferGeometry();\r\n      const vertices = new Float32Array(2000 * 3);\r\n      const colors = new Float32Array(2000 * 3);\r\n      \r\n      for (let i = 0; i < 2000; i++) {\r\n        const t = i / 2000;\r\n        const angle = t * Math.PI * 20;\r\n        const radius = t * 5;\r\n        \r\n        vertices[i * 3] = Math.cos(angle) * radius;\r\n        vertices[i * 3 + 1] = Math.sin(angle) * radius;\r\n        vertices[i * 3 + 2] = t * 2 - 1;\r\n        \r\n        // Color gradient\r\n        const hue = t;\r\n        const color = new THREE.Color().setHSL(hue, 0.8, 0.5);\r\n        colors[i * 3] = color.r;\r\n        colors[i * 3 + 1] = color.g;\r\n        colors[i * 3 + 2] = color.b;\r\n      }\r\n      \r\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n      geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n      \r\n      const material = new THREE.PointsMaterial({\r\n        size: 0.1,\r\n        vertexColors: true,\r\n        transparent: true,\r\n        opacity: 0.8,\r\n        blending: THREE.AdditiveBlending,\r\n      });\r\n      \r\n      const spiral = new THREE.Points(geometry, material);\r\n      sceneRef.current.add(spiral);\r\n      particlesRef.current = spiral;\r\n      \r\n      console.log(\"Spiral created successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error creating spiral:\", error);\r\n    }\r\n  };\r\n\r\n  // Create kaleidoscope visualization\r\n  const createKaleidoscope = () => {\r\n    console.log(\"Creating kaleidoscope\");\r\n    \r\n    try {\r\n      // Create a simpler geometry for better compatibility\r\n      const geometry = new THREE.IcosahedronGeometry(2, 2);\r\n      const material = new THREE.MeshPhongMaterial({\r\n        color: 0xffffff,\r\n        wireframe: true,\r\n        emissive: 0x444444,\r\n        specular: 0xffffff,\r\n        shininess: 100,\r\n      });\r\n      \r\n      const kaleidoscope = new THREE.Mesh(geometry, material);\r\n      sceneRef.current.add(kaleidoscope);\r\n      particlesRef.current = kaleidoscope;\r\n      \r\n      console.log(\"Kaleidoscope created successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error creating kaleidoscope:\", error);\r\n    }\r\n  };\r\n\r\n  // Animation loop\r\n  const animate = () => {\r\n    if (!sceneRef.current || !cameraRef.current || !rendererRef.current) {\r\n      console.log(\"Missing required refs for animation\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      animationFrameRef.current = requestAnimationFrame(animate);\r\n      \r\n      timeRef.current += 0.01;\r\n      \r\n      // Update based on template\r\n      if (particlesRef.current) {\r\n        if (template === 'particles') {\r\n          particlesRef.current.rotation.y += 0.002;\r\n          particlesRef.current.rotation.x += 0.001;\r\n        } else if (template === 'spiral') {\r\n          particlesRef.current.rotation.z += 0.005;\r\n        } else if (template === 'kaleidoscope') {\r\n          particlesRef.current.rotation.x += 0.005;\r\n          particlesRef.current.rotation.y += 0.01;\r\n          \r\n          // Scale based on audio if available\r\n          if (audioData && audioData.dataArray) {\r\n            let avgAudio = 0;\r\n            for (let i = 0; i < Math.min(128, audioData.dataArray.length); i++) {\r\n              avgAudio += audioData.dataArray[i];\r\n            }\r\n            avgAudio = avgAudio / Math.min(128, audioData.dataArray.length) / 255;\r\n            particlesRef.current.scale.set(1 + avgAudio, 1 + avgAudio, 1 + avgAudio);\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Update waveform if available\r\n      if (waveformRef.current && audioData && audioData.dataArray) {\r\n        const positions = waveformRef.current.geometry.attributes.position.array;\r\n        \r\n        for (let i = 0; i < Math.min(128, audioData.dataArray.length); i++) {\r\n          positions[i * 3 + 1] = (audioData.dataArray[i] / 128) * 2 - 1;\r\n        }\r\n        \r\n        waveformRef.current.geometry.attributes.position.needsUpdate = true;\r\n      }\r\n      \r\n      // Update controls\r\n      if (controlsRef.current) {\r\n        controlsRef.current.update();\r\n      }\r\n      \r\n      // Render scene\r\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\r\n    } catch (error) {\r\n      console.error(\"Error in animation loop:\", error);\r\n      cancelAnimationFrame(animationFrameRef.current);\r\n    }\r\n  };\r\n\r\n  return <div ref={mountRef} style={{ width: '100%', height: '100%' }} />;\r\n};\r\n\r\nexport default ThreeVisualizer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}