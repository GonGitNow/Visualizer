{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\Visualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState } from 'react';\nimport ThreeVisualizer from './ThreeVisualizer';\nimport './Visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RESOLUTIONS = {\n  '4K': {\n    width: 3840,\n    height: 2160,\n    className: 'aspect-ratio-4k'\n  },\n  '1080p': {\n    width: 1920,\n    height: 1080,\n    className: 'aspect-ratio-1080p'\n  },\n  '720p': {\n    width: 1280,\n    height: 720,\n    className: 'aspect-ratio-720p'\n  },\n  'Square': {\n    width: 720,\n    height: 720,\n    className: 'aspect-ratio-square'\n  },\n  'Vertical': {\n    width: 1080,\n    height: 1920,\n    className: 'aspect-ratio-vertical'\n  }\n};\nconst Visualizer = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  audioFile,\n  template,\n  isPlaying,\n  onAudioElementCreated,\n  parameters: initialParameters = {}\n}, ref) => {\n  _s();\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const sourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n  const particlesRef = useRef([]);\n  const timeRef = useRef(0); // Add timeRef to track animation time\n  const [resolution, setResolution] = useState('1080p'); // Default to 1080p\n  const [audioData, setAudioData] = useState(null);\n  const [use3D, setUse3D] = useState(false);\n  const [parameters, setParameters] = useState(initialParameters);\n\n  // Check if template is a 3D visualization\n  useEffect(() => {\n    // Define which templates should use 3D rendering\n    const threeDTemplates = ['particles3d', 'waveform3d', 'spiral3d', 'kaleidoscope3d'];\n    setUse3D(threeDTemplates.includes(template));\n  }, [template]);\n\n  // Audio initialization effect\n  useEffect(() => {\n    if (!audioFile) return;\n    let isInitialized = false;\n    const initAudio = async () => {\n      try {\n        // Initialize audio context only on first load or if it doesn't exist\n        if (!audioContextRef.current) {\n          // Create context on user interaction\n          const context = new (window.AudioContext || window.webkitAudioContext)();\n          audioContextRef.current = context;\n\n          // Create analyzer with improved settings for better reactivity\n          const analyser = context.createAnalyser();\n          analyser.fftSize = 2048; // Increased for more detailed frequency data\n          analyser.smoothingTimeConstant = 0.8; // Higher smoothing for more consistent movement\n          analyserRef.current = analyser;\n        }\n\n        // Create and set up audio element\n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n\n        // Set the audio source\n        const timestamp = new Date().getTime();\n        audioElement.src = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\n\n        // Wait for audio to be loaded enough to play\n        await new Promise((resolve, reject) => {\n          const loadHandler = () => {\n            console.log('Audio loaded, duration:', audioElement.duration);\n            resolve();\n          };\n          const errorHandler = error => {\n            console.error('Audio load error:', error);\n            reject(error);\n          };\n          audioElement.addEventListener('canplaythrough', loadHandler, {\n            once: true\n          });\n          audioElement.addEventListener('error', errorHandler, {\n            once: true\n          });\n          audioElement.load();\n        });\n\n        // Only create new media source if not already connected\n        if (!isInitialized) {\n          // Ensure old source is disconnected\n          if (sourceRef.current) {\n            sourceRef.current.disconnect();\n          }\n\n          // Create and connect new media source\n          const mediaSource = audioContextRef.current.createMediaElementSource(audioElement);\n          sourceRef.current = mediaSource;\n          mediaSource.connect(analyserRef.current);\n          analyserRef.current.connect(audioContextRef.current.destination);\n          isInitialized = true;\n        }\n\n        // Set up event listeners - REMOVE timeupdate listener which causes visualization restarts\n        const onSeeking = () => {\n          console.log('Seeking:', audioElement.currentTime);\n          if (isPlaying) startVisualization();\n        };\n        audioElement.addEventListener('seeking', onSeeking);\n        audioElement.addEventListener('seeked', onSeeking);\n        // Removed timeupdate listener which was causing visualization restarts\n\n        // Store reference and notify parent\n        audioElementRef.current = audioElement;\n        onAudioElementCreated(audioElement);\n\n        // Resume audio context if suspended\n        if (audioContextRef.current.state === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n        return () => {\n          console.log('Cleaning up audio element');\n          audioElement.removeEventListener('seeking', onSeeking);\n          audioElement.removeEventListener('seeked', onSeeking);\n          // Removed timeupdate listener cleanup\n          audioElement.pause();\n          audioElement.src = '';\n          onAudioElementCreated(null);\n        };\n      } catch (error) {\n        console.error('Audio initialization error:', error);\n        alert('Error loading audio. Please try again.');\n      }\n    };\n    initAudio();\n  }, [audioFile]); // Remove isPlaying from dependencies\n\n  // Separate playback control effect\n  useEffect(() => {\n    const audioElement = audioElementRef.current;\n    if (!audioElement) return;\n    const playAudio = async () => {\n      try {\n        var _audioContextRef$curr;\n        // Ensure audio context is running\n        if (((_audioContextRef$curr = audioContextRef.current) === null || _audioContextRef$curr === void 0 ? void 0 : _audioContextRef$curr.state) === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n        console.log('Playing audio...');\n        await audioElement.play();\n        startVisualization();\n      } catch (error) {\n        console.error('Playback error:', error);\n        alert('Error playing audio. Please try again.');\n      }\n    };\n    if (isPlaying) {\n      playAudio();\n    } else {\n      console.log('Pausing audio...');\n      audioElement.pause();\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isPlaying]);\n\n  // Add effect to handle template changes\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Clear the entire canvas\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Restart visualization if playing\n    if (isPlaying) {\n      startVisualization();\n    }\n  }, [template]);\n\n  // Update canvas size based on selected resolution\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const {\n      width,\n      height\n    } = RESOLUTIONS[resolution];\n\n    // Set canvas dimensions to match the selected resolution\n    canvas.width = width;\n    canvas.height = height;\n\n    // Clear canvas with new dimensions\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Adjust container styles based on aspect ratio\n    if (containerRef.current) {\n      if (resolution === 'Vertical') {\n        containerRef.current.style.width = 'auto';\n        containerRef.current.style.height = '80vh';\n      } else if (resolution === 'Square') {\n        containerRef.current.style.width = '720px';\n        containerRef.current.style.height = '720px';\n        containerRef.current.style.maxWidth = '720px';\n        containerRef.current.style.maxHeight = '720px';\n      } else {\n        containerRef.current.style.width = '100%';\n        containerRef.current.style.height = 'auto';\n        containerRef.current.style.maxWidth = `${width}px`;\n        containerRef.current.style.maxHeight = `${height}px`;\n      }\n    }\n\n    // Restart visualization if playing\n    if (isPlaying) {\n      startVisualization();\n    }\n\n    // Initialize particles for the new canvas size\n    if (template === 'particles') {\n      initParticles(ctx);\n    }\n  }, [resolution, isPlaying, template]);\n\n  // Function to change resolution\n  const changeResolution = newResolution => {\n    if (RESOLUTIONS[newResolution]) {\n      setResolution(newResolution);\n    }\n  };\n\n  // Expose changeResolution to parent via ref\n  React.useImperativeHandle(ref, () => ({\n    changeResolution,\n    getCurrentResolution: () => resolution,\n    updateParameters\n  }));\n  const initParticles = ctx => {\n    // Safety check - ensure context exists\n    if (!ctx || !ctx.canvas) {\n      console.error(\"Canvas context is null in initParticles\");\n      return;\n    }\n    const count = Math.floor((parameters.count || 50) / 50 * 200); // 100-400 particles based on count parameter\n    particlesRef.current = [];\n    for (let i = 0; i < count; i++) {\n      particlesRef.current.push({\n        x: Math.random() * ctx.canvas.width,\n        y: Math.random() * ctx.canvas.height,\n        size: Math.random() * ((parameters.size || 50) / 10) + 1,\n        // 1-6 size based on size parameter\n        vx: (Math.random() - 0.5) * ((parameters.speed || 50) / 25),\n        // Speed based on speed parameter\n        vy: (Math.random() - 0.5) * ((parameters.speed || 50) / 25),\n        hue: Math.random() * 360\n      });\n    }\n  };\n  const updateAndDrawParticles = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in updateAndDrawParticles\");\n      return;\n    }\n\n    // Safety check - ensure particles array exists\n    if (!particlesRef.current || particlesRef.current.length === 0) {\n      console.log(\"Initializing particles in updateAndDrawParticles\");\n      initParticles(ctx);\n\n      // Double-check initialization worked\n      if (!particlesRef.current || particlesRef.current.length === 0) {\n        console.error(\"Failed to initialize particles\");\n        return;\n      }\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ffffff';\n    const particleCount = Math.floor((cachedParameters.count || 50) / 100 * particlesRef.current.length);\n    const particleSize = (cachedParameters.size || 50) / 10; // Convert to 0-10 scale\n    const speed = (cachedParameters.speed || 50) / 50; // Convert to 0-2 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // Convert to 0-2 scale\n\n    // Clear canvas with fade effect\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    // Update and draw particles\n    for (let i = 0; i < particleCount; i++) {\n      const particle = particlesRef.current[i];\n\n      // Apply audio reactivity\n      const dataIndex = Math.floor(i / particleCount * bufferLength);\n      const audioValue = dataArray[dataIndex] / 255.0 * reactivity;\n\n      // Update position\n      particle.x += particle.vx * speed;\n      particle.y += particle.vy * speed;\n\n      // Bounce off edges\n      if (particle.x < 0 || particle.x > canvasRef.current.width) {\n        particle.vx = -particle.vx;\n      }\n      if (particle.y < 0 || particle.y > canvasRef.current.height) {\n        particle.vy = -particle.vy;\n      }\n\n      // Draw particle\n      const size = particleSize * (1 + audioValue);\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);\n      ctx.fillStyle = adjustColor(color, audioValue * 50);\n      ctx.fill();\n    }\n  };\n\n  // Helper function to adjust colors\n  const adjustColor = (hexColor, amount) => {\n    // Convert hex to RGB\n    let r = parseInt(hexColor.substring(1, 3), 16);\n    let g = parseInt(hexColor.substring(3, 5), 16);\n    let b = parseInt(hexColor.substring(5, 7), 16);\n\n    // Adjust RGB values\n    r = Math.max(0, Math.min(255, r + amount));\n    g = Math.max(0, Math.min(255, g + amount));\n    b = Math.max(0, Math.min(255, b + amount));\n\n    // Convert back to hex with proper padding\n    const rHex = Math.round(r).toString(16).padStart(2, '0');\n    const gHex = Math.round(g).toString(16).padStart(2, '0');\n    const bHex = Math.round(b).toString(16).padStart(2, '0');\n    return `#${rHex}${gHex}${bHex}`;\n  };\n\n  // Start visualization\n  const startVisualization = () => {\n    if (!analyserRef.current) {\n      console.error(\"Analyzer reference is null in startVisualization\");\n      return;\n    }\n    const analyser = analyserRef.current;\n\n    // Create data arrays for audio analysis\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const timeArray = new Uint8Array(bufferLength);\n\n    // Get initial data\n    analyser.getByteFrequencyData(dataArray);\n    analyser.getByteTimeDomainData(timeArray);\n\n    // Cancel any existing animation frame\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n\n    // Reset animation time to ensure consistent animation speed\n    timeRef.current = 0;\n\n    // Track frame timing for consistent animation speed\n    let lastFrameTime = performance.now();\n    const targetFrameRate = 30; // Reduced to 30 FPS for smoother, slower animations\n    const frameInterval = 1000 / targetFrameRate;\n\n    // Handle 3D visualization\n    if (use3D) {\n      // For 3D, we need to continuously update the audio data\n      const update3DAudio = currentTime => {\n        animationFrameRef.current = requestAnimationFrame(update3DAudio);\n\n        // Calculate delta time for smooth animation regardless of frame rate\n        const deltaTime = (currentTime - lastFrameTime) / frameInterval;\n        lastFrameTime = currentTime;\n\n        // Increment time for animations with consistent speed\n        timeRef.current += 0.005 * Math.min(deltaTime, 2);\n\n        // Get frequency and time domain data\n        analyser.getByteFrequencyData(dataArray);\n        analyser.getByteTimeDomainData(timeArray);\n\n        // Update audio data for 3D visualizer with more efficient approach\n        const newDataArray = new Array(bufferLength);\n        const newTimeArray = new Array(bufferLength);\n\n        // Use logarithmic sampling to focus more on lower frequencies\n        for (let i = 0; i < bufferLength; i++) {\n          // Logarithmic mapping to emphasize lower frequencies\n          const logIndex = Math.min(bufferLength - 1, Math.floor(Math.pow(i / bufferLength, 0.5) * bufferLength));\n          newDataArray[i] = dataArray[logIndex];\n          newTimeArray[i] = timeArray[logIndex];\n        }\n        setAudioData({\n          dataArray: newDataArray,\n          timeArray: newTimeArray,\n          bufferLength\n        });\n      };\n      update3DAudio(performance.now());\n      return;\n    }\n\n    // For 2D visualizations, ensure canvas exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in startVisualization for 2D visualization\");\n      return;\n    }\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', {\n      alpha: false\n    }); // Optimize by disabling alpha\n\n    // Cache parameter values outside the animation loop for better performance\n    let cachedParameters = {\n      ...parameters\n    };\n\n    // Animation function for 2D visualizations\n    const draw = currentTime => {\n      animationFrameRef.current = requestAnimationFrame(draw);\n\n      // Calculate delta time for smooth animation regardless of frame rate\n      const deltaTime = (currentTime - lastFrameTime) / frameInterval;\n      lastFrameTime = currentTime;\n\n      // Increment time for animations with consistent speed\n      timeRef.current += 0.005 * Math.min(deltaTime, 2);\n\n      // Get frequency and time domain data\n      analyser.getByteFrequencyData(dataArray);\n      analyser.getByteTimeDomainData(timeArray);\n\n      // Clear canvas\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Check if parameters have changed\n      if (JSON.stringify(cachedParameters) !== JSON.stringify(parameters)) {\n        cachedParameters = {\n          ...parameters\n        };\n      }\n\n      // Draw visualization based on template\n      switch (template) {\n        case 'waveform':\n          drawWaveform(ctx, dataArray, bufferLength, cachedParameters);\n          break;\n        case 'bars':\n          drawBars(ctx, dataArray, bufferLength, cachedParameters);\n          break;\n        case 'circles':\n          drawCircles(ctx, dataArray, bufferLength, cachedParameters);\n          break;\n        case 'kaleidoscope':\n          drawKaleidoscope(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'spiral':\n          drawSpiral(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'particles':\n          updateAndDrawParticles(ctx, dataArray, bufferLength, cachedParameters);\n          break;\n        case 'ripple':\n          drawRipples(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'terrain':\n          drawTerrain(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'starburst':\n          drawStarburst(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'fractal':\n          drawFractal(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'liquid':\n          drawLiquid(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'mesh':\n          drawMesh(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'clock':\n          drawClock(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        default:\n          drawWaveform(ctx, dataArray, bufferLength, cachedParameters);\n      }\n    };\n    draw(performance.now());\n  };\n  const drawWaveform = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawWaveform\");\n      return;\n    }\n\n    // Apply parameters\n    const lineWidth = cachedParameters.lineWidth || 3;\n    const color = cachedParameters.color || '#00aaff';\n    const reactivity = (cachedParameters.reactivity || 50) / 40; // Adjusted for better responsiveness\n    const smoothing = (cachedParameters.smoothing || 50) / 100; // Convert to 0-1 scale\n\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = color;\n    ctx.beginPath();\n    const sliceWidth = canvasRef.current.width * 1.0 / bufferLength;\n    let x = 0;\n\n    // Use fewer points for better performance\n    const step = Math.max(1, Math.floor(bufferLength / 256));\n    for (let i = 0; i < bufferLength; i += step) {\n      const v = dataArray[i] / 128.0 * reactivity;\n      const y = v * canvasRef.current.height / 2;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        // Apply smoothing if enabled\n        if (smoothing > 0) {\n          const prevX = x - sliceWidth * step;\n          const prevY = dataArray[i - step] / 128.0 * reactivity * canvasRef.current.height / 2;\n          const cpX1 = prevX + sliceWidth * step / 3;\n          const cpX2 = x - sliceWidth * step / 3;\n          const cpY1 = prevY;\n          const cpY2 = y;\n\n          // Use bezier curve for smoothing\n          ctx.bezierCurveTo(cpX1, cpY1, cpX2, cpY2, x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      x += sliceWidth * step;\n    }\n    ctx.lineTo(canvasRef.current.width, canvasRef.current.height / 2);\n    ctx.stroke();\n  };\n  const drawBars = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawBars\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ff5500';\n    const barWidth = (cachedParameters.barWidth || 50) / 100; // Convert to 0-1 scale\n    const spacing = (cachedParameters.spacing || 30) / 100; // Convert to 0-1 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 20; // Adjusted for better responsiveness\n\n    const bars = Math.min(bufferLength, 128); // Reduced number of bars for better performance\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const barWidthPx = width / bars * barWidth;\n    const barSpacing = width / bars * spacing;\n    const totalBarWidth = barWidthPx + barSpacing;\n    for (let i = 0; i < bars; i++) {\n      // Use logarithmic mapping to emphasize lower frequencies\n      // Focus more on the lower half of the frequency spectrum\n      const freqRatio = i / bars;\n      const dataIndex = Math.min(bufferLength - 1, Math.floor(Math.pow(freqRatio, 0.8) * (bufferLength / 2)));\n      const barHeight = dataArray[dataIndex] * reactivity;\n      const x = i * totalBarWidth;\n      const y = height - barHeight;\n      ctx.fillStyle = adjustColor(color, i / bars * 30);\n      ctx.fillRect(x, y, barWidthPx, barHeight);\n    }\n  };\n  const drawCircles = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawCircles\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ff00ff';\n    const baseRadius = (cachedParameters.radius || 50) / 100 * Math.min(canvasRef.current.width, canvasRef.current.height) / 2;\n    const circleCount = Math.max(1, Math.min(20, Math.floor((cachedParameters.count || 50) / 5))); // 1-20 circles\n    const reactivity = (cachedParameters.reactivity || 50) / 40; // Adjusted for better responsiveness\n\n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n\n    // Draw circles\n    for (let c = 0; c < circleCount; c++) {\n      // Focus on lower frequencies for outer circles, higher frequencies for inner circles\n      const freqRatio = c / circleCount;\n      const freqIndex = Math.floor(Math.pow(freqRatio, 0.7) * (bufferLength / 2));\n      const circleIndex = Math.min(bufferLength - 1, freqIndex);\n      const audioValue = dataArray[circleIndex] / 128.0 * reactivity;\n      const radius = baseRadius * (c + 1) / circleCount * audioValue;\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      ctx.strokeStyle = adjustColor(color, c / circleCount * 50);\n      ctx.stroke();\n    }\n  };\n  const drawKaleidoscope = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawKaleidoscope\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ffaa00';\n    const segments = cachedParameters.segments || 8;\n    const speed = (cachedParameters.speed || 50) / 2000; // Reduced speed for slower rotation\n    const reactivity = (cachedParameters.reactivity || 50) / 40; // Adjusted for better responsiveness\n\n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n    const radius = Math.min(centerX, centerY) * 0.8;\n\n    // Rotate based on time and speed\n    ctx.translate(centerX, centerY);\n    ctx.rotate(timeRef.current * speed);\n\n    // Draw kaleidoscope segments\n    for (let s = 0; s < segments; s++) {\n      ctx.rotate(Math.PI * 2 / segments);\n      ctx.beginPath();\n      ctx.strokeStyle = adjustColor(color, s * 5);\n\n      // Draw audio-reactive pattern\n      // Use fewer points for better performance\n      const step = Math.max(8, Math.floor(bufferLength / 64));\n      for (let i = 0; i < bufferLength; i += step) {\n        // Focus on lower frequencies which typically contain more rhythm information\n        const dataIndex = Math.min(bufferLength - 1, Math.floor(Math.pow(i / bufferLength, 0.7) * bufferLength));\n        const x = dataArray[dataIndex] / 256.0 * radius * reactivity;\n        const y = timeArray[dataIndex] / 256.0 * radius * reactivity;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      ctx.stroke();\n    }\n\n    // Reset transformation\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  };\n  const drawSpiral = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawSpiral\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#00ff99';\n    const arms = cachedParameters.arms || 5;\n    const speed = (cachedParameters.speed || 50) / 2000; // Reduced speed for slower rotation\n    const reactivity = (cachedParameters.reactivity || 50) / 40; // Adjusted for better responsiveness\n\n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n    const maxRadius = Math.min(centerX, centerY) * 0.9;\n\n    // Rotate based on time and speed\n    ctx.translate(centerX, centerY);\n    ctx.rotate(timeRef.current * speed);\n\n    // Pre-calculate common values\n    const PI2 = Math.PI * 2;\n    const PI6 = Math.PI * 6;\n\n    // Pre-calculate arm colors to avoid recalculating in the loop\n    const armColors = [];\n    for (let a = 0; a < arms; a++) {\n      armColors[a] = adjustColor(color, a * 10);\n    }\n\n    // Draw spiral arms\n    for (let a = 0; a < arms; a++) {\n      const armAngle = a / arms * PI2;\n      ctx.beginPath();\n      ctx.strokeStyle = armColors[a];\n\n      // Use a more efficient approach for drawing the spiral\n      // but maintain the original visual appearance with 100 points\n      const pointsPerArm = 100;\n\n      // Sample audio data less frequently for performance\n      const sampleStep = Math.max(1, Math.floor(bufferLength / 128));\n      for (let i = 0; i < pointsPerArm; i++) {\n        const t = i / pointsPerArm;\n        const angle = armAngle + t * PI6;\n        const radius = t * maxRadius;\n\n        // Apply audio reactivity - use a more efficient data sampling approach\n        // Focus on lower frequencies which typically contain more rhythm information\n        const freqIndex = Math.min(bufferLength - 1, Math.floor(t * bufferLength / 4));\n        const dataIndex = Math.min(bufferLength - 1, freqIndex);\n        const audioValue = dataArray[dataIndex] / 128.0 * reactivity;\n\n        // Pre-calculate trig functions for performance\n        const cosAngle = Math.cos(angle);\n        const sinAngle = Math.sin(angle);\n        const x = cosAngle * radius * audioValue;\n        const y = sinAngle * radius * audioValue;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      ctx.stroke();\n    }\n\n    // Reset transformation\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  };\n\n  // Add a new ripple visualization\n  const drawRipples = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawRipples\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#00ffff';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const speed = (cachedParameters.speed || 50) / 50;\n    const density = (cachedParameters.density || 50) / 50;\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const maxRadius = Math.sqrt(width * width + height * height) / 2;\n\n    // Initialize ripples array if it doesn't exist\n    if (!window.ripples) {\n      window.ripples = [];\n    }\n\n    // Detect beats for creating new ripples\n    let bassEnergy = 0;\n    for (let i = 0; i < 8; i++) {\n      bassEnergy += dataArray[i];\n    }\n    bassEnergy = bassEnergy / (8 * 255);\n\n    // Create new ripple on strong beats\n    if (bassEnergy > 0.6 && Math.random() < 0.3 * density) {\n      // Get a frequency band for this ripple's color\n      const freqBand = Math.floor(Math.random() * (bufferLength / 4));\n      const freqIntensity = dataArray[freqBand] / 255;\n\n      // Create a new ripple\n      window.ripples.push({\n        radius: 0,\n        maxRadius: maxRadius * (0.3 + Math.random() * 0.7),\n        lineWidth: 1 + Math.random() * 4,\n        alpha: 0.7 + Math.random() * 0.3,\n        speed: (0.5 + Math.random() * 1.5) * speed,\n        color: adjustColor(color, freqIntensity * 50 - 25)\n      });\n    }\n\n    // Draw and update ripples\n    for (let i = 0; i < window.ripples.length; i++) {\n      const ripple = window.ripples[i];\n\n      // Update radius\n      ripple.radius += ripple.speed;\n\n      // Decrease alpha as the ripple expands\n      ripple.alpha *= 0.98;\n\n      // Draw ripple\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, ripple.radius, 0, Math.PI * 2);\n      ctx.strokeStyle = ripple.color;\n      ctx.globalAlpha = ripple.alpha;\n      ctx.lineWidth = ripple.lineWidth;\n      ctx.stroke();\n      ctx.globalAlpha = 1.0;\n    }\n\n    // Remove ripples that have expanded beyond their max radius or faded out\n    window.ripples = window.ripples.filter(ripple => ripple.radius < ripple.maxRadius && ripple.alpha > 0.01);\n  };\n\n  // Add a new terrain visualization\n  const drawTerrain = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawTerrain\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#33cc33';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const detail = (cachedParameters.detail || 50) / 50;\n    const speed = (cachedParameters.speed || 50) / 100;\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n\n    // Calculate number of terrain points based on detail parameter\n    const points = Math.max(20, Math.floor(width / (10 / detail)));\n    const pointWidth = width / points;\n\n    // Create terrain heights based on audio data\n    const terrainHeights = [];\n\n    // Sample audio data for terrain heights\n    for (let i = 0; i < points; i++) {\n      // Map point index to frequency data index\n      const dataIndex = Math.floor(i / points * (bufferLength / 2));\n\n      // Get audio value and apply reactivity\n      const audioValue = dataArray[dataIndex] / 255.0 * reactivity;\n\n      // Calculate terrain height\n      const terrainHeight = height * 0.1 + audioValue * height * 0.6;\n      terrainHeights.push(terrainHeight);\n    }\n\n    // Smooth terrain heights\n    const smoothedHeights = [];\n    for (let i = 0; i < points; i++) {\n      let sum = 0;\n      let count = 0;\n\n      // Apply smoothing by averaging neighboring points\n      for (let j = Math.max(0, i - 2); j <= Math.min(points - 1, i + 2); j++) {\n        sum += terrainHeights[j];\n        count++;\n      }\n      smoothedHeights.push(sum / count);\n    }\n\n    // Create a gradient for the terrain\n    const gradient = ctx.createLinearGradient(0, height, 0, height / 2);\n    gradient.addColorStop(0, color);\n    gradient.addColorStop(1, adjustColor(color, 30));\n\n    // Draw terrain\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.moveTo(0, height);\n\n    // Draw terrain path\n    for (let i = 0; i < points; i++) {\n      const x = i * pointWidth;\n      const y = height - smoothedHeights[i];\n      if (i === 0) {\n        ctx.lineTo(x, y);\n      } else {\n        // Use quadratic curves for smoother terrain\n        const prevX = (i - 1) * pointWidth;\n        const prevY = height - smoothedHeights[i - 1];\n        const cpX = (prevX + x) / 2;\n        const cpY = (prevY + y) / 2;\n        ctx.quadraticCurveTo(cpX, cpY, x, y);\n      }\n    }\n\n    // Complete the path\n    ctx.lineTo(width, height);\n    ctx.closePath();\n    ctx.fill();\n\n    // Draw a reflection effect\n    ctx.globalAlpha = 0.3;\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n\n    // Draw reflection path (inverted terrain)\n    ctx.beginPath();\n    ctx.moveTo(0, height);\n    for (let i = 0; i < points; i++) {\n      const x = i * pointWidth;\n      const terrainY = height - smoothedHeights[i];\n      const reflectionHeight = smoothedHeights[i] * 0.3; // Smaller reflection\n      const y = height + reflectionHeight;\n      if (i === 0) {\n        ctx.lineTo(x, y);\n      } else {\n        // Use quadratic curves for smoother terrain\n        const prevX = (i - 1) * pointWidth;\n        const prevY = height + smoothedHeights[i - 1] * 0.3;\n        const cpX = (prevX + x) / 2;\n        const cpY = (prevY + y) / 2;\n        ctx.quadraticCurveTo(cpX, cpY, x, y);\n      }\n    }\n\n    // Complete the reflection path\n    ctx.lineTo(width, height);\n    ctx.closePath();\n    ctx.fill();\n\n    // Reset alpha\n    ctx.globalAlpha = 1.0;\n\n    // Draw stars in the sky\n    if (!window.stars) {\n      // Initialize stars\n      window.stars = [];\n      const starCount = 50;\n      for (let i = 0; i < starCount; i++) {\n        window.stars.push({\n          x: Math.random() * width,\n          y: Math.random() * height * 0.5,\n          size: 0.5 + Math.random() * 1.5,\n          brightness: 0.3 + Math.random() * 0.7\n        });\n      }\n    }\n\n    // Draw stars with audio reactivity\n    for (let i = 0; i < window.stars.length; i++) {\n      const star = window.stars[i];\n\n      // Make stars twinkle based on audio\n      const dataIndex = Math.floor(Math.random() * (bufferLength / 4));\n      const twinkle = 0.5 + dataArray[dataIndex] / 255.0 * 0.5;\n      ctx.fillStyle = `rgba(255, 255, 255, ${star.brightness * twinkle})`;\n      ctx.beginPath();\n      ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  };\n\n  // Add a new starburst visualization\n  const drawStarburst = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawStarburst\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ff9900';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const particleCount = (cachedParameters.count || 50) / 50 * 100; // 0-100 particles\n    const particleSize = (cachedParameters.size || 50) / 50 * 5; // 0-5 size\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Initialize particles array if it doesn't exist\n    if (!window.starburstParticles) {\n      window.starburstParticles = [];\n    }\n\n    // Detect beats for creating new bursts\n    let bassEnergy = 0;\n    for (let i = 0; i < 8; i++) {\n      bassEnergy += dataArray[i];\n    }\n    bassEnergy = bassEnergy / (8 * 255);\n\n    // Create new burst on strong beats\n    if (bassEnergy > 0.6 && (window.lastBurstTime === undefined || timeRef.current - window.lastBurstTime > 0.5)) {\n      window.lastBurstTime = timeRef.current;\n\n      // Create a burst of particles\n      const burstSize = Math.floor(particleCount * (0.5 + bassEnergy * 0.5));\n      const burstColor = adjustColor(color, Math.random() * 40 - 20);\n      for (let i = 0; i < burstSize; i++) {\n        const angle = Math.random() * Math.PI * 2;\n        const speed = (1 + Math.random() * 3) * reactivity;\n        const size = (0.5 + Math.random() * 1.5) * particleSize;\n        const life = 1.0; // Full life\n\n        window.starburstParticles.push({\n          x: centerX,\n          y: centerY,\n          vx: Math.cos(angle) * speed,\n          vy: Math.sin(angle) * speed,\n          size: size,\n          color: burstColor,\n          life: life,\n          decay: 0.01 + Math.random() * 0.02 // Random decay rate\n        });\n      }\n    }\n\n    // Clear canvas with fade effect for trails\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.fillRect(0, 0, width, height);\n\n    // Update and draw particles\n    for (let i = 0; i < window.starburstParticles.length; i++) {\n      const particle = window.starburstParticles[i];\n\n      // Update position\n      particle.x += particle.vx;\n      particle.y += particle.vy;\n\n      // Apply gravity\n      particle.vy += 0.05;\n\n      // Update life\n      particle.life -= particle.decay;\n\n      // Draw particle\n      if (particle.life > 0) {\n        ctx.globalAlpha = particle.life;\n        ctx.fillStyle = particle.color;\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n\n    // Reset alpha\n    ctx.globalAlpha = 1.0;\n\n    // Remove dead particles\n    window.starburstParticles = window.starburstParticles.filter(p => p.life > 0);\n  };\n\n  // Add a new fractal tree visualization\n  const drawFractal = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawFractal\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#66ff66';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const complexity = (cachedParameters.complexity || 50) / 50; // 0-1 complexity\n    const variation = (cachedParameters.variation || 50) / 50; // 0-1 variation\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n\n    // Clear canvas\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, width, height);\n\n    // Calculate audio energy for different frequency bands\n    const lowEnergy = getAverageEnergy(dataArray, 0, 10) * reactivity;\n    const midEnergy = getAverageEnergy(dataArray, 10, 100) * reactivity;\n    const highEnergy = getAverageEnergy(dataArray, 100, 200) * reactivity;\n\n    // Calculate tree parameters based on audio\n    const trunkLength = height * 0.25 * (0.8 + lowEnergy * 0.4);\n    const branchAngle = Math.PI / 6 + midEnergy * Math.PI / 12;\n    const branchRatio = 0.67 + highEnergy * 0.1;\n\n    // Calculate max depth based on complexity\n    const maxDepth = Math.floor(4 + complexity * 4);\n\n    // Draw tree\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n\n    // Start tree from bottom center\n    const startX = width / 2;\n    const startY = height * 0.9;\n\n    // Draw trunk\n    ctx.beginPath();\n    ctx.moveTo(startX, startY);\n    ctx.lineTo(startX, startY - trunkLength);\n    ctx.stroke();\n\n    // Draw branches recursively\n    drawBranch(ctx, startX, startY - trunkLength, trunkLength, -Math.PI / 2, maxDepth, branchAngle, branchRatio, color, variation, timeRef.current);\n\n    // Helper function to calculate average energy in a frequency range\n    function getAverageEnergy(data, startBin, endBin) {\n      let sum = 0;\n      const binCount = Math.min(endBin - startBin, data.length - startBin);\n      if (binCount <= 0) return 0;\n      for (let i = startBin; i < startBin + binCount; i++) {\n        sum += data[i] / 255.0;\n      }\n      return sum / binCount;\n    }\n\n    // Recursive function to draw branches\n    function drawBranch(ctx, x, y, length, angle, depth, branchAngle, branchRatio, color, variation, time) {\n      if (depth === 0) return;\n\n      // Calculate new branch length\n      const newLength = length * branchRatio;\n\n      // Add some variation based on time\n      const timeVariation = Math.sin(time * 2 + depth) * variation * 0.1;\n\n      // Calculate endpoints for left and right branches\n      const leftAngle = angle - branchAngle + timeVariation;\n      const rightAngle = angle + branchAngle + timeVariation;\n      const leftX = x + Math.cos(leftAngle) * newLength;\n      const leftY = y + Math.sin(leftAngle) * newLength;\n      const rightX = x + Math.cos(rightAngle) * newLength;\n      const rightY = y + Math.sin(rightAngle) * newLength;\n\n      // Adjust color based on depth\n      const branchColor = adjustColor(color, depth * 10);\n      ctx.strokeStyle = branchColor;\n\n      // Adjust line width based on depth\n      ctx.lineWidth = Math.max(1, 3 - depth * 0.5);\n\n      // Draw left branch\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(leftX, leftY);\n      ctx.stroke();\n\n      // Draw right branch\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(rightX, rightY);\n      ctx.stroke();\n\n      // Recursively draw sub-branches\n      drawBranch(ctx, leftX, leftY, newLength, leftAngle, depth - 1, branchAngle, branchRatio, color, variation, time);\n      drawBranch(ctx, rightX, rightY, newLength, rightAngle, depth - 1, branchAngle, branchRatio, color, variation, time);\n    }\n  };\n\n  // Add a new liquid wave visualization\n  const drawLiquid = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawLiquid\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#0099ff';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const complexity = (cachedParameters.complexity || 50) / 50; // 0-1 complexity\n    const speed = (cachedParameters.speed || 50) / 50; // 0-1 speed\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n\n    // Initialize wave points if they don't exist\n    if (!window.liquidPoints) {\n      window.liquidPoints = [];\n      const pointCount = Math.floor(20 + complexity * 30); // 20-50 points based on complexity\n\n      for (let i = 0; i < pointCount; i++) {\n        window.liquidPoints.push({\n          x: width * (i / (pointCount - 1)),\n          y: height / 2,\n          vy: 0\n        });\n      }\n    }\n\n    // Ensure we have the right number of points if complexity changes\n    const targetPointCount = Math.floor(20 + complexity * 30);\n    if (window.liquidPoints.length !== targetPointCount) {\n      const newPoints = [];\n      for (let i = 0; i < targetPointCount; i++) {\n        if (i < window.liquidPoints.length) {\n          newPoints.push(window.liquidPoints[i]);\n        } else {\n          newPoints.push({\n            x: width * (i / (targetPointCount - 1)),\n            y: height / 2,\n            vy: 0\n          });\n        }\n      }\n      window.liquidPoints = newPoints;\n    }\n\n    // Clear canvas with gradient background\n    const gradient = ctx.createLinearGradient(0, 0, 0, height);\n    gradient.addColorStop(0, 'rgb(0, 10, 30)');\n    gradient.addColorStop(1, 'rgb(0, 0, 10)');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Calculate audio energy for different frequency bands\n    const frequencyBands = 8;\n    const energyBands = [];\n    for (let i = 0; i < frequencyBands; i++) {\n      const startBin = Math.floor(i / frequencyBands * (bufferLength / 2));\n      const endBin = Math.floor((i + 1) / frequencyBands * (bufferLength / 2));\n      energyBands.push(getAverageEnergy(dataArray, startBin, endBin) * reactivity);\n    }\n\n    // Update wave points based on audio\n    const pointCount = window.liquidPoints.length;\n    const dampening = 0.95;\n    const tension = 0.025;\n    const timeScale = speed * 0.5;\n\n    // Apply forces to points\n    for (let i = 0; i < pointCount; i++) {\n      const point = window.liquidPoints[i];\n\n      // Determine which frequency band affects this point\n      const bandIndex = Math.floor(i / pointCount * frequencyBands);\n      const energy = energyBands[bandIndex];\n\n      // Apply force based on audio energy\n      point.vy += (Math.random() * 2 - 1) * energy * 2;\n\n      // Apply time-based oscillation\n      const timeOffset = i / pointCount * Math.PI * 2;\n      point.vy += Math.sin(timeRef.current * timeScale + timeOffset) * 0.2;\n\n      // Apply physics\n      point.y += point.vy;\n      point.vy *= dampening;\n\n      // Apply tension to return to center\n      point.vy += (height / 2 - point.y) * tension;\n    }\n\n    // Draw the liquid\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.moveTo(0, height);\n\n    // Draw first point\n    ctx.lineTo(window.liquidPoints[0].x, window.liquidPoints[0].y);\n\n    // Draw curve through points\n    for (let i = 0; i < pointCount - 1; i++) {\n      const current = window.liquidPoints[i];\n      const next = window.liquidPoints[i + 1];\n\n      // Use quadratic curves for smoother liquid\n      const cpX = (current.x + next.x) / 2;\n      const cpY = (current.y + next.y) / 2;\n      ctx.quadraticCurveTo(current.x, current.y, cpX, cpY);\n    }\n\n    // Draw last point\n    const lastPoint = window.liquidPoints[pointCount - 1];\n    ctx.lineTo(lastPoint.x, lastPoint.y);\n\n    // Complete the path\n    ctx.lineTo(width, height);\n    ctx.closePath();\n    ctx.fill();\n\n    // Add highlights\n    ctx.strokeStyle = adjustColor(color, 30);\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n\n    // Draw curve through points for highlight\n    ctx.moveTo(window.liquidPoints[0].x, window.liquidPoints[0].y);\n    for (let i = 0; i < pointCount - 1; i++) {\n      const current = window.liquidPoints[i];\n      const next = window.liquidPoints[i + 1];\n\n      // Use quadratic curves for smoother liquid\n      const cpX = (current.x + next.x) / 2;\n      const cpY = (current.y + next.y) / 2;\n      ctx.quadraticCurveTo(current.x, current.y, cpX, cpY);\n    }\n\n    // Draw last point for highlight\n    ctx.lineTo(lastPoint.x, lastPoint.y);\n    ctx.stroke();\n\n    // Add bubbles for extra effect\n    if (!window.liquidBubbles) {\n      window.liquidBubbles = [];\n    }\n\n    // Create new bubbles based on audio energy\n    const bassEnergy = energyBands[0];\n    if (Math.random() < bassEnergy * 0.3) {\n      const bubbleX = Math.random() * width;\n      const bubbleSize = 2 + Math.random() * 8;\n      window.liquidBubbles.push({\n        x: bubbleX,\n        y: height,\n        size: bubbleSize,\n        speed: 0.5 + Math.random() * 2,\n        opacity: 0.1 + Math.random() * 0.4\n      });\n    }\n\n    // Update and draw bubbles\n    ctx.fillStyle = adjustColor(color, 50);\n    for (let i = 0; i < window.liquidBubbles.length; i++) {\n      const bubble = window.liquidBubbles[i];\n\n      // Update position\n      bubble.y -= bubble.speed;\n\n      // Draw bubble\n      ctx.globalAlpha = bubble.opacity;\n      ctx.beginPath();\n      ctx.arc(bubble.x, bubble.y, bubble.size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Reset alpha\n    ctx.globalAlpha = 1.0;\n\n    // Remove bubbles that have risen to the top\n    window.liquidBubbles = window.liquidBubbles.filter(b => b.y > -b.size);\n\n    // Helper function to calculate average energy in a frequency range\n    function getAverageEnergy(data, startBin, endBin) {\n      let sum = 0;\n      const binCount = Math.min(endBin - startBin, data.length - startBin);\n      if (binCount <= 0) return 0;\n      for (let i = startBin; i < startBin + binCount; i++) {\n        sum += data[i] / 255.0;\n      }\n      return sum / binCount;\n    }\n  };\n\n  // Add a new audio mesh visualization\n  const drawMesh = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawMesh\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ff00cc';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const density = (cachedParameters.density || 50) / 50; // 0-1 density\n    const perspective = (cachedParameters.perspective || 50) / 50; // 0-1 perspective\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n\n    // Clear canvas with gradient background\n    const gradient = ctx.createLinearGradient(0, 0, 0, height);\n    gradient.addColorStop(0, 'rgb(0, 0, 0)');\n    gradient.addColorStop(1, 'rgb(20, 0, 20)');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Calculate grid dimensions based on density\n    const gridSize = Math.max(8, Math.floor(8 + density * 16)); // 8-24 grid size\n    const cellWidth = width / gridSize;\n    const cellHeight = height / gridSize;\n\n    // Create perspective projection\n    const focalLength = 400 * perspective;\n    const viewDistance = 200 + 300 * perspective;\n    const eyeZ = -viewDistance;\n\n    // Calculate time-based rotation\n    const rotationX = timeRef.current * 0.1;\n    const rotationY = timeRef.current * 0.15;\n    const rotationZ = timeRef.current * 0.05;\n\n    // Create 3D grid points\n    const grid = [];\n    for (let y = 0; y < gridSize; y++) {\n      const row = [];\n      for (let x = 0; x < gridSize; x++) {\n        // Map grid position to frequency data\n        const freqX = Math.floor(x / gridSize * (bufferLength / 4));\n        const freqY = Math.floor(y / gridSize * (bufferLength / 4));\n        const freqIndex = (freqX + freqY) % (bufferLength / 2);\n\n        // Get audio value and apply reactivity\n        const audioValue = dataArray[freqIndex] / 255.0 * reactivity;\n\n        // Calculate 3D coordinates\n        const xPos = (x - gridSize / 2) * cellWidth * 1.5;\n        const yPos = (y - gridSize / 2) * cellHeight * 1.5;\n        const zPos = audioValue * 100; // Z-axis deformation based on audio\n\n        // Apply 3D rotation\n        const point = rotate3D(xPos, yPos, zPos, rotationX, rotationY, rotationZ);\n\n        // Apply perspective projection\n        const scale = focalLength / (focalLength + point.z - eyeZ);\n        const projX = width / 2 + point.x * scale;\n        const projY = height / 2 + point.y * scale;\n\n        // Store projected point\n        row.push({\n          x: projX,\n          y: projY,\n          z: point.z,\n          scale: scale,\n          value: audioValue\n        });\n      }\n      grid.push(row);\n    }\n\n    // Draw mesh lines\n    ctx.lineWidth = 1;\n\n    // Draw horizontal lines\n    for (let y = 0; y < gridSize; y++) {\n      for (let x = 0; x < gridSize - 1; x++) {\n        const point1 = grid[y][x];\n        const point2 = grid[y][x + 1];\n\n        // Skip lines that would be behind the viewer\n        if (point1.z < eyeZ || point2.z < eyeZ) continue;\n\n        // Calculate line color based on audio value and depth\n        const lineValue = (point1.value + point2.value) / 2;\n        const depthFactor = Math.min(1, Math.max(0, (point1.z + point2.z) / 400 + 0.5));\n        const lineColor = adjustColor(color, depthFactor * 50 - 25);\n\n        // Draw line with opacity based on depth\n        ctx.strokeStyle = lineColor;\n        ctx.globalAlpha = depthFactor * 0.8 + 0.2;\n        ctx.beginPath();\n        ctx.moveTo(point1.x, point1.y);\n        ctx.lineTo(point2.x, point2.y);\n        ctx.stroke();\n      }\n    }\n\n    // Draw vertical lines\n    for (let x = 0; x < gridSize; x++) {\n      for (let y = 0; y < gridSize - 1; y++) {\n        const point1 = grid[y][x];\n        const point2 = grid[y + 1][x];\n\n        // Skip lines that would be behind the viewer\n        if (point1.z < eyeZ || point2.z < eyeZ) continue;\n\n        // Calculate line color based on audio value and depth\n        const lineValue = (point1.value + point2.value) / 2;\n        const depthFactor = Math.min(1, Math.max(0, (point1.z + point2.z) / 400 + 0.5));\n        const lineColor = adjustColor(color, depthFactor * 50 - 25);\n\n        // Draw line with opacity based on depth\n        ctx.strokeStyle = lineColor;\n        ctx.globalAlpha = depthFactor * 0.8 + 0.2;\n        ctx.beginPath();\n        ctx.moveTo(point1.x, point1.y);\n        ctx.lineTo(point2.x, point2.y);\n        ctx.stroke();\n      }\n    }\n\n    // Draw grid points\n    for (let y = 0; y < gridSize; y++) {\n      for (let x = 0; x < gridSize; x++) {\n        const point = grid[y][x];\n\n        // Skip points that would be behind the viewer\n        if (point.z < eyeZ) continue;\n\n        // Calculate point size and color based on audio value and depth\n        const pointSize = 1 + point.value * 3 * point.scale;\n        const depthFactor = Math.min(1, Math.max(0, point.z / 200 + 0.5));\n        const pointColor = adjustColor(color, depthFactor * 60);\n\n        // Draw point with opacity based on depth\n        ctx.fillStyle = pointColor;\n        ctx.globalAlpha = depthFactor * 0.8 + 0.2;\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, pointSize, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n\n    // Reset alpha\n    ctx.globalAlpha = 1.0;\n\n    // Helper function for 3D rotation\n    function rotate3D(x, y, z, rotX, rotY, rotZ) {\n      // Rotate around X axis\n      let y1 = y * Math.cos(rotX) - z * Math.sin(rotX);\n      let z1 = y * Math.sin(rotX) + z * Math.cos(rotX);\n\n      // Rotate around Y axis\n      let x2 = x * Math.cos(rotY) + z1 * Math.sin(rotY);\n      let z2 = -x * Math.sin(rotY) + z1 * Math.cos(rotY);\n\n      // Rotate around Z axis\n      let x3 = x2 * Math.cos(rotZ) - y1 * Math.sin(rotZ);\n      let y3 = x2 * Math.sin(rotZ) + y1 * Math.cos(rotZ);\n      return {\n        x: x3,\n        y: y3,\n        z: z2\n      };\n    }\n  };\n\n  // Add a new spectrum clock visualization\n  const drawClock = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawClock\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ffcc00';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const detail = (cachedParameters.detail || 50) / 50; // 0-1 detail\n    const speed = (cachedParameters.speed || 50) / 50; // 0-1 speed\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const radius = Math.min(centerX, centerY) * 0.85;\n\n    // Clear canvas with radial gradient background\n    const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, radius * 1.5);\n    gradient.addColorStop(0, 'rgb(10, 10, 10)');\n    gradient.addColorStop(1, 'rgb(0, 0, 0)');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw clock face\n    ctx.strokeStyle = adjustColor(color, -20);\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    ctx.stroke();\n\n    // Draw hour markers\n    ctx.fillStyle = color;\n    for (let i = 0; i < 12; i++) {\n      const angle = i / 12 * Math.PI * 2 - Math.PI / 2;\n      const markerRadius = radius * 0.9;\n      const x = centerX + Math.cos(angle) * markerRadius;\n      const y = centerY + Math.sin(angle) * markerRadius;\n      ctx.beginPath();\n      ctx.arc(x, y, 3, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Calculate frequency bands for clock hands\n    const bandCount = Math.floor(8 + detail * 16); // 8-24 bands\n    const hands = [];\n\n    // Calculate average energy for each frequency band\n    for (let i = 0; i < bandCount; i++) {\n      const startBin = Math.floor(i / bandCount * (bufferLength / 2));\n      const endBin = Math.floor((i + 1) / bandCount * (bufferLength / 2));\n      let sum = 0;\n      for (let j = startBin; j < endBin; j++) {\n        sum += dataArray[j] / 255.0;\n      }\n      const avgEnergy = sum / (endBin - startBin) * reactivity;\n\n      // Calculate hand properties\n      const baseLength = radius * (0.3 + i / bandCount * 0.6); // Shorter to longer\n      const length = baseLength * (0.5 + avgEnergy * 0.5); // Extend based on energy\n      const width = 1 + (bandCount - i) / bandCount * 4; // Thicker to thinner\n      const speed = 0.2 + i / bandCount * 0.8; // Slower to faster\n      const angle = i / bandCount * Math.PI * 2 + timeRef.current * speed * speed;\n      hands.push({\n        angle: angle,\n        length: length,\n        width: width,\n        energy: avgEnergy,\n        hue: i / bandCount * 360\n      });\n    }\n\n    // Draw clock hands\n    for (let i = 0; i < hands.length; i++) {\n      const hand = hands[i];\n\n      // Calculate hand position\n      const endX = centerX + Math.cos(hand.angle) * hand.length;\n      const endY = centerY + Math.sin(hand.angle) * hand.length;\n\n      // Create gradient for hand\n      const gradient = ctx.createLinearGradient(centerX, centerY, endX, endY);\n      gradient.addColorStop(0, adjustColor(color, -30));\n      gradient.addColorStop(1, adjustColor(color, hand.energy * 50));\n\n      // Draw hand\n      ctx.strokeStyle = gradient;\n      ctx.lineWidth = hand.width;\n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.lineTo(endX, endY);\n      ctx.stroke();\n\n      // Draw hand endpoint\n      ctx.fillStyle = adjustColor(color, hand.energy * 70);\n      ctx.beginPath();\n      ctx.arc(endX, endY, hand.width * 0.8, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Draw center circle\n    const centerGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, 10);\n    centerGradient.addColorStop(0, color);\n    centerGradient.addColorStop(1, adjustColor(color, -20));\n    ctx.fillStyle = centerGradient;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, 8, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw frequency spectrum around the clock\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = adjustColor(color, 10);\n    ctx.beginPath();\n    const spectrumRadius = radius * 1.1;\n    const spectrumWidth = radius * 0.1;\n    for (let i = 0; i < bufferLength / 4; i++) {\n      const angle = i / (bufferLength / 4) * Math.PI * 2 - Math.PI / 2;\n      const value = dataArray[i] / 255.0 * reactivity;\n      const innerRadius = spectrumRadius;\n      const outerRadius = spectrumRadius + value * spectrumWidth;\n      const x1 = centerX + Math.cos(angle) * innerRadius;\n      const y1 = centerY + Math.sin(angle) * innerRadius;\n      const x2 = centerX + Math.cos(angle) * outerRadius;\n      const y2 = centerY + Math.sin(angle) * outerRadius;\n      if (i === 0) {\n        ctx.moveTo(x2, y2);\n      } else {\n        ctx.lineTo(x2, y2);\n      }\n    }\n\n    // Close the spectrum path\n    ctx.closePath();\n    ctx.stroke();\n\n    // Fill the spectrum with a gradient\n    const spectrumGradient = ctx.createRadialGradient(centerX, centerY, spectrumRadius, centerX, centerY, spectrumRadius + spectrumWidth);\n    spectrumGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    const adjustedColor = adjustColor(color, 20);\n    spectrumGradient.addColorStop(1, adjustedColor.slice(0, 7) + '33'); // 20% opacity\n\n    ctx.fillStyle = spectrumGradient;\n    ctx.fill();\n  };\n  const drawNebula = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawNebula\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#4b0082'; // Deep purple default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const complexity = (cachedParameters.complexity || 50) / 50; // 0-1 complexity\n    const speed = (cachedParameters.speed || 50) / 100; // 0-0.5 speed\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Create a dark background with subtle gradient\n    const bgGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, Math.max(width, height));\n    bgGradient.addColorStop(0, 'rgba(5, 0, 10, 1)');\n    bgGradient.addColorStop(1, 'rgba(0, 0, 5, 1)');\n    ctx.fillStyle = bgGradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Calculate average energy in different frequency bands\n    const bassEnergy = getAverageEnergy(dataArray, 0, Math.floor(bufferLength * 0.1)) * reactivity;\n    const midEnergy = getAverageEnergy(dataArray, Math.floor(bufferLength * 0.1), Math.floor(bufferLength * 0.5)) * reactivity;\n    const highEnergy = getAverageEnergy(dataArray, Math.floor(bufferLength * 0.5), bufferLength) * reactivity;\n\n    // Core size based on bass energy\n    const coreSize = 50 + bassEnergy * 100;\n\n    // Draw nebula core\n    const coreGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, coreSize);\n    coreGradient.addColorStop(0, adjustColor(color, 50));\n    coreGradient.addColorStop(0.6, adjustColor(color, 20));\n    coreGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = coreGradient;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, coreSize, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Number of wisps based on complexity\n    const wispCount = Math.floor(10 + complexity * 30);\n\n    // Draw nebula wisps\n    for (let i = 0; i < wispCount; i++) {\n      // Use different frequency bands to affect different wisps\n      const energyFactor = i < wispCount / 3 ? bassEnergy : i < wispCount * 2 / 3 ? midEnergy : highEnergy;\n\n      // Base angle for this wisp\n      const baseAngle = i / wispCount * Math.PI * 2;\n      // Rotation based on time\n      const rotation = timeRef.current * speed * (1 + i % 3 * 0.2);\n      const angle = baseAngle + rotation;\n\n      // Wisp length based on energy\n      const length = 100 + energyFactor * 200 + Math.sin(timeRef.current + i) * 50;\n\n      // Wisp width varies\n      const width = 20 + i % 5 * 10 + energyFactor * 30;\n\n      // Wisp starting point (from core edge)\n      const startX = centerX + Math.cos(angle) * coreSize * 0.8;\n      const startY = centerY + Math.sin(angle) * coreSize * 0.8;\n\n      // Wisp end point\n      const endX = centerX + Math.cos(angle) * (coreSize + length);\n      const endY = centerY + Math.sin(angle) * (coreSize + length);\n\n      // Control points for curved wisp\n      const ctrlX1 = centerX + Math.cos(angle + 0.2) * (coreSize + length * 0.3);\n      const ctrlY1 = centerY + Math.sin(angle + 0.2) * (coreSize + length * 0.3);\n      const ctrlX2 = centerX + Math.cos(angle - 0.2) * (coreSize + length * 0.6);\n      const ctrlY2 = centerY + Math.sin(angle - 0.2) * (coreSize + length * 0.6);\n\n      // Wisp color based on position in spectrum\n      const hue = i / wispCount * 60 + 240; // Blue to purple range\n      const wispColor = `hsla(${hue}, 100%, ${50 + energyFactor * 30}%, ${0.2 + energyFactor * 0.3})`;\n\n      // Draw the wisp as a gradient along a bezier curve\n      const gradient = ctx.createLinearGradient(startX, startY, endX, endY);\n      gradient.addColorStop(0, adjustColor(color, 20) + '80'); // Semi-transparent\n      gradient.addColorStop(0.5, wispColor);\n      gradient.addColorStop(1, 'rgba(0, 0, 0, 0)'); // Fade out\n\n      ctx.strokeStyle = gradient;\n      ctx.lineWidth = width;\n      ctx.lineCap = 'round';\n\n      // Draw curved wisp\n      ctx.beginPath();\n      ctx.moveTo(startX, startY);\n      ctx.bezierCurveTo(ctrlX1, ctrlY1, ctrlX2, ctrlY2, endX, endY);\n      ctx.stroke();\n    }\n\n    // Add some stars in the background\n    const starCount = 100;\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    for (let i = 0; i < starCount; i++) {\n      // Star position based on index but with some variation over time\n      const angle = i / starCount * Math.PI * 2 + timeRef.current * 0.01;\n      const distance = 100 + i % 10 * 50 + Math.sin(timeRef.current * 0.2 + i) * 20;\n      const x = centerX + Math.cos(angle) * distance;\n      const y = centerY + Math.sin(angle) * distance;\n\n      // Star size pulsates with high frequencies\n      const size = 1 + dataArray[Math.floor(i / starCount * bufferLength)] / 255 * 2;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Reset composite operation\n    ctx.globalCompositeOperation = 'source-over';\n  };\n  const drawCityscape = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawCityscape\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ff9900'; // Orange default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const density = (cachedParameters.density || 50) / 50; // 0-1 density\n    const detail = (cachedParameters.detail || 50) / 50; // 0-1 detail\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n\n    // Create night sky gradient background\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, height);\n    skyGradient.addColorStop(0, 'rgb(0, 5, 20)');\n    skyGradient.addColorStop(1, 'rgb(20, 10, 40)');\n    ctx.fillStyle = skyGradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Add stars to the sky\n    const starCount = Math.floor(100 * detail);\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    for (let i = 0; i < starCount; i++) {\n      const x = Math.random() * width;\n      const y = Math.random() * height * 0.6; // Stars only in top 60% (sky)\n      const size = Math.random() * 2 + 0.5;\n\n      // Make stars twinkle based on high frequencies\n      const twinkle = 0.5 + dataArray[Math.floor(bufferLength * 0.8 + i % 20)] / 255 * 0.5;\n      ctx.globalAlpha = twinkle;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    ctx.globalAlpha = 1.0;\n\n    // Add a moon\n    const moonX = width * 0.8;\n    const moonY = height * 0.2;\n    const moonSize = width * 0.05;\n    const moonGlow = ctx.createRadialGradient(moonX, moonY, 0, moonX, moonY, moonSize * 2);\n    moonGlow.addColorStop(0, 'rgba(255, 255, 230, 1)');\n    moonGlow.addColorStop(0.5, 'rgba(255, 255, 230, 0.3)');\n    moonGlow.addColorStop(1, 'rgba(255, 255, 230, 0)');\n    ctx.fillStyle = moonGlow;\n    ctx.beginPath();\n    ctx.arc(moonX, moonY, moonSize * 2, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.fillStyle = 'rgba(255, 255, 230, 1)';\n    ctx.beginPath();\n    ctx.arc(moonX, moonY, moonSize, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Calculate frequency bands for buildings\n    const bandCount = Math.floor(20 + density * 60); // 20-80 buildings\n    const buildings = [];\n\n    // Calculate average energy for each frequency band\n    for (let i = 0; i < bandCount; i++) {\n      const startBin = Math.floor(i / bandCount * (bufferLength / 2));\n      const endBin = Math.floor((i + 1) / bandCount * (bufferLength / 2));\n      const energy = getAverageEnergy(dataArray, startBin, endBin) * reactivity;\n\n      // Building properties\n      const buildingWidth = width / bandCount;\n      const maxHeight = height * 0.7; // Max 70% of screen height\n      const buildingHeight = (0.1 + energy * 0.9) * maxHeight; // Min 10% height\n\n      // Building position\n      const x = i * buildingWidth;\n      const y = height - buildingHeight;\n\n      // Building color based on height (taller = brighter)\n      const brightness = 20 + buildingHeight / maxHeight * 60;\n      const buildingColor = adjustColor(color, brightness - 40);\n      buildings.push({\n        x,\n        y,\n        width: buildingWidth,\n        height: buildingHeight,\n        color: buildingColor,\n        energy\n      });\n    }\n\n    // Draw buildings from back to front\n    buildings.forEach((building, i) => {\n      // Draw main building shape\n      ctx.fillStyle = building.color;\n      ctx.fillRect(building.x, building.y, building.width, building.height);\n\n      // Add building details based on detail parameter\n      if (detail > 0.3) {\n        // Add windows\n        const windowSize = Math.max(3, building.width * 0.15);\n        const windowSpacing = windowSize * 1.5;\n        const windowsPerRow = Math.floor(building.width / windowSpacing);\n        const windowsPerColumn = Math.floor(building.height / windowSpacing);\n\n        // Window color based on energy (more energy = more lit windows)\n        const windowAlpha = 0.3 + building.energy * 0.7;\n        const windowColor = `rgba(255, 255, 200, ${windowAlpha})`;\n        ctx.fillStyle = windowColor;\n        for (let row = 0; row < windowsPerColumn; row++) {\n          for (let col = 0; col < windowsPerRow; col++) {\n            // Randomly light up windows based on energy\n            if (Math.random() < 0.2 + building.energy * 0.8) {\n              const windowX = building.x + col * windowSpacing + (windowSpacing - windowSize) / 2;\n              const windowY = building.y + row * windowSpacing + (windowSpacing - windowSize) / 2;\n              ctx.fillRect(windowX, windowY, windowSize, windowSize);\n            }\n          }\n        }\n\n        // Add building top details for taller buildings\n        if (building.height > maxHeight * 0.4 && detail > 0.6) {\n          // Antenna or spire\n          ctx.strokeStyle = 'rgba(100, 100, 100, 0.7)';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          const antennaX = building.x + building.width / 2;\n          const antennaHeight = building.height * 0.2;\n          ctx.moveTo(antennaX, building.y);\n          ctx.lineTo(antennaX, building.y - antennaHeight);\n          ctx.stroke();\n\n          // Blinking light on top that pulses with beat\n          const beatEnergy = getAverageEnergy(dataArray, 0, 10) * reactivity;\n          if (beatEnergy > 0.7 || Math.sin(timeRef.current * 2) > 0.7) {\n            ctx.fillStyle = 'rgba(255, 0, 0, 0.8)';\n            ctx.beginPath();\n            ctx.arc(antennaX, building.y - antennaHeight, 3, 0, Math.PI * 2);\n            ctx.fill();\n          }\n        }\n      }\n    });\n\n    // Add foreground silhouette\n    const foregroundHeight = height * 0.05;\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, height - foregroundHeight, width, foregroundHeight);\n  };\n  const drawWaterfall = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawWaterfall\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#00ccff'; // Cyan default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const speed = (cachedParameters.speed || 50) / 50; // 0-1 speed\n    const detail = (cachedParameters.detail || 50) / 50; // 0-1 detail\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n\n    // Initialize waterfall history if it doesn't exist\n    if (!window.waterfallHistory) {\n      window.waterfallHistory = [];\n      for (let i = 0; i < height; i++) {\n        window.waterfallHistory.push(new Uint8Array(bufferLength));\n      }\n    }\n\n    // Update waterfall history - shift all rows down\n    if (Math.random() < speed * 0.2 + 0.1) {\n      // Control speed of waterfall\n      for (let i = window.waterfallHistory.length - 1; i > 0; i--) {\n        window.waterfallHistory[i] = window.waterfallHistory[i - 1];\n      }\n\n      // Add new data at the top\n      window.waterfallHistory[0] = new Uint8Array(dataArray);\n    }\n\n    // Create a dark blue background\n    const bgGradient = ctx.createLinearGradient(0, 0, 0, height);\n    bgGradient.addColorStop(0, 'rgb(0, 10, 30)');\n    bgGradient.addColorStop(1, 'rgb(0, 5, 15)');\n    ctx.fillStyle = bgGradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw the waterfall\n    const barWidth = width / bufferLength;\n    const barCount = Math.min(bufferLength, Math.floor(width / 2)); // Limit for performance\n    const skipFactor = Math.floor(bufferLength / barCount);\n\n    // Draw each row of the waterfall\n    for (let row = 0; row < window.waterfallHistory.length; row++) {\n      const rowData = window.waterfallHistory[row];\n      for (let i = 0; i < barCount; i++) {\n        const dataIndex = i * skipFactor;\n        const value = rowData[dataIndex] / 255.0 * reactivity;\n        if (value < 0.05) continue; // Skip very low values for performance\n\n        // Calculate position\n        const x = i * barWidth * skipFactor;\n        const y = row;\n\n        // Color based on frequency and intensity\n        const hue = i / barCount * 180 + 180; // Blue to cyan range\n        const saturation = 80 + value * 20;\n        const lightness = value * 60;\n        const alpha = 0.3 + value * 0.7;\n        ctx.fillStyle = `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\n        ctx.fillRect(x, y, barWidth * skipFactor, 1);\n      }\n    }\n\n    // Draw water surface at the top with reflection\n    const surfaceY = 50;\n    ctx.fillStyle = 'rgba(0, 150, 255, 0.2)';\n    ctx.fillRect(0, 0, width, surfaceY);\n\n    // Draw ripples on the surface based on bass frequencies\n    const rippleCount = Math.floor(5 + detail * 15);\n    const bassEnergy = getAverageEnergy(dataArray, 0, Math.floor(bufferLength * 0.1)) * reactivity;\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n    ctx.lineWidth = 1;\n    for (let i = 0; i < rippleCount; i++) {\n      if (Math.random() > bassEnergy * 0.5) continue;\n      const x = Math.random() * width;\n      const y = Math.random() * surfaceY;\n      const size = 5 + Math.random() * 20 * bassEnergy;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.stroke();\n\n      // Smaller inner ripple\n      ctx.beginPath();\n      ctx.arc(x, y, size * 0.7, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    // Draw splashes when bass hits are detected\n    if (bassEnergy > 0.7) {\n      const splashCount = Math.floor(bassEnergy * 10);\n      for (let i = 0; i < splashCount; i++) {\n        // Create splash particles\n        const x = Math.random() * width;\n        const particleCount = Math.floor(5 + Math.random() * 10);\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n        for (let j = 0; j < particleCount; j++) {\n          const particleX = x + (Math.random() - 0.5) * 40;\n          const particleY = Math.random() * 30;\n          const size = 1 + Math.random() * 3;\n          ctx.beginPath();\n          ctx.arc(particleX, particleY, size, 0, Math.PI * 2);\n          ctx.fill();\n        }\n      }\n    }\n\n    // Draw waterfall edge highlights\n    const edgeGradient = ctx.createLinearGradient(0, surfaceY, 0, height);\n    edgeGradient.addColorStop(0, 'rgba(255, 255, 255, 0.4)');\n    edgeGradient.addColorStop(0.1, 'rgba(255, 255, 255, 0.1)');\n    edgeGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n    ctx.fillStyle = edgeGradient;\n    ctx.fillRect(0, surfaceY, 10, height - surfaceY); // Left edge\n    ctx.fillRect(width - 10, surfaceY, 10, height - surfaceY); // Right edge\n\n    // Draw mist at the bottom\n    const mistGradient = ctx.createLinearGradient(0, height - 100, 0, height);\n    mistGradient.addColorStop(0, 'rgba(255, 255, 255, 0)');\n    mistGradient.addColorStop(1, 'rgba(255, 255, 255, 0.2)');\n    ctx.fillStyle = mistGradient;\n    ctx.fillRect(0, height - 100, width, 100);\n  };\n  const drawConstellation = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawConstellation\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ffffff'; // White default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const density = (cachedParameters.density || 50) / 50; // 0-1 density\n    const speed = (cachedParameters.speed || 50) / 100; // 0-0.5 speed\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n\n    // Create a dark space background\n    const bgGradient = ctx.createRadialGradient(width / 2, height / 2, 0, width / 2, height / 2, Math.max(width, height));\n    bgGradient.addColorStop(0, 'rgb(10, 10, 30)');\n    bgGradient.addColorStop(1, 'rgb(0, 0, 10)');\n    ctx.fillStyle = bgGradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Initialize stars if they don't exist\n    if (!window.constellationStars) {\n      window.constellationStars = [];\n      const starCount = Math.floor(50 + density * 150); // 50-200 stars\n\n      for (let i = 0; i < starCount; i++) {\n        // Assign each star to a frequency band\n        const freqBand = Math.floor(Math.random() * bufferLength);\n        window.constellationStars.push({\n          x: Math.random() * width,\n          y: Math.random() * height,\n          size: 1 + Math.random() * 3,\n          brightness: 0.3 + Math.random() * 0.7,\n          freqBand: freqBand,\n          hue: Math.random() * 60 + 180,\n          // Blue to cyan range\n          connections: []\n        });\n      }\n    }\n\n    // Update star positions slightly based on time\n    const stars = window.constellationStars;\n    const rotationCenter = {\n      x: width / 2,\n      y: height / 2\n    };\n    const rotationSpeed = speed * 0.01;\n    for (let i = 0; i < stars.length; i++) {\n      const star = stars[i];\n\n      // Calculate distance from center\n      const dx = star.x - rotationCenter.x;\n      const dy = star.y - rotationCenter.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      // Calculate rotation angle (further stars rotate slower)\n      const rotationFactor = 1 - distance / Math.max(width, height);\n      const angle = rotationSpeed * rotationFactor;\n\n      // Apply rotation\n      const cos = Math.cos(angle);\n      const sin = Math.sin(angle);\n      const newX = rotationCenter.x + (dx * cos - dy * sin);\n      const newY = rotationCenter.y + (dx * sin + dy * cos);\n\n      // Keep stars within bounds\n      star.x = Math.max(0, Math.min(width, newX));\n      star.y = Math.max(0, Math.min(height, newY));\n\n      // Update star brightness based on its frequency band\n      const freqValue = dataArray[star.freqBand] / 255.0;\n      star.brightness = 0.3 + freqValue * reactivity * 0.7;\n    }\n\n    // Find connections between stars based on audio patterns\n    const maxConnections = Math.floor(density * 100); // Maximum number of connections\n    const connectionThreshold = 150 * (1 - density * 0.5); // Distance threshold for connections\n\n    // Clear previous connections\n    stars.forEach(star => star.connections = []);\n\n    // Find new connections\n    let connectionCount = 0;\n    for (let i = 0; i < stars.length && connectionCount < maxConnections; i++) {\n      const star1 = stars[i];\n      for (let j = i + 1; j < stars.length && connectionCount < maxConnections; j++) {\n        const star2 = stars[j];\n\n        // Calculate distance between stars\n        const dx = star1.x - star2.x;\n        const dy = star1.y - star2.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        // Connect stars if they're close enough and their frequencies are related\n        const freqDiff = Math.abs(star1.freqBand - star2.freqBand);\n        const rhythmicPattern = timeRef.current * 2 % 1 < 0.5; // Simple rhythm pattern\n\n        if (distance < connectionThreshold && (freqDiff < 10 || freqDiff > bufferLength - 10 || rhythmicPattern)) {\n          // Calculate connection strength based on audio energy\n          const freqAvg = (dataArray[star1.freqBand] + dataArray[star2.freqBand]) / (2 * 255);\n          const strength = 0.1 + freqAvg * reactivity * 0.9;\n          if (strength > 0.2) {\n            // Only connect if there's enough energy\n            star1.connections.push({\n              star: star2,\n              strength\n            });\n            connectionCount++;\n          }\n        }\n      }\n    }\n\n    // Draw connections first (behind stars)\n    ctx.lineCap = 'round';\n    stars.forEach(star => {\n      star.connections.forEach(conn => {\n        const gradient = ctx.createLinearGradient(star.x, star.y, conn.star.x, conn.star.y);\n\n        // Create gradient based on star colors\n        const color1 = `hsla(${star.hue}, 100%, 70%, ${conn.strength})`;\n        const color2 = `hsla(${conn.star.hue}, 100%, 70%, ${conn.strength})`;\n        gradient.addColorStop(0, color1);\n        gradient.addColorStop(1, color2);\n        ctx.strokeStyle = gradient;\n        ctx.lineWidth = 1 + conn.strength * 2;\n        ctx.beginPath();\n        ctx.moveTo(star.x, star.y);\n        ctx.lineTo(conn.star.x, conn.star.y);\n        ctx.stroke();\n      });\n    });\n\n    // Draw stars\n    stars.forEach(star => {\n      // Star color based on frequency\n      const freqValue = dataArray[star.freqBand] / 255.0;\n      const starColor = `hsla(${star.hue}, 100%, 70%, ${star.brightness})`;\n\n      // Draw star glow\n      const glowSize = star.size * (1 + freqValue * reactivity * 3);\n      const glow = ctx.createRadialGradient(star.x, star.y, 0, star.x, star.y, glowSize);\n      glow.addColorStop(0, starColor);\n      glow.addColorStop(1, 'rgba(0, 0, 0, 0)');\n      ctx.fillStyle = glow;\n      ctx.beginPath();\n      ctx.arc(star.x, star.y, glowSize, 0, Math.PI * 2);\n      ctx.fill();\n\n      // Draw star core\n      ctx.fillStyle = 'rgba(255, 255, 255, ' + star.brightness + ')';\n      ctx.beginPath();\n      ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n      ctx.fill();\n    });\n\n    // Draw constellation names occasionally\n    if (Math.random() < 0.005) {\n      const constellationNames = ['Audionis', 'Beatoria', 'Rhythmica', 'Melodius', 'Harmonix', 'Synthus', 'Bassus Major', 'Treble Minor'];\n      const name = constellationNames[Math.floor(Math.random() * constellationNames.length)];\n      const x = 100 + Math.random() * (width - 200);\n      const y = 100 + Math.random() * (height - 200);\n      ctx.font = '20px Arial';\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\n      ctx.fillText(name, x, y);\n    }\n  };\n  const drawMandala = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawMandala\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ff00ff'; // Magenta default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const complexity = (cachedParameters.complexity || 50) / 50; // 0-1 complexity\n    const speed = (cachedParameters.speed || 50) / 100; // 0-0.5 speed\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Create a dark background with subtle gradient\n    const bgGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, Math.max(width, height) / 2);\n    bgGradient.addColorStop(0, 'rgb(10, 0, 20)');\n    bgGradient.addColorStop(1, 'rgb(0, 0, 10)');\n    ctx.fillStyle = bgGradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Calculate average energy in different frequency bands\n    const bandCount = Math.floor(4 + complexity * 12); // 4-16 bands\n    const energyBands = [];\n    for (let i = 0; i < bandCount; i++) {\n      const startBin = Math.floor(i / bandCount * (bufferLength / 2));\n      const endBin = Math.floor((i + 1) / bandCount * (bufferLength / 2));\n      energyBands.push(getAverageEnergy(dataArray, startBin, endBin) * reactivity);\n    }\n\n    // Calculate overall energy for scaling the mandala\n    const overallEnergy = energyBands.reduce((sum, energy) => sum + energy, 0) / bandCount;\n\n    // Base radius of the mandala\n    const baseRadius = Math.min(width, height) * 0.35;\n    const radius = baseRadius * (0.8 + overallEnergy * 0.4);\n\n    // Number of symmetry axes\n    const symmetryCount = Math.floor(4 + complexity * 12); // 4-16 symmetry axes\n\n    // Draw the mandala layers from outside to inside\n    const layerCount = Math.floor(3 + complexity * 7); // 3-10 layers\n\n    for (let layer = 0; layer < layerCount; layer++) {\n      // Layer properties\n      const layerRadius = radius * (1 - layer / layerCount * 0.8);\n      const layerEnergy = energyBands[layer % bandCount];\n      const layerRotation = timeRef.current * speed * (1 + layer * 0.1) + layer * Math.PI / layerCount;\n\n      // Layer color based on position and energy\n      const hue = layer / layerCount * 300 + timeRef.current * 10;\n      const saturation = 80 + layerEnergy * 20;\n      const lightness = 40 + layerEnergy * 30;\n      const layerColor = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n\n      // Draw the layer elements\n      ctx.strokeStyle = layerColor;\n      ctx.fillStyle = adjustColor(layerColor, -20);\n\n      // Element complexity increases with layer\n      const elementComplexity = 0.2 + layer / layerCount * 0.8 * complexity;\n\n      // Draw symmetrical elements\n      for (let i = 0; i < symmetryCount; i++) {\n        const angle = i / symmetryCount * Math.PI * 2 + layerRotation;\n\n        // Draw petal/element\n        drawMandalaElement(ctx, centerX, centerY, angle, layerRadius, layerEnergy, elementComplexity, layer, symmetryCount);\n      }\n\n      // Draw connecting circles between layers\n      if (layer > 0 && layer < layerCount - 1) {\n        const circleRadius = layerRadius * (0.1 + layerEnergy * 0.1);\n        ctx.lineWidth = 1 + layerEnergy * 3;\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, layerRadius, 0, Math.PI * 2);\n        ctx.stroke();\n      }\n    }\n\n    // Draw central mandala element\n    const centerSize = radius * 0.2 * (0.8 + overallEnergy * 0.4);\n    const centerGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, centerSize);\n    centerGradient.addColorStop(0, adjustColor(color, 30));\n    centerGradient.addColorStop(0.7, adjustColor(color, 10));\n    centerGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n    ctx.fillStyle = centerGradient;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, centerSize, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw sacred geometry in the center\n    ctx.strokeStyle = adjustColor(color, 50);\n    ctx.lineWidth = 1;\n\n    // Draw flower of life pattern\n    const flowerRadius = centerSize * 0.6;\n    const petalCount = Math.floor(6 + overallEnergy * 6);\n    for (let i = 0; i < petalCount; i++) {\n      const angle = i / petalCount * Math.PI * 2 + timeRef.current * speed;\n      const x = centerX + Math.cos(angle) * flowerRadius * 0.5;\n      const y = centerY + Math.sin(angle) * flowerRadius * 0.5;\n      ctx.beginPath();\n      ctx.arc(x, y, flowerRadius * 0.5, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    // Function to draw a single mandala element\n    function drawMandalaElement(ctx, centerX, centerY, angle, radius, energy, complexity, layer, symmetryCount) {\n      // Calculate element position\n      const x = centerX + Math.cos(angle) * radius;\n      const y = centerY + Math.sin(angle) * radius;\n\n      // Element size based on energy\n      const size = radius * 0.2 * (0.5 + energy * 0.8);\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(angle + Math.PI / 2);\n\n      // Choose element type based on layer\n      const elementType = layer % 4;\n      ctx.lineWidth = 1 + energy * 2;\n      switch (elementType) {\n        case 0:\n          // Petal shape\n          ctx.beginPath();\n          ctx.moveTo(0, -size);\n          ctx.bezierCurveTo(size * complexity, -size * 0.5, size * complexity, size * 0.5, 0, size);\n          ctx.bezierCurveTo(-size * complexity, size * 0.5, -size * complexity, -size * 0.5, 0, -size);\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case 1:\n          // Triangular element\n          ctx.beginPath();\n          ctx.moveTo(0, -size);\n          ctx.lineTo(size * 0.7 * complexity, size * 0.5);\n          ctx.lineTo(-size * 0.7 * complexity, size * 0.5);\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case 2:\n          // Circular element\n          ctx.beginPath();\n          ctx.arc(0, 0, size * 0.5, 0, Math.PI * 2);\n          ctx.fill();\n          ctx.stroke();\n\n          // Add inner detail\n          if (complexity > 0.5) {\n            ctx.beginPath();\n            ctx.arc(0, 0, size * 0.25, 0, Math.PI * 2);\n            ctx.stroke();\n          }\n          break;\n        case 3:\n          // Spiral element\n          ctx.beginPath();\n          for (let i = 0; i < Math.PI * 2 * complexity; i += 0.1) {\n            const spiralRadius = i / (Math.PI * 2) * size;\n            const sx = Math.cos(i) * spiralRadius;\n            const sy = Math.sin(i) * spiralRadius;\n            if (i === 0) {\n              ctx.moveTo(sx, sy);\n            } else {\n              ctx.lineTo(sx, sy);\n            }\n          }\n          ctx.stroke();\n          break;\n      }\n      ctx.restore();\n    }\n  };\n  const drawOcean = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawOcean\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#0066cc'; // Ocean blue default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const detail = (cachedParameters.detail || 50) / 50; // 0-1 detail\n    const speed = (cachedParameters.speed || 50) / 100; // 0-0.5 speed\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n\n    // Initialize wave points if they don't exist\n    if (!window.oceanWaves) {\n      window.oceanWaves = [];\n      const waveCount = 5; // Number of wave layers\n\n      for (let w = 0; w < waveCount; w++) {\n        const pointCount = Math.floor(20 + detail * 60); // 20-80 points per wave\n        const points = [];\n        for (let i = 0; i <= pointCount; i++) {\n          points.push({\n            x: i / pointCount * width,\n            y: height * (0.5 + w * 0.1),\n            // Stagger waves vertically\n            baseY: height * (0.5 + w * 0.1),\n            offset: Math.random() * Math.PI * 2\n          });\n        }\n        window.oceanWaves.push({\n          points,\n          speed: 0.5 + w / waveCount * 0.5,\n          // Different speeds for each wave\n          amplitude: 10 + (waveCount - w) * 5,\n          // Different amplitudes (higher for foreground)\n          color: adjustColor(color, -w * 10) // Darker for background waves\n        });\n      }\n    }\n\n    // Create sky gradient\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, height * 0.5);\n\n    // Get bass and mid frequencies for sky color\n    const bassEnergy = getAverageEnergy(dataArray, 0, Math.floor(bufferLength * 0.1)) * reactivity;\n    const midEnergy = getAverageEnergy(dataArray, Math.floor(bufferLength * 0.1), Math.floor(bufferLength * 0.5)) * reactivity;\n\n    // Sky colors change with audio\n    const skyTopColor = `rgb(${20 + bassEnergy * 50}, ${100 + midEnergy * 50}, ${180 + bassEnergy * 20})`;\n    const skyBottomColor = `rgb(${100 + midEnergy * 30}, ${150 + bassEnergy * 30}, ${200 + midEnergy * 20})`;\n    skyGradient.addColorStop(0, skyTopColor);\n    skyGradient.addColorStop(1, skyBottomColor);\n\n    // Fill sky\n    ctx.fillStyle = skyGradient;\n    ctx.fillRect(0, 0, width, height * 0.5);\n\n    // Draw sun/moon\n    const celestialSize = width * 0.08;\n    const celestialX = width * 0.8;\n    const celestialY = height * 0.2;\n\n    // Sun/moon color based on audio\n    const celestialColor = `rgba(${255 - bassEnergy * 50}, ${255 - bassEnergy * 20}, ${220 - bassEnergy * 20}, 0.8)`;\n\n    // Draw glow\n    const glowGradient = ctx.createRadialGradient(celestialX, celestialY, 0, celestialX, celestialY, celestialSize * 2);\n    glowGradient.addColorStop(0, celestialColor);\n    glowGradient.addColorStop(1, 'rgba(255, 255, 220, 0)');\n    ctx.fillStyle = glowGradient;\n    ctx.beginPath();\n    ctx.arc(celestialX, celestialY, celestialSize * 2, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw sun/moon body\n    ctx.fillStyle = celestialColor;\n    ctx.beginPath();\n    ctx.arc(celestialX, celestialY, celestialSize, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw clouds if detail is high enough\n    if (detail > 0.4) {\n      const cloudCount = Math.floor(3 + detail * 7); // 3-10 clouds\n\n      for (let i = 0; i < cloudCount; i++) {\n        // Cloud position\n        const cloudX = i / cloudCount * width * 1.5 % (width * 1.2) - width * 0.1 + timeRef.current * speed * 20 % width;\n        const cloudY = height * (0.1 + Math.sin(i) * 0.1);\n        const cloudSize = width * (0.05 + i % 3 * 0.03);\n\n        // Cloud color affected by audio\n        const cloudOpacity = 0.7 + midEnergy * 0.3;\n        ctx.fillStyle = `rgba(255, 255, 255, ${cloudOpacity})`;\n\n        // Draw cloud as a group of circles\n        for (let j = 0; j < 5; j++) {\n          const offsetX = (j - 2) * cloudSize * 0.5;\n          const offsetY = Math.sin(j * 1.5) * cloudSize * 0.2;\n          const size = cloudSize * (0.7 + Math.sin(j) * 0.3);\n          ctx.beginPath();\n          ctx.arc(cloudX + offsetX, cloudY + offsetY, size, 0, Math.PI * 2);\n          ctx.fill();\n        }\n      }\n    }\n\n    // Update and draw waves\n    const waves = window.oceanWaves;\n\n    // Calculate frequency bands for wave modulation\n    const bandCount = waves.length;\n    const energyBands = [];\n    for (let i = 0; i < bandCount; i++) {\n      const startBin = Math.floor(i / bandCount * (bufferLength / 2));\n      const endBin = Math.floor((i + 1) / bandCount * (bufferLength / 2));\n      energyBands.push(getAverageEnergy(dataArray, startBin, endBin) * reactivity);\n    }\n\n    // Create ocean base gradient\n    const oceanGradient = ctx.createLinearGradient(0, height * 0.5, 0, height);\n    oceanGradient.addColorStop(0, adjustColor(color, 20));\n    oceanGradient.addColorStop(1, adjustColor(color, -30));\n\n    // Fill ocean base\n    ctx.fillStyle = oceanGradient;\n    ctx.fillRect(0, height * 0.5, width, height * 0.5);\n\n    // Update and draw each wave\n    for (let w = 0; w < waves.length; w++) {\n      const wave = waves[w];\n      const energy = energyBands[w % energyBands.length];\n\n      // Update wave points\n      for (let i = 0; i < wave.points.length; i++) {\n        const point = wave.points[i];\n\n        // Wave motion: combination of time, position, and audio reactivity\n        const waveTime = timeRef.current * speed * wave.speed;\n        const wavePos = i / wave.points.length * Math.PI * 10 + point.offset;\n\n        // Primary wave motion\n        const baseWave = Math.sin(waveTime + wavePos) * wave.amplitude;\n\n        // Secondary choppiness based on audio\n        const choppiness = Math.sin(waveTime * 2 + wavePos * 2) * wave.amplitude * 0.3 * energy;\n\n        // Update point position\n        point.y = point.baseY + baseWave + choppiness;\n      }\n\n      // Draw the wave\n      ctx.fillStyle = wave.color;\n      ctx.beginPath();\n      ctx.moveTo(0, height);\n      ctx.lineTo(wave.points[0].x, wave.points[0].y);\n\n      // Draw wave using bezier curves for smoothness\n      for (let i = 0; i < wave.points.length - 1; i++) {\n        const current = wave.points[i];\n        const next = wave.points[i + 1];\n\n        // Control points for bezier curve\n        const cpX1 = current.x + (next.x - current.x) / 3;\n        const cpY1 = current.y;\n        const cpX2 = current.x + (next.x - current.x) * 2 / 3;\n        const cpY2 = next.y;\n        ctx.bezierCurveTo(cpX1, cpY1, cpX2, cpY2, next.x, next.y);\n      }\n\n      // Complete the wave shape\n      ctx.lineTo(width, height);\n      ctx.closePath();\n      ctx.fill();\n\n      // Add foam/highlights to wave crests if detail is high enough\n      if (detail > 0.6 && w < 2) {\n        // Only for top waves\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.lineWidth = 2;\n        for (let i = 0; i < wave.points.length - 1; i++) {\n          const point = wave.points[i];\n          const nextPoint = wave.points[i + 1];\n\n          // Only add foam to wave peaks\n          if (i > 0) {\n            const prevPoint = wave.points[i - 1];\n\n            // Check if this is a peak (higher than neighbors)\n            if (point.y < prevPoint.y && point.y < nextPoint.y) {\n              // Foam intensity based on how sharp the peak is and audio energy\n              const peakSharpness = Math.min(Math.abs(point.y - prevPoint.y), Math.abs(point.y - nextPoint.y));\n              if (peakSharpness > wave.amplitude * 0.3 * energy) {\n                // Draw foam as small arcs\n                ctx.beginPath();\n                ctx.arc(point.x, point.y, peakSharpness * 0.5, 0, Math.PI);\n                ctx.stroke();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Add reflections on the water\n    if (detail > 0.3) {\n      // Sun/moon reflection\n      const reflectionGradient = ctx.createLinearGradient(celestialX, height * 0.5, celestialX, height * 0.7);\n      reflectionGradient.addColorStop(0, `rgba(255, 255, 220, ${0.3 + bassEnergy * 0.2})`);\n      reflectionGradient.addColorStop(1, 'rgba(255, 255, 220, 0)');\n      ctx.fillStyle = reflectionGradient;\n      ctx.beginPath();\n      ctx.moveTo(celestialX - celestialSize, height * 0.5);\n      ctx.lineTo(celestialX + celestialSize, height * 0.5);\n      ctx.lineTo(celestialX + celestialSize * 2, height * 0.7);\n      ctx.lineTo(celestialX - celestialSize * 2, height * 0.7);\n      ctx.closePath();\n      ctx.fill();\n    }\n  };\n  const drawDNA = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawDNA\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#00ff99'; // Teal default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const detail = (cachedParameters.detail || 50) / 50; // 0-1 detail\n    const speed = (cachedParameters.speed || 50) / 50; // 0-1 speed\n\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n\n    // Create a dark background with subtle gradient\n    const bgGradient = ctx.createLinearGradient(0, 0, 0, height);\n    bgGradient.addColorStop(0, 'rgb(0, 10, 20)');\n    bgGradient.addColorStop(1, 'rgb(0, 5, 10)');\n    ctx.fillStyle = bgGradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Calculate frequency bands for DNA modulation\n    const bandCount = Math.floor(10 + detail * 20); // 10-30 bands\n    const energyBands = [];\n    for (let i = 0; i < bandCount; i++) {\n      const startBin = Math.floor(i / bandCount * (bufferLength / 2));\n      const endBin = Math.floor((i + 1) / bandCount * (bufferLength / 2));\n      energyBands.push(getAverageEnergy(dataArray, startBin, endBin) * reactivity);\n    }\n\n    // DNA helix parameters\n    const dnaLength = height * 1.5; // Length of the DNA strand\n    const dnaWidth = width * 0.15; // Width of the DNA helix\n    const dnaSegments = Math.floor(20 + detail * 60); // Number of segments in the DNA\n    const dnaRotation = timeRef.current * speed; // Rotation of the DNA over time\n\n    // Calculate overall energy for DNA animation\n    const overallEnergy = energyBands.reduce((sum, energy) => sum + energy, 0) / bandCount;\n\n    // Vertical offset to center the DNA\n    const verticalOffset = (height - dnaLength) / 2;\n\n    // Draw the DNA strands\n    for (let strand = 0; strand < 2; strand++) {\n      // Each strand has a different color\n      const strandColor = strand === 0 ? color : adjustColor(color, 40);\n\n      // Draw the strand backbone\n      ctx.strokeStyle = adjustColor(strandColor, -20);\n      ctx.lineWidth = 4;\n      ctx.beginPath();\n      for (let i = 0; i <= dnaSegments; i++) {\n        const progress = i / dnaSegments;\n        const y = verticalOffset + progress * dnaLength;\n\n        // Sine wave for the strand, offset by PI for the second strand\n        const phase = strand * Math.PI;\n        const waveAmplitude = dnaWidth * (0.8 + overallEnergy * 0.4);\n        const x = centerX + Math.sin(progress * Math.PI * 10 + dnaRotation + phase) * waveAmplitude;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      ctx.stroke();\n    }\n\n    // Draw the base pairs (connections between strands)\n    for (let i = 0; i < dnaSegments; i++) {\n      const progress = i / dnaSegments;\n      const y = verticalOffset + progress * dnaLength;\n\n      // Get the energy for this segment\n      const energy = energyBands[i % bandCount];\n\n      // Calculate positions of the two strand points at this segment\n      const phase1 = 0;\n      const phase2 = Math.PI;\n      const waveAmplitude = dnaWidth * (0.8 + overallEnergy * 0.4);\n      const x1 = centerX + Math.sin(progress * Math.PI * 10 + dnaRotation + phase1) * waveAmplitude;\n      const x2 = centerX + Math.sin(progress * Math.PI * 10 + dnaRotation + phase2) * waveAmplitude;\n\n      // Only draw base pairs at certain intervals\n      if (i % 2 === 0) {\n        // Base pair color based on frequency band\n        const hue = i / dnaSegments * 180 + 180; // Cyan to blue range\n        const basePairColor = `hsla(${hue}, 100%, 70%, ${0.5 + energy * 0.5})`;\n\n        // Draw base pair connection\n        ctx.strokeStyle = basePairColor;\n        ctx.lineWidth = 2 + energy * 4;\n        ctx.beginPath();\n        ctx.moveTo(x1, y);\n        ctx.lineTo(x2, y);\n        ctx.stroke();\n\n        // Draw nucleotide bases at the ends of the connection\n        const baseSize = 3 + energy * 5;\n\n        // Base 1\n        ctx.fillStyle = adjustColor(color, 20);\n        ctx.beginPath();\n        ctx.arc(x1, y, baseSize, 0, Math.PI * 2);\n        ctx.fill();\n\n        // Base 2\n        ctx.fillStyle = adjustColor(color, 60);\n        ctx.beginPath();\n        ctx.arc(x2, y, baseSize, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n\n    // Add glow effect to the DNA\n    if (detail > 0.5) {\n      ctx.globalCompositeOperation = 'lighter';\n\n      // Draw glow along the DNA strands\n      for (let i = 0; i < dnaSegments; i += 4) {\n        const progress = i / dnaSegments;\n        const y = verticalOffset + progress * dnaLength;\n\n        // Get the energy for this segment\n        const energy = energyBands[i % bandCount];\n\n        // Only add glow if there's enough energy\n        if (energy > 0.5) {\n          // Calculate position on the DNA\n          const phase = i % 2 * Math.PI; // Alternate between strands\n          const waveAmplitude = dnaWidth * (0.8 + overallEnergy * 0.4);\n          const x = centerX + Math.sin(progress * Math.PI * 10 + dnaRotation + phase) * waveAmplitude;\n\n          // Glow size based on energy\n          const glowSize = 20 + energy * 30;\n\n          // Glow color\n          const hue = i / dnaSegments * 180 + 180;\n          const glowColor = `hsla(${hue}, 100%, 70%, ${energy * 0.3})`;\n\n          // Draw glow\n          const glow = ctx.createRadialGradient(x, y, 0, x, y, glowSize);\n          glow.addColorStop(0, glowColor);\n          glow.addColorStop(1, 'rgba(0, 0, 0, 0)');\n          ctx.fillStyle = glow;\n          ctx.beginPath();\n          ctx.arc(x, y, glowSize, 0, Math.PI * 2);\n          ctx.fill();\n        }\n      }\n      ctx.globalCompositeOperation = 'source-over';\n    }\n\n    // Add floating particles around the DNA if detail is high\n    if (detail > 0.7) {\n      const particleCount = Math.floor(20 + detail * 60);\n      for (let i = 0; i < particleCount; i++) {\n        // Particle position - keep near the DNA\n        const angle = Math.random() * Math.PI * 2;\n        const distance = dnaWidth * 2 + Math.random() * width * 0.2;\n        const x = centerX + Math.cos(angle) * distance;\n        const y = Math.random() * height;\n\n        // Particle size based on audio\n        const particleEnergy = energyBands[i % bandCount];\n        const size = 1 + particleEnergy * 3;\n\n        // Particle color\n        const hue = i / particleCount * 180 + 180;\n        const particleColor = `hsla(${hue}, 100%, 70%, ${0.3 + particleEnergy * 0.7})`;\n\n        // Draw particle\n        ctx.fillStyle = particleColor;\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n  };\n  function getAverageEnergy(data, startBin, endBin) {\n    let sum = 0;\n    const binCount = Math.min(endBin - startBin, data.length - startBin);\n    if (binCount <= 0) return 0;\n    for (let i = startBin; i < startBin + binCount; i++) {\n      sum += data[i] / 255.0;\n    }\n    return sum / binCount;\n  }\n\n  // Update parameters when initialParameters change - use a ref to avoid re-renders\n  useEffect(() => {\n    // Only log in development\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(\"Visualizer received updated parameters:\", initialParameters);\n    }\n    if (initialParameters && Object.keys(initialParameters).length > 0) {\n      // Use a simple update without triggering re-renders\n      setParameters(initialParameters);\n    }\n  }, [initialParameters]);\n\n  // Add a function to update parameters\n  const updateParameters = newParameters => {\n    // Only log in development\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(\"Updating visualization parameters:\", newParameters);\n    }\n    setParameters(newParameters);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"visualizer-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: `visualizer-aspect-container ${RESOLUTIONS[resolution].className}`,\n      children: [use3D ? /*#__PURE__*/_jsxDEV(ThreeVisualizer, {\n        audioData: audioData,\n        template: template.replace('3d', '') // Remove '3d' suffix for the ThreeVisualizer\n        ,\n        isPlaying: isPlaying,\n        parameters: parameters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3014,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"visualizer-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3021,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3023,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resolution-indicator\",\n        children: [resolution, \" (\", RESOLUTIONS[resolution].width, \"\\xD7\", RESOLUTIONS[resolution].height, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3024,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3009,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 3008,\n    columnNumber: 5\n  }, this);\n}, \"YKAxe3DkZ4mr2sIx+Fv//uNOOD8=\")), \"YKAxe3DkZ4mr2sIx+Fv//uNOOD8=\");\n_c2 = Visualizer;\nexport default Visualizer;\nvar _c, _c2;\n$RefreshReg$(_c, \"Visualizer$forwardRef\");\n$RefreshReg$(_c2, \"Visualizer\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","ThreeVisualizer","jsxDEV","_jsxDEV","RESOLUTIONS","width","height","className","Visualizer","_s","_c","audioFile","template","isPlaying","onAudioElementCreated","parameters","initialParameters","ref","canvasRef","containerRef","audioContextRef","analyserRef","animationFrameRef","sourceRef","audioElementRef","particlesRef","timeRef","resolution","setResolution","audioData","setAudioData","use3D","setUse3D","setParameters","threeDTemplates","includes","isInitialized","initAudio","current","context","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","smoothingTimeConstant","audioElement","Audio","crossOrigin","preload","timestamp","Date","getTime","src","path","Promise","resolve","reject","loadHandler","console","log","duration","errorHandler","error","addEventListener","once","load","disconnect","mediaSource","createMediaElementSource","connect","destination","onSeeking","currentTime","startVisualization","state","resume","removeEventListener","pause","alert","playAudio","_audioContextRef$curr","play","cancelAnimationFrame","canvas","ctx","getContext","fillStyle","fillRect","style","maxWidth","maxHeight","initParticles","changeResolution","newResolution","useImperativeHandle","getCurrentResolution","updateParameters","count","Math","floor","i","push","x","random","y","size","vx","speed","vy","hue","updateAndDrawParticles","dataArray","bufferLength","cachedParameters","length","color","particleCount","particleSize","reactivity","particle","dataIndex","audioValue","beginPath","arc","PI","adjustColor","fill","hexColor","amount","r","parseInt","substring","g","b","max","min","rHex","round","toString","padStart","gHex","bHex","frequencyBinCount","Uint8Array","timeArray","getByteFrequencyData","getByteTimeDomainData","lastFrameTime","performance","now","targetFrameRate","frameInterval","update3DAudio","requestAnimationFrame","deltaTime","newDataArray","Array","newTimeArray","logIndex","pow","alpha","draw","JSON","stringify","drawWaveform","drawBars","drawCircles","drawKaleidoscope","drawSpiral","drawRipples","drawTerrain","drawStarburst","drawFractal","drawLiquid","drawMesh","drawClock","lineWidth","smoothing","strokeStyle","sliceWidth","step","v","moveTo","prevX","prevY","cpX1","cpX2","cpY1","cpY2","bezierCurveTo","lineTo","stroke","barWidth","spacing","bars","barWidthPx","barSpacing","totalBarWidth","freqRatio","barHeight","baseRadius","radius","circleCount","centerX","centerY","c","freqIndex","circleIndex","segments","translate","rotate","s","setTransform","arms","maxRadius","PI2","PI6","armColors","a","armAngle","pointsPerArm","sampleStep","t","angle","cosAngle","cos","sinAngle","sin","density","sqrt","ripples","bassEnergy","freqBand","freqIntensity","ripple","globalAlpha","filter","detail","points","pointWidth","terrainHeights","terrainHeight","smoothedHeights","sum","j","gradient","createLinearGradient","addColorStop","cpX","cpY","quadraticCurveTo","closePath","terrainY","reflectionHeight","stars","starCount","brightness","star","twinkle","starburstParticles","lastBurstTime","undefined","burstSize","burstColor","life","decay","p","complexity","variation","lowEnergy","getAverageEnergy","midEnergy","highEnergy","trunkLength","branchAngle","branchRatio","maxDepth","startX","startY","drawBranch","data","startBin","endBin","binCount","depth","time","newLength","timeVariation","leftAngle","rightAngle","leftX","leftY","rightX","rightY","branchColor","liquidPoints","pointCount","targetPointCount","newPoints","frequencyBands","energyBands","dampening","tension","timeScale","point","bandIndex","energy","timeOffset","next","lastPoint","liquidBubbles","bubbleX","bubbleSize","opacity","bubble","perspective","gridSize","cellWidth","cellHeight","focalLength","viewDistance","eyeZ","rotationX","rotationY","rotationZ","grid","row","freqX","freqY","xPos","yPos","zPos","rotate3D","scale","z","projX","projY","value","point1","point2","lineValue","depthFactor","lineColor","pointSize","pointColor","rotX","rotY","rotZ","y1","z1","x2","z2","x3","y3","createRadialGradient","markerRadius","bandCount","hands","avgEnergy","baseLength","hand","endX","endY","centerGradient","spectrumRadius","spectrumWidth","innerRadius","outerRadius","x1","y2","spectrumGradient","adjustedColor","slice","drawNebula","bgGradient","coreSize","coreGradient","globalCompositeOperation","wispCount","energyFactor","baseAngle","rotation","ctrlX1","ctrlY1","ctrlX2","ctrlY2","wispColor","lineCap","distance","drawCityscape","skyGradient","moonX","moonY","moonSize","moonGlow","buildings","buildingWidth","buildingHeight","buildingColor","forEach","building","windowSize","windowSpacing","windowsPerRow","windowsPerColumn","windowAlpha","windowColor","col","windowX","windowY","antennaX","antennaHeight","beatEnergy","foregroundHeight","drawWaterfall","waterfallHistory","barCount","skipFactor","rowData","saturation","lightness","surfaceY","rippleCount","splashCount","particleX","particleY","edgeGradient","mistGradient","drawConstellation","constellationStars","connections","rotationCenter","rotationSpeed","dx","dy","rotationFactor","newX","newY","freqValue","maxConnections","connectionThreshold","connectionCount","star1","star2","freqDiff","abs","rhythmicPattern","freqAvg","strength","conn","color1","color2","starColor","glowSize","glow","constellationNames","name","font","fillText","drawMandala","overallEnergy","reduce","symmetryCount","layerCount","layer","layerRadius","layerEnergy","layerRotation","layerColor","elementComplexity","drawMandalaElement","circleRadius","centerSize","flowerRadius","petalCount","save","elementType","spiralRadius","sx","sy","restore","drawOcean","oceanWaves","waveCount","w","baseY","offset","amplitude","skyTopColor","skyBottomColor","celestialSize","celestialX","celestialY","celestialColor","glowGradient","cloudCount","cloudX","cloudY","cloudSize","cloudOpacity","offsetX","offsetY","waves","oceanGradient","wave","waveTime","wavePos","baseWave","choppiness","nextPoint","prevPoint","peakSharpness","reflectionGradient","drawDNA","dnaLength","dnaWidth","dnaSegments","dnaRotation","verticalOffset","strand","strandColor","progress","phase","waveAmplitude","phase1","phase2","basePairColor","baseSize","glowColor","particleEnergy","particleColor","process","env","NODE_ENV","Object","keys","newParameters","children","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/Visualizer.js"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState } from 'react';\nimport ThreeVisualizer from './ThreeVisualizer';\nimport './Visualizer.css';\n\nconst RESOLUTIONS = {\n  '4K': { width: 3840, height: 2160, className: 'aspect-ratio-4k' },\n  '1080p': { width: 1920, height: 1080, className: 'aspect-ratio-1080p' },\n  '720p': { width: 1280, height: 720, className: 'aspect-ratio-720p' },\n  'Square': { width: 720, height: 720, className: 'aspect-ratio-square' },\n  'Vertical': { width: 1080, height: 1920, className: 'aspect-ratio-vertical' }\n};\n\nconst Visualizer = forwardRef(({ audioFile, template, isPlaying, onAudioElementCreated, parameters: initialParameters = {} }, ref) => {\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const sourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n  const particlesRef = useRef([]);\n  const timeRef = useRef(0); // Add timeRef to track animation time\n  const [resolution, setResolution] = useState('1080p'); // Default to 1080p\n  const [audioData, setAudioData] = useState(null);\n  const [use3D, setUse3D] = useState(false);\n  const [parameters, setParameters] = useState(initialParameters);\n\n  // Check if template is a 3D visualization\n  useEffect(() => {\n    // Define which templates should use 3D rendering\n    const threeDTemplates = ['particles3d', 'waveform3d', 'spiral3d', 'kaleidoscope3d'];\n    setUse3D(threeDTemplates.includes(template));\n  }, [template]);\n\n  // Audio initialization effect\n  useEffect(() => {\n    if (!audioFile) return;\n\n    let isInitialized = false;\n\n    const initAudio = async () => {\n      try {\n        // Initialize audio context only on first load or if it doesn't exist\n        if (!audioContextRef.current) {\n          // Create context on user interaction\n          const context = new (window.AudioContext || window.webkitAudioContext)();\n          audioContextRef.current = context;\n          \n          // Create analyzer with improved settings for better reactivity\n          const analyser = context.createAnalyser();\n          analyser.fftSize = 2048; // Increased for more detailed frequency data\n          analyser.smoothingTimeConstant = 0.8; // Higher smoothing for more consistent movement\n          analyserRef.current = analyser;\n        }\n\n        // Create and set up audio element\n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n\n        // Set the audio source\n        const timestamp = new Date().getTime();\n        audioElement.src = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\n\n        // Wait for audio to be loaded enough to play\n        await new Promise((resolve, reject) => {\n          const loadHandler = () => {\n            console.log('Audio loaded, duration:', audioElement.duration);\n            resolve();\n          };\n\n          const errorHandler = (error) => {\n            console.error('Audio load error:', error);\n            reject(error);\n          };\n\n          audioElement.addEventListener('canplaythrough', loadHandler, { once: true });\n          audioElement.addEventListener('error', errorHandler, { once: true });\n          audioElement.load();\n        });\n\n        // Only create new media source if not already connected\n        if (!isInitialized) {\n          // Ensure old source is disconnected\n          if (sourceRef.current) {\n            sourceRef.current.disconnect();\n          }\n\n          // Create and connect new media source\n          const mediaSource = audioContextRef.current.createMediaElementSource(audioElement);\n          sourceRef.current = mediaSource;\n          mediaSource.connect(analyserRef.current);\n          analyserRef.current.connect(audioContextRef.current.destination);\n          isInitialized = true;\n        }\n\n        // Set up event listeners - REMOVE timeupdate listener which causes visualization restarts\n        const onSeeking = () => {\n          console.log('Seeking:', audioElement.currentTime);\n          if (isPlaying) startVisualization();\n        };\n\n        audioElement.addEventListener('seeking', onSeeking);\n        audioElement.addEventListener('seeked', onSeeking);\n        // Removed timeupdate listener which was causing visualization restarts\n\n        // Store reference and notify parent\n        audioElementRef.current = audioElement;\n        onAudioElementCreated(audioElement);\n\n        // Resume audio context if suspended\n        if (audioContextRef.current.state === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n\n        return () => {\n          console.log('Cleaning up audio element');\n          audioElement.removeEventListener('seeking', onSeeking);\n          audioElement.removeEventListener('seeked', onSeeking);\n          // Removed timeupdate listener cleanup\n          audioElement.pause();\n          audioElement.src = '';\n          onAudioElementCreated(null);\n        };\n      } catch (error) {\n        console.error('Audio initialization error:', error);\n        alert('Error loading audio. Please try again.');\n      }\n    };\n\n    initAudio();\n  }, [audioFile]); // Remove isPlaying from dependencies\n\n  // Separate playback control effect\n  useEffect(() => {\n    const audioElement = audioElementRef.current;\n    if (!audioElement) return;\n\n    const playAudio = async () => {\n      try {\n        // Ensure audio context is running\n        if (audioContextRef.current?.state === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n        \n        console.log('Playing audio...');\n        await audioElement.play();\n        startVisualization();\n      } catch (error) {\n        console.error('Playback error:', error);\n        alert('Error playing audio. Please try again.');\n      }\n    };\n\n    if (isPlaying) {\n      playAudio();\n    } else {\n      console.log('Pausing audio...');\n      audioElement.pause();\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isPlaying]);\n\n  // Add effect to handle template changes\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Clear the entire canvas\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Restart visualization if playing\n    if (isPlaying) {\n      startVisualization();\n    }\n  }, [template]);\n\n  // Update canvas size based on selected resolution\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const { width, height } = RESOLUTIONS[resolution];\n    \n    // Set canvas dimensions to match the selected resolution\n    canvas.width = width;\n    canvas.height = height;\n    \n    // Clear canvas with new dimensions\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    // Adjust container styles based on aspect ratio\n    if (containerRef.current) {\n      if (resolution === 'Vertical') {\n        containerRef.current.style.width = 'auto';\n        containerRef.current.style.height = '80vh';\n      } else if (resolution === 'Square') {\n        containerRef.current.style.width = '720px';\n        containerRef.current.style.height = '720px';\n        containerRef.current.style.maxWidth = '720px';\n        containerRef.current.style.maxHeight = '720px';\n      } else {\n        containerRef.current.style.width = '100%';\n        containerRef.current.style.height = 'auto';\n        containerRef.current.style.maxWidth = `${width}px`;\n        containerRef.current.style.maxHeight = `${height}px`;\n      }\n    }\n    \n    // Restart visualization if playing\n    if (isPlaying) {\n      startVisualization();\n    }\n    \n    // Initialize particles for the new canvas size\n    if (template === 'particles') {\n      initParticles(ctx);\n    }\n  }, [resolution, isPlaying, template]);\n\n  // Function to change resolution\n  const changeResolution = (newResolution) => {\n    if (RESOLUTIONS[newResolution]) {\n      setResolution(newResolution);\n    }\n  };\n\n  // Expose changeResolution to parent via ref\n  React.useImperativeHandle(ref, () => ({\n    changeResolution,\n    getCurrentResolution: () => resolution,\n    updateParameters\n  }));\n\n  const initParticles = (ctx) => {\n    // Safety check - ensure context exists\n    if (!ctx || !ctx.canvas) {\n      console.error(\"Canvas context is null in initParticles\");\n      return;\n    }\n    \n    const count = Math.floor(((parameters.count || 50) / 50) * 200); // 100-400 particles based on count parameter\n    particlesRef.current = [];\n    \n    for (let i = 0; i < count; i++) {\n      particlesRef.current.push({\n        x: Math.random() * ctx.canvas.width,\n        y: Math.random() * ctx.canvas.height,\n        size: Math.random() * ((parameters.size || 50) / 10) + 1, // 1-6 size based on size parameter\n        vx: (Math.random() - 0.5) * ((parameters.speed || 50) / 25), // Speed based on speed parameter\n        vy: (Math.random() - 0.5) * ((parameters.speed || 50) / 25),\n        hue: Math.random() * 360\n      });\n    }\n  };\n\n  const updateAndDrawParticles = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in updateAndDrawParticles\");\n      return;\n    }\n    \n    // Safety check - ensure particles array exists\n    if (!particlesRef.current || particlesRef.current.length === 0) {\n      console.log(\"Initializing particles in updateAndDrawParticles\");\n      initParticles(ctx);\n      \n      // Double-check initialization worked\n      if (!particlesRef.current || particlesRef.current.length === 0) {\n        console.error(\"Failed to initialize particles\");\n        return;\n      }\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ffffff';\n    const particleCount = Math.floor(((cachedParameters.count || 50) / 100) * particlesRef.current.length);\n    const particleSize = (cachedParameters.size || 50) / 10; // Convert to 0-10 scale\n    const speed = (cachedParameters.speed || 50) / 50; // Convert to 0-2 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // Convert to 0-2 scale\n    \n    // Clear canvas with fade effect\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    \n    // Update and draw particles\n    for (let i = 0; i < particleCount; i++) {\n      const particle = particlesRef.current[i];\n      \n      // Apply audio reactivity\n      const dataIndex = Math.floor((i / particleCount) * bufferLength);\n      const audioValue = dataArray[dataIndex] / 255.0 * reactivity;\n      \n      // Update position\n      particle.x += particle.vx * speed;\n      particle.y += particle.vy * speed;\n      \n      // Bounce off edges\n      if (particle.x < 0 || particle.x > canvasRef.current.width) {\n        particle.vx = -particle.vx;\n      }\n      \n      if (particle.y < 0 || particle.y > canvasRef.current.height) {\n        particle.vy = -particle.vy;\n      }\n      \n      // Draw particle\n      const size = particleSize * (1 + audioValue);\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);\n      ctx.fillStyle = adjustColor(color, audioValue * 50);\n      ctx.fill();\n    }\n  };\n\n  // Helper function to adjust colors\n  const adjustColor = (hexColor, amount) => {\n    // Convert hex to RGB\n    let r = parseInt(hexColor.substring(1, 3), 16);\n    let g = parseInt(hexColor.substring(3, 5), 16);\n    let b = parseInt(hexColor.substring(5, 7), 16);\n    \n    // Adjust RGB values\n    r = Math.max(0, Math.min(255, r + amount));\n    g = Math.max(0, Math.min(255, g + amount));\n    b = Math.max(0, Math.min(255, b + amount));\n    \n    // Convert back to hex with proper padding\n    const rHex = Math.round(r).toString(16).padStart(2, '0');\n    const gHex = Math.round(g).toString(16).padStart(2, '0');\n    const bHex = Math.round(b).toString(16).padStart(2, '0');\n    \n    return `#${rHex}${gHex}${bHex}`;\n  };\n\n  // Start visualization\n  const startVisualization = () => {\n    if (!analyserRef.current) {\n      console.error(\"Analyzer reference is null in startVisualization\");\n      return;\n    }\n    \n    const analyser = analyserRef.current;\n    \n    // Create data arrays for audio analysis\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const timeArray = new Uint8Array(bufferLength);\n    \n    // Get initial data\n    analyser.getByteFrequencyData(dataArray);\n    analyser.getByteTimeDomainData(timeArray);\n    \n    // Cancel any existing animation frame\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    \n    // Reset animation time to ensure consistent animation speed\n    timeRef.current = 0;\n    \n    // Track frame timing for consistent animation speed\n    let lastFrameTime = performance.now();\n    const targetFrameRate = 30; // Reduced to 30 FPS for smoother, slower animations\n    const frameInterval = 1000 / targetFrameRate;\n    \n    // Handle 3D visualization\n    if (use3D) {\n      // For 3D, we need to continuously update the audio data\n      const update3DAudio = (currentTime) => {\n        animationFrameRef.current = requestAnimationFrame(update3DAudio);\n        \n        // Calculate delta time for smooth animation regardless of frame rate\n        const deltaTime = (currentTime - lastFrameTime) / frameInterval;\n        lastFrameTime = currentTime;\n        \n        // Increment time for animations with consistent speed\n        timeRef.current += 0.005 * Math.min(deltaTime, 2);\n        \n        // Get frequency and time domain data\n        analyser.getByteFrequencyData(dataArray);\n        analyser.getByteTimeDomainData(timeArray);\n        \n        // Update audio data for 3D visualizer with more efficient approach\n        const newDataArray = new Array(bufferLength);\n        const newTimeArray = new Array(bufferLength);\n        \n        // Use logarithmic sampling to focus more on lower frequencies\n        for (let i = 0; i < bufferLength; i++) {\n          // Logarithmic mapping to emphasize lower frequencies\n          const logIndex = Math.min(bufferLength - 1, Math.floor(Math.pow(i / bufferLength, 0.5) * bufferLength));\n          newDataArray[i] = dataArray[logIndex];\n          newTimeArray[i] = timeArray[logIndex];\n        }\n        \n        setAudioData({ \n          dataArray: newDataArray, \n          timeArray: newTimeArray, \n          bufferLength \n        });\n      };\n      \n      update3DAudio(performance.now());\n      return;\n    }\n    \n    // For 2D visualizations, ensure canvas exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in startVisualization for 2D visualization\");\n      return;\n    }\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', { alpha: false }); // Optimize by disabling alpha\n    \n    // Cache parameter values outside the animation loop for better performance\n    let cachedParameters = { ...parameters };\n    \n    // Animation function for 2D visualizations\n    const draw = (currentTime) => {\n      animationFrameRef.current = requestAnimationFrame(draw);\n      \n      // Calculate delta time for smooth animation regardless of frame rate\n      const deltaTime = (currentTime - lastFrameTime) / frameInterval;\n      lastFrameTime = currentTime;\n      \n      // Increment time for animations with consistent speed\n      timeRef.current += 0.005 * Math.min(deltaTime, 2);\n      \n      // Get frequency and time domain data\n      analyser.getByteFrequencyData(dataArray);\n      analyser.getByteTimeDomainData(timeArray);\n      \n      // Clear canvas\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      // Check if parameters have changed\n      if (JSON.stringify(cachedParameters) !== JSON.stringify(parameters)) {\n        cachedParameters = { ...parameters };\n      }\n      \n      // Draw visualization based on template\n      switch (template) {\n        case 'waveform':\n          drawWaveform(ctx, dataArray, bufferLength, cachedParameters);\n          break;\n        case 'bars':\n          drawBars(ctx, dataArray, bufferLength, cachedParameters);\n          break;\n        case 'circles':\n          drawCircles(ctx, dataArray, bufferLength, cachedParameters);\n          break;\n        case 'kaleidoscope':\n          drawKaleidoscope(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'spiral':\n          drawSpiral(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'particles':\n          updateAndDrawParticles(ctx, dataArray, bufferLength, cachedParameters);\n          break;\n        case 'ripple':\n          drawRipples(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'terrain':\n          drawTerrain(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'starburst':\n          drawStarburst(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'fractal':\n          drawFractal(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'liquid':\n          drawLiquid(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'mesh':\n          drawMesh(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'clock':\n          drawClock(ctx, dataArray, timeArray, bufferLength, cachedParameters);\n          break;\n        default:\n          drawWaveform(ctx, dataArray, bufferLength, cachedParameters);\n      }\n    };\n    \n    draw(performance.now());\n  };\n\n  const drawWaveform = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawWaveform\");\n      return;\n    }\n    \n    // Apply parameters\n    const lineWidth = cachedParameters.lineWidth || 3;\n    const color = cachedParameters.color || '#00aaff';\n    const reactivity = (cachedParameters.reactivity || 50) / 40; // Adjusted for better responsiveness\n    const smoothing = (cachedParameters.smoothing || 50) / 100; // Convert to 0-1 scale\n    \n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = color;\n    ctx.beginPath();\n    \n    const sliceWidth = (canvasRef.current.width * 1.0) / bufferLength;\n    let x = 0;\n    \n    // Use fewer points for better performance\n    const step = Math.max(1, Math.floor(bufferLength / 256));\n    \n    for (let i = 0; i < bufferLength; i += step) {\n      const v = dataArray[i] / 128.0 * reactivity;\n      const y = v * canvasRef.current.height / 2;\n      \n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        // Apply smoothing if enabled\n        if (smoothing > 0) {\n          const prevX = x - sliceWidth * step;\n          const prevY = dataArray[i - step] / 128.0 * reactivity * canvasRef.current.height / 2;\n          const cpX1 = prevX + sliceWidth * step / 3;\n          const cpX2 = x - sliceWidth * step / 3;\n          const cpY1 = prevY;\n          const cpY2 = y;\n          \n          // Use bezier curve for smoothing\n          ctx.bezierCurveTo(cpX1, cpY1, cpX2, cpY2, x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      \n      x += sliceWidth * step;\n    }\n    \n    ctx.lineTo(canvasRef.current.width, canvasRef.current.height / 2);\n    ctx.stroke();\n  };\n\n  const drawBars = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawBars\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ff5500';\n    const barWidth = (cachedParameters.barWidth || 50) / 100; // Convert to 0-1 scale\n    const spacing = (cachedParameters.spacing || 30) / 100; // Convert to 0-1 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 20; // Adjusted for better responsiveness\n    \n    const bars = Math.min(bufferLength, 128); // Reduced number of bars for better performance\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    \n    const barWidthPx = (width / bars) * barWidth;\n    const barSpacing = (width / bars) * spacing;\n    const totalBarWidth = barWidthPx + barSpacing;\n    \n    for (let i = 0; i < bars; i++) {\n      // Use logarithmic mapping to emphasize lower frequencies\n      // Focus more on the lower half of the frequency spectrum\n      const freqRatio = i / bars;\n      const dataIndex = Math.min(bufferLength - 1, Math.floor(Math.pow(freqRatio, 0.8) * (bufferLength / 2)));\n      \n      const barHeight = dataArray[dataIndex] * reactivity;\n      \n      const x = i * totalBarWidth;\n      const y = height - barHeight;\n      \n      ctx.fillStyle = adjustColor(color, (i / bars) * 30);\n      ctx.fillRect(x, y, barWidthPx, barHeight);\n    }\n  };\n\n  const drawCircles = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawCircles\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ff00ff';\n    const baseRadius = (cachedParameters.radius || 50) / 100 * Math.min(canvasRef.current.width, canvasRef.current.height) / 2;\n    const circleCount = Math.max(1, Math.min(20, Math.floor((cachedParameters.count || 50) / 5))); // 1-20 circles\n    const reactivity = (cachedParameters.reactivity || 50) / 40; // Adjusted for better responsiveness\n    \n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n    \n    // Draw circles\n    for (let c = 0; c < circleCount; c++) {\n      // Focus on lower frequencies for outer circles, higher frequencies for inner circles\n      const freqRatio = c / circleCount;\n      const freqIndex = Math.floor(Math.pow(freqRatio, 0.7) * (bufferLength / 2));\n      const circleIndex = Math.min(bufferLength - 1, freqIndex);\n      \n      const audioValue = dataArray[circleIndex] / 128.0 * reactivity;\n      \n      const radius = baseRadius * (c + 1) / circleCount * audioValue;\n      \n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      ctx.strokeStyle = adjustColor(color, (c / circleCount) * 50);\n      ctx.stroke();\n    }\n  };\n\n  const drawKaleidoscope = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawKaleidoscope\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ffaa00';\n    const segments = cachedParameters.segments || 8;\n    const speed = (cachedParameters.speed || 50) / 2000; // Reduced speed for slower rotation\n    const reactivity = (cachedParameters.reactivity || 50) / 40; // Adjusted for better responsiveness\n    \n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n    const radius = Math.min(centerX, centerY) * 0.8;\n    \n    // Rotate based on time and speed\n    ctx.translate(centerX, centerY);\n    ctx.rotate(timeRef.current * speed);\n    \n    // Draw kaleidoscope segments\n    for (let s = 0; s < segments; s++) {\n      ctx.rotate(Math.PI * 2 / segments);\n      \n      ctx.beginPath();\n      ctx.strokeStyle = adjustColor(color, s * 5);\n      \n      // Draw audio-reactive pattern\n      // Use fewer points for better performance\n      const step = Math.max(8, Math.floor(bufferLength / 64));\n      \n      for (let i = 0; i < bufferLength; i += step) {\n        // Focus on lower frequencies which typically contain more rhythm information\n        const dataIndex = Math.min(bufferLength - 1, Math.floor(Math.pow(i / bufferLength, 0.7) * bufferLength));\n        \n        const x = (dataArray[dataIndex] / 256.0) * radius * reactivity;\n        const y = (timeArray[dataIndex] / 256.0) * radius * reactivity;\n        \n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      \n      ctx.stroke();\n    }\n    \n    // Reset transformation\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  };\n\n  const drawSpiral = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawSpiral\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#00ff99';\n    const arms = cachedParameters.arms || 5;\n    const speed = (cachedParameters.speed || 50) / 2000; // Reduced speed for slower rotation\n    const reactivity = (cachedParameters.reactivity || 50) / 40; // Adjusted for better responsiveness\n    \n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n    const maxRadius = Math.min(centerX, centerY) * 0.9;\n    \n    // Rotate based on time and speed\n    ctx.translate(centerX, centerY);\n    ctx.rotate(timeRef.current * speed);\n    \n    // Pre-calculate common values\n    const PI2 = Math.PI * 2;\n    const PI6 = Math.PI * 6;\n    \n    // Pre-calculate arm colors to avoid recalculating in the loop\n    const armColors = [];\n    for (let a = 0; a < arms; a++) {\n      armColors[a] = adjustColor(color, a * 10);\n    }\n    \n    // Draw spiral arms\n    for (let a = 0; a < arms; a++) {\n      const armAngle = (a / arms) * PI2;\n      \n      ctx.beginPath();\n      ctx.strokeStyle = armColors[a];\n      \n      // Use a more efficient approach for drawing the spiral\n      // but maintain the original visual appearance with 100 points\n      const pointsPerArm = 100;\n      \n      // Sample audio data less frequently for performance\n      const sampleStep = Math.max(1, Math.floor(bufferLength / 128));\n      \n      for (let i = 0; i < pointsPerArm; i++) {\n        const t = i / pointsPerArm;\n        const angle = armAngle + t * PI6;\n        const radius = t * maxRadius;\n        \n        // Apply audio reactivity - use a more efficient data sampling approach\n        // Focus on lower frequencies which typically contain more rhythm information\n        const freqIndex = Math.min(bufferLength - 1, Math.floor(t * bufferLength / 4));\n        const dataIndex = Math.min(bufferLength - 1, freqIndex);\n        const audioValue = dataArray[dataIndex] / 128.0 * reactivity;\n        \n        // Pre-calculate trig functions for performance\n        const cosAngle = Math.cos(angle);\n        const sinAngle = Math.sin(angle);\n        \n        const x = cosAngle * radius * audioValue;\n        const y = sinAngle * radius * audioValue;\n        \n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      \n      ctx.stroke();\n    }\n    \n    // Reset transformation\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  };\n\n  // Add a new ripple visualization\n  const drawRipples = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawRipples\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#00ffff';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const speed = (cachedParameters.speed || 50) / 50;\n    const density = (cachedParameters.density || 50) / 50;\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const maxRadius = Math.sqrt(width * width + height * height) / 2;\n    \n    // Initialize ripples array if it doesn't exist\n    if (!window.ripples) {\n      window.ripples = [];\n    }\n    \n    // Detect beats for creating new ripples\n    let bassEnergy = 0;\n    for (let i = 0; i < 8; i++) {\n      bassEnergy += dataArray[i];\n    }\n    bassEnergy = bassEnergy / (8 * 255);\n    \n    // Create new ripple on strong beats\n    if (bassEnergy > 0.6 && Math.random() < 0.3 * density) {\n      // Get a frequency band for this ripple's color\n      const freqBand = Math.floor(Math.random() * (bufferLength / 4));\n      const freqIntensity = dataArray[freqBand] / 255;\n      \n      // Create a new ripple\n      window.ripples.push({\n        radius: 0,\n        maxRadius: maxRadius * (0.3 + Math.random() * 0.7),\n        lineWidth: 1 + Math.random() * 4,\n        alpha: 0.7 + Math.random() * 0.3,\n        speed: (0.5 + Math.random() * 1.5) * speed,\n        color: adjustColor(color, freqIntensity * 50 - 25)\n      });\n    }\n    \n    // Draw and update ripples\n    for (let i = 0; i < window.ripples.length; i++) {\n      const ripple = window.ripples[i];\n      \n      // Update radius\n      ripple.radius += ripple.speed;\n      \n      // Decrease alpha as the ripple expands\n      ripple.alpha *= 0.98;\n      \n      // Draw ripple\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, ripple.radius, 0, Math.PI * 2);\n      ctx.strokeStyle = ripple.color;\n      ctx.globalAlpha = ripple.alpha;\n      ctx.lineWidth = ripple.lineWidth;\n      ctx.stroke();\n      ctx.globalAlpha = 1.0;\n    }\n    \n    // Remove ripples that have expanded beyond their max radius or faded out\n    window.ripples = window.ripples.filter(ripple => \n      ripple.radius < ripple.maxRadius && ripple.alpha > 0.01\n    );\n  };\n\n  // Add a new terrain visualization\n  const drawTerrain = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawTerrain\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#33cc33';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const detail = (cachedParameters.detail || 50) / 50;\n    const speed = (cachedParameters.speed || 50) / 100;\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    \n    // Calculate number of terrain points based on detail parameter\n    const points = Math.max(20, Math.floor(width / (10 / detail)));\n    const pointWidth = width / points;\n    \n    // Create terrain heights based on audio data\n    const terrainHeights = [];\n    \n    // Sample audio data for terrain heights\n    for (let i = 0; i < points; i++) {\n      // Map point index to frequency data index\n      const dataIndex = Math.floor((i / points) * (bufferLength / 2));\n      \n      // Get audio value and apply reactivity\n      const audioValue = dataArray[dataIndex] / 255.0 * reactivity;\n      \n      // Calculate terrain height\n      const terrainHeight = height * 0.1 + audioValue * height * 0.6;\n      terrainHeights.push(terrainHeight);\n    }\n    \n    // Smooth terrain heights\n    const smoothedHeights = [];\n    for (let i = 0; i < points; i++) {\n      let sum = 0;\n      let count = 0;\n      \n      // Apply smoothing by averaging neighboring points\n      for (let j = Math.max(0, i - 2); j <= Math.min(points - 1, i + 2); j++) {\n        sum += terrainHeights[j];\n        count++;\n      }\n      \n      smoothedHeights.push(sum / count);\n    }\n    \n    // Create a gradient for the terrain\n    const gradient = ctx.createLinearGradient(0, height, 0, height / 2);\n    gradient.addColorStop(0, color);\n    gradient.addColorStop(1, adjustColor(color, 30));\n    \n    // Draw terrain\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.moveTo(0, height);\n    \n    // Draw terrain path\n    for (let i = 0; i < points; i++) {\n      const x = i * pointWidth;\n      const y = height - smoothedHeights[i];\n      \n      if (i === 0) {\n        ctx.lineTo(x, y);\n      } else {\n        // Use quadratic curves for smoother terrain\n        const prevX = (i - 1) * pointWidth;\n        const prevY = height - smoothedHeights[i - 1];\n        const cpX = (prevX + x) / 2;\n        const cpY = (prevY + y) / 2;\n        \n        ctx.quadraticCurveTo(cpX, cpY, x, y);\n      }\n    }\n    \n    // Complete the path\n    ctx.lineTo(width, height);\n    ctx.closePath();\n    ctx.fill();\n    \n    // Draw a reflection effect\n    ctx.globalAlpha = 0.3;\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n    \n    // Draw reflection path (inverted terrain)\n    ctx.beginPath();\n    ctx.moveTo(0, height);\n    \n    for (let i = 0; i < points; i++) {\n      const x = i * pointWidth;\n      const terrainY = height - smoothedHeights[i];\n      const reflectionHeight = smoothedHeights[i] * 0.3; // Smaller reflection\n      const y = height + reflectionHeight;\n      \n      if (i === 0) {\n        ctx.lineTo(x, y);\n      } else {\n        // Use quadratic curves for smoother terrain\n        const prevX = (i - 1) * pointWidth;\n        const prevY = height + smoothedHeights[i - 1] * 0.3;\n        const cpX = (prevX + x) / 2;\n        const cpY = (prevY + y) / 2;\n        \n        ctx.quadraticCurveTo(cpX, cpY, x, y);\n      }\n    }\n    \n    // Complete the reflection path\n    ctx.lineTo(width, height);\n    ctx.closePath();\n    ctx.fill();\n    \n    // Reset alpha\n    ctx.globalAlpha = 1.0;\n    \n    // Draw stars in the sky\n    if (!window.stars) {\n      // Initialize stars\n      window.stars = [];\n      const starCount = 50;\n      \n      for (let i = 0; i < starCount; i++) {\n        window.stars.push({\n          x: Math.random() * width,\n          y: Math.random() * height * 0.5,\n          size: 0.5 + Math.random() * 1.5,\n          brightness: 0.3 + Math.random() * 0.7\n        });\n      }\n    }\n    \n    // Draw stars with audio reactivity\n    for (let i = 0; i < window.stars.length; i++) {\n      const star = window.stars[i];\n      \n      // Make stars twinkle based on audio\n      const dataIndex = Math.floor(Math.random() * (bufferLength / 4));\n      const twinkle = 0.5 + (dataArray[dataIndex] / 255.0) * 0.5;\n      \n      ctx.fillStyle = `rgba(255, 255, 255, ${star.brightness * twinkle})`;\n      ctx.beginPath();\n      ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  };\n\n  // Add a new starburst visualization\n  const drawStarburst = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawStarburst\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ff9900';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const particleCount = (cachedParameters.count || 50) / 50 * 100; // 0-100 particles\n    const particleSize = (cachedParameters.size || 50) / 50 * 5; // 0-5 size\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    \n    // Initialize particles array if it doesn't exist\n    if (!window.starburstParticles) {\n      window.starburstParticles = [];\n    }\n    \n    // Detect beats for creating new bursts\n    let bassEnergy = 0;\n    for (let i = 0; i < 8; i++) {\n      bassEnergy += dataArray[i];\n    }\n    bassEnergy = bassEnergy / (8 * 255);\n    \n    // Create new burst on strong beats\n    if (bassEnergy > 0.6 && (window.lastBurstTime === undefined || timeRef.current - window.lastBurstTime > 0.5)) {\n      window.lastBurstTime = timeRef.current;\n      \n      // Create a burst of particles\n      const burstSize = Math.floor(particleCount * (0.5 + bassEnergy * 0.5));\n      const burstColor = adjustColor(color, (Math.random() * 40) - 20);\n      \n      for (let i = 0; i < burstSize; i++) {\n        const angle = Math.random() * Math.PI * 2;\n        const speed = (1 + Math.random() * 3) * reactivity;\n        const size = (0.5 + Math.random() * 1.5) * particleSize;\n        const life = 1.0; // Full life\n        \n        window.starburstParticles.push({\n          x: centerX,\n          y: centerY,\n          vx: Math.cos(angle) * speed,\n          vy: Math.sin(angle) * speed,\n          size: size,\n          color: burstColor,\n          life: life,\n          decay: 0.01 + Math.random() * 0.02 // Random decay rate\n        });\n      }\n    }\n    \n    // Clear canvas with fade effect for trails\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.fillRect(0, 0, width, height);\n    \n    // Update and draw particles\n    for (let i = 0; i < window.starburstParticles.length; i++) {\n      const particle = window.starburstParticles[i];\n      \n      // Update position\n      particle.x += particle.vx;\n      particle.y += particle.vy;\n      \n      // Apply gravity\n      particle.vy += 0.05;\n      \n      // Update life\n      particle.life -= particle.decay;\n      \n      // Draw particle\n      if (particle.life > 0) {\n        ctx.globalAlpha = particle.life;\n        ctx.fillStyle = particle.color;\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n    \n    // Reset alpha\n    ctx.globalAlpha = 1.0;\n    \n    // Remove dead particles\n    window.starburstParticles = window.starburstParticles.filter(p => p.life > 0);\n  };\n\n  // Add a new fractal tree visualization\n  const drawFractal = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawFractal\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#66ff66';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const complexity = (cachedParameters.complexity || 50) / 50; // 0-1 complexity\n    const variation = (cachedParameters.variation || 50) / 50; // 0-1 variation\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    \n    // Clear canvas\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, width, height);\n    \n    // Calculate audio energy for different frequency bands\n    const lowEnergy = getAverageEnergy(dataArray, 0, 10) * reactivity;\n    const midEnergy = getAverageEnergy(dataArray, 10, 100) * reactivity;\n    const highEnergy = getAverageEnergy(dataArray, 100, 200) * reactivity;\n    \n    // Calculate tree parameters based on audio\n    const trunkLength = height * 0.25 * (0.8 + lowEnergy * 0.4);\n    const branchAngle = Math.PI / 6 + midEnergy * Math.PI / 12;\n    const branchRatio = 0.67 + highEnergy * 0.1;\n    \n    // Calculate max depth based on complexity\n    const maxDepth = Math.floor(4 + complexity * 4);\n    \n    // Draw tree\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n    \n    // Start tree from bottom center\n    const startX = width / 2;\n    const startY = height * 0.9;\n    \n    // Draw trunk\n    ctx.beginPath();\n    ctx.moveTo(startX, startY);\n    ctx.lineTo(startX, startY - trunkLength);\n    ctx.stroke();\n    \n    // Draw branches recursively\n    drawBranch(\n      ctx, \n      startX, \n      startY - trunkLength, \n      trunkLength, \n      -Math.PI / 2, \n      maxDepth, \n      branchAngle, \n      branchRatio, \n      color,\n      variation,\n      timeRef.current\n    );\n    \n    // Helper function to calculate average energy in a frequency range\n    function getAverageEnergy(data, startBin, endBin) {\n      let sum = 0;\n      const binCount = Math.min(endBin - startBin, data.length - startBin);\n      \n      if (binCount <= 0) return 0;\n      \n      for (let i = startBin; i < startBin + binCount; i++) {\n        sum += data[i] / 255.0;\n      }\n      \n      return sum / binCount;\n    }\n    \n    // Recursive function to draw branches\n    function drawBranch(ctx, x, y, length, angle, depth, branchAngle, branchRatio, color, variation, time) {\n      if (depth === 0) return;\n      \n      // Calculate new branch length\n      const newLength = length * branchRatio;\n      \n      // Add some variation based on time\n      const timeVariation = Math.sin(time * 2 + depth) * variation * 0.1;\n      \n      // Calculate endpoints for left and right branches\n      const leftAngle = angle - branchAngle + timeVariation;\n      const rightAngle = angle + branchAngle + timeVariation;\n      \n      const leftX = x + Math.cos(leftAngle) * newLength;\n      const leftY = y + Math.sin(leftAngle) * newLength;\n      \n      const rightX = x + Math.cos(rightAngle) * newLength;\n      const rightY = y + Math.sin(rightAngle) * newLength;\n      \n      // Adjust color based on depth\n      const branchColor = adjustColor(color, depth * 10);\n      ctx.strokeStyle = branchColor;\n      \n      // Adjust line width based on depth\n      ctx.lineWidth = Math.max(1, 3 - depth * 0.5);\n      \n      // Draw left branch\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(leftX, leftY);\n      ctx.stroke();\n      \n      // Draw right branch\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(rightX, rightY);\n      ctx.stroke();\n      \n      // Recursively draw sub-branches\n      drawBranch(ctx, leftX, leftY, newLength, leftAngle, depth - 1, branchAngle, branchRatio, color, variation, time);\n      drawBranch(ctx, rightX, rightY, newLength, rightAngle, depth - 1, branchAngle, branchRatio, color, variation, time);\n    }\n  };\n\n  // Add a new liquid wave visualization\n  const drawLiquid = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawLiquid\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#0099ff';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const complexity = (cachedParameters.complexity || 50) / 50; // 0-1 complexity\n    const speed = (cachedParameters.speed || 50) / 50; // 0-1 speed\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    \n    // Initialize wave points if they don't exist\n    if (!window.liquidPoints) {\n      window.liquidPoints = [];\n      const pointCount = Math.floor(20 + complexity * 30); // 20-50 points based on complexity\n      \n      for (let i = 0; i < pointCount; i++) {\n        window.liquidPoints.push({\n          x: width * (i / (pointCount - 1)),\n          y: height / 2,\n          vy: 0\n        });\n      }\n    }\n    \n    // Ensure we have the right number of points if complexity changes\n    const targetPointCount = Math.floor(20 + complexity * 30);\n    if (window.liquidPoints.length !== targetPointCount) {\n      const newPoints = [];\n      for (let i = 0; i < targetPointCount; i++) {\n        if (i < window.liquidPoints.length) {\n          newPoints.push(window.liquidPoints[i]);\n        } else {\n          newPoints.push({\n            x: width * (i / (targetPointCount - 1)),\n            y: height / 2,\n            vy: 0\n          });\n        }\n      }\n      window.liquidPoints = newPoints;\n    }\n    \n    // Clear canvas with gradient background\n    const gradient = ctx.createLinearGradient(0, 0, 0, height);\n    gradient.addColorStop(0, 'rgb(0, 10, 30)');\n    gradient.addColorStop(1, 'rgb(0, 0, 10)');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Calculate audio energy for different frequency bands\n    const frequencyBands = 8;\n    const energyBands = [];\n    \n    for (let i = 0; i < frequencyBands; i++) {\n      const startBin = Math.floor((i / frequencyBands) * (bufferLength / 2));\n      const endBin = Math.floor(((i + 1) / frequencyBands) * (bufferLength / 2));\n      energyBands.push(getAverageEnergy(dataArray, startBin, endBin) * reactivity);\n    }\n    \n    // Update wave points based on audio\n    const pointCount = window.liquidPoints.length;\n    const dampening = 0.95;\n    const tension = 0.025;\n    const timeScale = speed * 0.5;\n    \n    // Apply forces to points\n    for (let i = 0; i < pointCount; i++) {\n      const point = window.liquidPoints[i];\n      \n      // Determine which frequency band affects this point\n      const bandIndex = Math.floor((i / pointCount) * frequencyBands);\n      const energy = energyBands[bandIndex];\n      \n      // Apply force based on audio energy\n      point.vy += (Math.random() * 2 - 1) * energy * 2;\n      \n      // Apply time-based oscillation\n      const timeOffset = (i / pointCount) * Math.PI * 2;\n      point.vy += Math.sin(timeRef.current * timeScale + timeOffset) * 0.2;\n      \n      // Apply physics\n      point.y += point.vy;\n      point.vy *= dampening;\n      \n      // Apply tension to return to center\n      point.vy += (height / 2 - point.y) * tension;\n    }\n    \n    // Draw the liquid\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.moveTo(0, height);\n    \n    // Draw first point\n    ctx.lineTo(window.liquidPoints[0].x, window.liquidPoints[0].y);\n    \n    // Draw curve through points\n    for (let i = 0; i < pointCount - 1; i++) {\n      const current = window.liquidPoints[i];\n      const next = window.liquidPoints[i + 1];\n      \n      // Use quadratic curves for smoother liquid\n      const cpX = (current.x + next.x) / 2;\n      const cpY = (current.y + next.y) / 2;\n      \n      ctx.quadraticCurveTo(current.x, current.y, cpX, cpY);\n    }\n    \n    // Draw last point\n    const lastPoint = window.liquidPoints[pointCount - 1];\n    ctx.lineTo(lastPoint.x, lastPoint.y);\n    \n    // Complete the path\n    ctx.lineTo(width, height);\n    ctx.closePath();\n    ctx.fill();\n    \n    // Add highlights\n    ctx.strokeStyle = adjustColor(color, 30);\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    \n    // Draw curve through points for highlight\n    ctx.moveTo(window.liquidPoints[0].x, window.liquidPoints[0].y);\n    \n    for (let i = 0; i < pointCount - 1; i++) {\n      const current = window.liquidPoints[i];\n      const next = window.liquidPoints[i + 1];\n      \n      // Use quadratic curves for smoother liquid\n      const cpX = (current.x + next.x) / 2;\n      const cpY = (current.y + next.y) / 2;\n      \n      ctx.quadraticCurveTo(current.x, current.y, cpX, cpY);\n    }\n    \n    // Draw last point for highlight\n    ctx.lineTo(lastPoint.x, lastPoint.y);\n    ctx.stroke();\n    \n    // Add bubbles for extra effect\n    if (!window.liquidBubbles) {\n      window.liquidBubbles = [];\n    }\n    \n    // Create new bubbles based on audio energy\n    const bassEnergy = energyBands[0];\n    if (Math.random() < bassEnergy * 0.3) {\n      const bubbleX = Math.random() * width;\n      const bubbleSize = 2 + Math.random() * 8;\n      \n      window.liquidBubbles.push({\n        x: bubbleX,\n        y: height,\n        size: bubbleSize,\n        speed: 0.5 + Math.random() * 2,\n        opacity: 0.1 + Math.random() * 0.4\n      });\n    }\n    \n    // Update and draw bubbles\n    ctx.fillStyle = adjustColor(color, 50);\n    \n    for (let i = 0; i < window.liquidBubbles.length; i++) {\n      const bubble = window.liquidBubbles[i];\n      \n      // Update position\n      bubble.y -= bubble.speed;\n      \n      // Draw bubble\n      ctx.globalAlpha = bubble.opacity;\n      ctx.beginPath();\n      ctx.arc(bubble.x, bubble.y, bubble.size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    \n    // Reset alpha\n    ctx.globalAlpha = 1.0;\n    \n    // Remove bubbles that have risen to the top\n    window.liquidBubbles = window.liquidBubbles.filter(b => b.y > -b.size);\n    \n    // Helper function to calculate average energy in a frequency range\n    function getAverageEnergy(data, startBin, endBin) {\n      let sum = 0;\n      const binCount = Math.min(endBin - startBin, data.length - startBin);\n      \n      if (binCount <= 0) return 0;\n      \n      for (let i = startBin; i < startBin + binCount; i++) {\n        sum += data[i] / 255.0;\n      }\n      \n      return sum / binCount;\n    }\n  };\n\n  // Add a new audio mesh visualization\n  const drawMesh = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawMesh\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ff00cc';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const density = (cachedParameters.density || 50) / 50; // 0-1 density\n    const perspective = (cachedParameters.perspective || 50) / 50; // 0-1 perspective\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    \n    // Clear canvas with gradient background\n    const gradient = ctx.createLinearGradient(0, 0, 0, height);\n    gradient.addColorStop(0, 'rgb(0, 0, 0)');\n    gradient.addColorStop(1, 'rgb(20, 0, 20)');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Calculate grid dimensions based on density\n    const gridSize = Math.max(8, Math.floor(8 + density * 16)); // 8-24 grid size\n    const cellWidth = width / gridSize;\n    const cellHeight = height / gridSize;\n    \n    // Create perspective projection\n    const focalLength = 400 * perspective;\n    const viewDistance = 200 + 300 * perspective;\n    const eyeZ = -viewDistance;\n    \n    // Calculate time-based rotation\n    const rotationX = timeRef.current * 0.1;\n    const rotationY = timeRef.current * 0.15;\n    const rotationZ = timeRef.current * 0.05;\n    \n    // Create 3D grid points\n    const grid = [];\n    \n    for (let y = 0; y < gridSize; y++) {\n      const row = [];\n      for (let x = 0; x < gridSize; x++) {\n        // Map grid position to frequency data\n        const freqX = Math.floor((x / gridSize) * (bufferLength / 4));\n        const freqY = Math.floor((y / gridSize) * (bufferLength / 4));\n        const freqIndex = (freqX + freqY) % (bufferLength / 2);\n        \n        // Get audio value and apply reactivity\n        const audioValue = dataArray[freqIndex] / 255.0 * reactivity;\n        \n        // Calculate 3D coordinates\n        const xPos = (x - gridSize / 2) * cellWidth * 1.5;\n        const yPos = (y - gridSize / 2) * cellHeight * 1.5;\n        const zPos = audioValue * 100; // Z-axis deformation based on audio\n        \n        // Apply 3D rotation\n        const point = rotate3D(xPos, yPos, zPos, rotationX, rotationY, rotationZ);\n        \n        // Apply perspective projection\n        const scale = focalLength / (focalLength + point.z - eyeZ);\n        const projX = width / 2 + point.x * scale;\n        const projY = height / 2 + point.y * scale;\n        \n        // Store projected point\n        row.push({\n          x: projX,\n          y: projY,\n          z: point.z,\n          scale: scale,\n          value: audioValue\n        });\n      }\n      grid.push(row);\n    }\n    \n    // Draw mesh lines\n    ctx.lineWidth = 1;\n    \n    // Draw horizontal lines\n    for (let y = 0; y < gridSize; y++) {\n      for (let x = 0; x < gridSize - 1; x++) {\n        const point1 = grid[y][x];\n        const point2 = grid[y][x + 1];\n        \n        // Skip lines that would be behind the viewer\n        if (point1.z < eyeZ || point2.z < eyeZ) continue;\n        \n        // Calculate line color based on audio value and depth\n        const lineValue = (point1.value + point2.value) / 2;\n        const depthFactor = Math.min(1, Math.max(0, (point1.z + point2.z) / 400 + 0.5));\n        const lineColor = adjustColor(color, depthFactor * 50 - 25);\n        \n        // Draw line with opacity based on depth\n        ctx.strokeStyle = lineColor;\n        ctx.globalAlpha = depthFactor * 0.8 + 0.2;\n        \n        ctx.beginPath();\n        ctx.moveTo(point1.x, point1.y);\n        ctx.lineTo(point2.x, point2.y);\n        ctx.stroke();\n      }\n    }\n    \n    // Draw vertical lines\n    for (let x = 0; x < gridSize; x++) {\n      for (let y = 0; y < gridSize - 1; y++) {\n        const point1 = grid[y][x];\n        const point2 = grid[y + 1][x];\n        \n        // Skip lines that would be behind the viewer\n        if (point1.z < eyeZ || point2.z < eyeZ) continue;\n        \n        // Calculate line color based on audio value and depth\n        const lineValue = (point1.value + point2.value) / 2;\n        const depthFactor = Math.min(1, Math.max(0, (point1.z + point2.z) / 400 + 0.5));\n        const lineColor = adjustColor(color, depthFactor * 50 - 25);\n        \n        // Draw line with opacity based on depth\n        ctx.strokeStyle = lineColor;\n        ctx.globalAlpha = depthFactor * 0.8 + 0.2;\n        \n        ctx.beginPath();\n        ctx.moveTo(point1.x, point1.y);\n        ctx.lineTo(point2.x, point2.y);\n        ctx.stroke();\n      }\n    }\n    \n    // Draw grid points\n    for (let y = 0; y < gridSize; y++) {\n      for (let x = 0; x < gridSize; x++) {\n        const point = grid[y][x];\n        \n        // Skip points that would be behind the viewer\n        if (point.z < eyeZ) continue;\n        \n        // Calculate point size and color based on audio value and depth\n        const pointSize = 1 + point.value * 3 * point.scale;\n        const depthFactor = Math.min(1, Math.max(0, point.z / 200 + 0.5));\n        const pointColor = adjustColor(color, depthFactor * 60);\n        \n        // Draw point with opacity based on depth\n        ctx.fillStyle = pointColor;\n        ctx.globalAlpha = depthFactor * 0.8 + 0.2;\n        \n        ctx.beginPath();\n        ctx.arc(point.x, point.y, pointSize, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n    \n    // Reset alpha\n    ctx.globalAlpha = 1.0;\n    \n    // Helper function for 3D rotation\n    function rotate3D(x, y, z, rotX, rotY, rotZ) {\n      // Rotate around X axis\n      let y1 = y * Math.cos(rotX) - z * Math.sin(rotX);\n      let z1 = y * Math.sin(rotX) + z * Math.cos(rotX);\n      \n      // Rotate around Y axis\n      let x2 = x * Math.cos(rotY) + z1 * Math.sin(rotY);\n      let z2 = -x * Math.sin(rotY) + z1 * Math.cos(rotY);\n      \n      // Rotate around Z axis\n      let x3 = x2 * Math.cos(rotZ) - y1 * Math.sin(rotZ);\n      let y3 = x2 * Math.sin(rotZ) + y1 * Math.cos(rotZ);\n      \n      return { x: x3, y: y3, z: z2 };\n    }\n  };\n\n  // Add a new spectrum clock visualization\n  const drawClock = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawClock\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ffcc00';\n    const reactivity = (cachedParameters.reactivity || 50) / 40;\n    const detail = (cachedParameters.detail || 50) / 50; // 0-1 detail\n    const speed = (cachedParameters.speed || 50) / 50; // 0-1 speed\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const radius = Math.min(centerX, centerY) * 0.85;\n    \n    // Clear canvas with radial gradient background\n    const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, radius * 1.5);\n    gradient.addColorStop(0, 'rgb(10, 10, 10)');\n    gradient.addColorStop(1, 'rgb(0, 0, 0)');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Draw clock face\n    ctx.strokeStyle = adjustColor(color, -20);\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    ctx.stroke();\n    \n    // Draw hour markers\n    ctx.fillStyle = color;\n    for (let i = 0; i < 12; i++) {\n      const angle = (i / 12) * Math.PI * 2 - Math.PI / 2;\n      const markerRadius = radius * 0.9;\n      const x = centerX + Math.cos(angle) * markerRadius;\n      const y = centerY + Math.sin(angle) * markerRadius;\n      \n      ctx.beginPath();\n      ctx.arc(x, y, 3, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    \n    // Calculate frequency bands for clock hands\n    const bandCount = Math.floor(8 + detail * 16); // 8-24 bands\n    const hands = [];\n    \n    // Calculate average energy for each frequency band\n    for (let i = 0; i < bandCount; i++) {\n      const startBin = Math.floor((i / bandCount) * (bufferLength / 2));\n      const endBin = Math.floor(((i + 1) / bandCount) * (bufferLength / 2));\n      \n      let sum = 0;\n      for (let j = startBin; j < endBin; j++) {\n        sum += dataArray[j] / 255.0;\n      }\n      \n      const avgEnergy = sum / (endBin - startBin) * reactivity;\n      \n      // Calculate hand properties\n      const baseLength = radius * (0.3 + (i / bandCount) * 0.6); // Shorter to longer\n      const length = baseLength * (0.5 + avgEnergy * 0.5); // Extend based on energy\n      const width = 1 + (bandCount - i) / bandCount * 4; // Thicker to thinner\n      const speed = 0.2 + (i / bandCount) * 0.8; // Slower to faster\n      const angle = (i / bandCount) * Math.PI * 2 + timeRef.current * speed * speed;\n      \n      hands.push({\n        angle: angle,\n        length: length,\n        width: width,\n        energy: avgEnergy,\n        hue: (i / bandCount) * 360\n      });\n    }\n    \n    // Draw clock hands\n    for (let i = 0; i < hands.length; i++) {\n      const hand = hands[i];\n      \n      // Calculate hand position\n      const endX = centerX + Math.cos(hand.angle) * hand.length;\n      const endY = centerY + Math.sin(hand.angle) * hand.length;\n      \n      // Create gradient for hand\n      const gradient = ctx.createLinearGradient(centerX, centerY, endX, endY);\n      gradient.addColorStop(0, adjustColor(color, -30));\n      gradient.addColorStop(1, adjustColor(color, hand.energy * 50));\n      \n      // Draw hand\n      ctx.strokeStyle = gradient;\n      ctx.lineWidth = hand.width;\n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.lineTo(endX, endY);\n      ctx.stroke();\n      \n      // Draw hand endpoint\n      ctx.fillStyle = adjustColor(color, hand.energy * 70);\n      ctx.beginPath();\n      ctx.arc(endX, endY, hand.width * 0.8, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    \n    // Draw center circle\n    const centerGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, 10);\n    centerGradient.addColorStop(0, color);\n    centerGradient.addColorStop(1, adjustColor(color, -20));\n    \n    ctx.fillStyle = centerGradient;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, 8, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Draw frequency spectrum around the clock\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = adjustColor(color, 10);\n    ctx.beginPath();\n    \n    const spectrumRadius = radius * 1.1;\n    const spectrumWidth = radius * 0.1;\n    \n    for (let i = 0; i < bufferLength / 4; i++) {\n      const angle = (i / (bufferLength / 4)) * Math.PI * 2 - Math.PI / 2;\n      const value = dataArray[i] / 255.0 * reactivity;\n      \n      const innerRadius = spectrumRadius;\n      const outerRadius = spectrumRadius + value * spectrumWidth;\n      \n      const x1 = centerX + Math.cos(angle) * innerRadius;\n      const y1 = centerY + Math.sin(angle) * innerRadius;\n      const x2 = centerX + Math.cos(angle) * outerRadius;\n      const y2 = centerY + Math.sin(angle) * outerRadius;\n      \n      if (i === 0) {\n        ctx.moveTo(x2, y2);\n      } else {\n        ctx.lineTo(x2, y2);\n      }\n    }\n    \n    // Close the spectrum path\n    ctx.closePath();\n    ctx.stroke();\n    \n    // Fill the spectrum with a gradient\n    const spectrumGradient = ctx.createRadialGradient(centerX, centerY, spectrumRadius, centerX, centerY, spectrumRadius + spectrumWidth);\n    spectrumGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    const adjustedColor = adjustColor(color, 20);\n    spectrumGradient.addColorStop(1, adjustedColor.slice(0, 7) + '33'); // 20% opacity\n    \n    ctx.fillStyle = spectrumGradient;\n    ctx.fill();\n  };\n\n  const drawNebula = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawNebula\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#4b0082'; // Deep purple default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const complexity = (cachedParameters.complexity || 50) / 50; // 0-1 complexity\n    const speed = (cachedParameters.speed || 50) / 100; // 0-0.5 speed\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    \n    // Create a dark background with subtle gradient\n    const bgGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, Math.max(width, height));\n    bgGradient.addColorStop(0, 'rgba(5, 0, 10, 1)');\n    bgGradient.addColorStop(1, 'rgba(0, 0, 5, 1)');\n    ctx.fillStyle = bgGradient;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Calculate average energy in different frequency bands\n    const bassEnergy = getAverageEnergy(dataArray, 0, Math.floor(bufferLength * 0.1)) * reactivity;\n    const midEnergy = getAverageEnergy(dataArray, Math.floor(bufferLength * 0.1), Math.floor(bufferLength * 0.5)) * reactivity;\n    const highEnergy = getAverageEnergy(dataArray, Math.floor(bufferLength * 0.5), bufferLength) * reactivity;\n    \n    // Core size based on bass energy\n    const coreSize = 50 + bassEnergy * 100;\n    \n    // Draw nebula core\n    const coreGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, coreSize);\n    coreGradient.addColorStop(0, adjustColor(color, 50));\n    coreGradient.addColorStop(0.6, adjustColor(color, 20));\n    coreGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n    \n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = coreGradient;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, coreSize, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Number of wisps based on complexity\n    const wispCount = Math.floor(10 + complexity * 30);\n    \n    // Draw nebula wisps\n    for (let i = 0; i < wispCount; i++) {\n      // Use different frequency bands to affect different wisps\n      const energyFactor = i < wispCount / 3 ? bassEnergy : \n                          (i < wispCount * 2 / 3 ? midEnergy : highEnergy);\n      \n      // Base angle for this wisp\n      const baseAngle = (i / wispCount) * Math.PI * 2;\n      // Rotation based on time\n      const rotation = timeRef.current * speed * (1 + (i % 3) * 0.2);\n      const angle = baseAngle + rotation;\n      \n      // Wisp length based on energy\n      const length = 100 + energyFactor * 200 + (Math.sin(timeRef.current + i) * 50);\n      \n      // Wisp width varies\n      const width = 20 + (i % 5) * 10 + energyFactor * 30;\n      \n      // Wisp starting point (from core edge)\n      const startX = centerX + Math.cos(angle) * coreSize * 0.8;\n      const startY = centerY + Math.sin(angle) * coreSize * 0.8;\n      \n      // Wisp end point\n      const endX = centerX + Math.cos(angle) * (coreSize + length);\n      const endY = centerY + Math.sin(angle) * (coreSize + length);\n      \n      // Control points for curved wisp\n      const ctrlX1 = centerX + Math.cos(angle + 0.2) * (coreSize + length * 0.3);\n      const ctrlY1 = centerY + Math.sin(angle + 0.2) * (coreSize + length * 0.3);\n      const ctrlX2 = centerX + Math.cos(angle - 0.2) * (coreSize + length * 0.6);\n      const ctrlY2 = centerY + Math.sin(angle - 0.2) * (coreSize + length * 0.6);\n      \n      // Wisp color based on position in spectrum\n      const hue = (i / wispCount) * 60 + 240; // Blue to purple range\n      const wispColor = `hsla(${hue}, 100%, ${50 + energyFactor * 30}%, ${0.2 + energyFactor * 0.3})`;\n      \n      // Draw the wisp as a gradient along a bezier curve\n      const gradient = ctx.createLinearGradient(startX, startY, endX, endY);\n      gradient.addColorStop(0, adjustColor(color, 20) + '80'); // Semi-transparent\n      gradient.addColorStop(0.5, wispColor);\n      gradient.addColorStop(1, 'rgba(0, 0, 0, 0)'); // Fade out\n      \n      ctx.strokeStyle = gradient;\n      ctx.lineWidth = width;\n      ctx.lineCap = 'round';\n      \n      // Draw curved wisp\n      ctx.beginPath();\n      ctx.moveTo(startX, startY);\n      ctx.bezierCurveTo(ctrlX1, ctrlY1, ctrlX2, ctrlY2, endX, endY);\n      ctx.stroke();\n    }\n    \n    // Add some stars in the background\n    const starCount = 100;\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    \n    for (let i = 0; i < starCount; i++) {\n      // Star position based on index but with some variation over time\n      const angle = (i / starCount) * Math.PI * 2 + timeRef.current * 0.01;\n      const distance = 100 + (i % 10) * 50 + Math.sin(timeRef.current * 0.2 + i) * 20;\n      \n      const x = centerX + Math.cos(angle) * distance;\n      const y = centerY + Math.sin(angle) * distance;\n      \n      // Star size pulsates with high frequencies\n      const size = 1 + (dataArray[Math.floor(i / starCount * bufferLength)] / 255) * 2;\n      \n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    \n    // Reset composite operation\n    ctx.globalCompositeOperation = 'source-over';\n  };\n\n  const drawCityscape = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawCityscape\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ff9900'; // Orange default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const density = (cachedParameters.density || 50) / 50; // 0-1 density\n    const detail = (cachedParameters.detail || 50) / 50; // 0-1 detail\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    \n    // Create night sky gradient background\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, height);\n    skyGradient.addColorStop(0, 'rgb(0, 5, 20)');\n    skyGradient.addColorStop(1, 'rgb(20, 10, 40)');\n    ctx.fillStyle = skyGradient;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Add stars to the sky\n    const starCount = Math.floor(100 * detail);\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    \n    for (let i = 0; i < starCount; i++) {\n      const x = Math.random() * width;\n      const y = Math.random() * height * 0.6; // Stars only in top 60% (sky)\n      const size = Math.random() * 2 + 0.5;\n      \n      // Make stars twinkle based on high frequencies\n      const twinkle = 0.5 + (dataArray[Math.floor(bufferLength * 0.8 + (i % 20))] / 255) * 0.5;\n      \n      ctx.globalAlpha = twinkle;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    \n    ctx.globalAlpha = 1.0;\n    \n    // Add a moon\n    const moonX = width * 0.8;\n    const moonY = height * 0.2;\n    const moonSize = width * 0.05;\n    const moonGlow = ctx.createRadialGradient(moonX, moonY, 0, moonX, moonY, moonSize * 2);\n    moonGlow.addColorStop(0, 'rgba(255, 255, 230, 1)');\n    moonGlow.addColorStop(0.5, 'rgba(255, 255, 230, 0.3)');\n    moonGlow.addColorStop(1, 'rgba(255, 255, 230, 0)');\n    \n    ctx.fillStyle = moonGlow;\n    ctx.beginPath();\n    ctx.arc(moonX, moonY, moonSize * 2, 0, Math.PI * 2);\n    ctx.fill();\n    \n    ctx.fillStyle = 'rgba(255, 255, 230, 1)';\n    ctx.beginPath();\n    ctx.arc(moonX, moonY, moonSize, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Calculate frequency bands for buildings\n    const bandCount = Math.floor(20 + density * 60); // 20-80 buildings\n    const buildings = [];\n    \n    // Calculate average energy for each frequency band\n    for (let i = 0; i < bandCount; i++) {\n      const startBin = Math.floor((i / bandCount) * (bufferLength / 2));\n      const endBin = Math.floor(((i + 1) / bandCount) * (bufferLength / 2));\n      \n      const energy = getAverageEnergy(dataArray, startBin, endBin) * reactivity;\n      \n      // Building properties\n      const buildingWidth = width / bandCount;\n      const maxHeight = height * 0.7; // Max 70% of screen height\n      const buildingHeight = (0.1 + energy * 0.9) * maxHeight; // Min 10% height\n      \n      // Building position\n      const x = i * buildingWidth;\n      const y = height - buildingHeight;\n      \n      // Building color based on height (taller = brighter)\n      const brightness = 20 + (buildingHeight / maxHeight) * 60;\n      const buildingColor = adjustColor(color, brightness - 40);\n      \n      buildings.push({\n        x,\n        y,\n        width: buildingWidth,\n        height: buildingHeight,\n        color: buildingColor,\n        energy\n      });\n    }\n    \n    // Draw buildings from back to front\n    buildings.forEach((building, i) => {\n      // Draw main building shape\n      ctx.fillStyle = building.color;\n      ctx.fillRect(building.x, building.y, building.width, building.height);\n      \n      // Add building details based on detail parameter\n      if (detail > 0.3) {\n        // Add windows\n        const windowSize = Math.max(3, building.width * 0.15);\n        const windowSpacing = windowSize * 1.5;\n        const windowsPerRow = Math.floor(building.width / windowSpacing);\n        const windowsPerColumn = Math.floor(building.height / windowSpacing);\n        \n        // Window color based on energy (more energy = more lit windows)\n        const windowAlpha = 0.3 + building.energy * 0.7;\n        const windowColor = `rgba(255, 255, 200, ${windowAlpha})`;\n        \n        ctx.fillStyle = windowColor;\n        \n        for (let row = 0; row < windowsPerColumn; row++) {\n          for (let col = 0; col < windowsPerRow; col++) {\n            // Randomly light up windows based on energy\n            if (Math.random() < (0.2 + building.energy * 0.8)) {\n              const windowX = building.x + col * windowSpacing + (windowSpacing - windowSize) / 2;\n              const windowY = building.y + row * windowSpacing + (windowSpacing - windowSize) / 2;\n              \n              ctx.fillRect(windowX, windowY, windowSize, windowSize);\n            }\n          }\n        }\n        \n        // Add building top details for taller buildings\n        if (building.height > maxHeight * 0.4 && detail > 0.6) {\n          // Antenna or spire\n          ctx.strokeStyle = 'rgba(100, 100, 100, 0.7)';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          const antennaX = building.x + building.width / 2;\n          const antennaHeight = building.height * 0.2;\n          ctx.moveTo(antennaX, building.y);\n          ctx.lineTo(antennaX, building.y - antennaHeight);\n          ctx.stroke();\n          \n          // Blinking light on top that pulses with beat\n          const beatEnergy = getAverageEnergy(dataArray, 0, 10) * reactivity;\n          if (beatEnergy > 0.7 || Math.sin(timeRef.current * 2) > 0.7) {\n            ctx.fillStyle = 'rgba(255, 0, 0, 0.8)';\n            ctx.beginPath();\n            ctx.arc(antennaX, building.y - antennaHeight, 3, 0, Math.PI * 2);\n            ctx.fill();\n          }\n        }\n      }\n    });\n    \n    // Add foreground silhouette\n    const foregroundHeight = height * 0.05;\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, height - foregroundHeight, width, foregroundHeight);\n  };\n\n  const drawWaterfall = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawWaterfall\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#00ccff'; // Cyan default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const speed = (cachedParameters.speed || 50) / 50; // 0-1 speed\n    const detail = (cachedParameters.detail || 50) / 50; // 0-1 detail\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    \n    // Initialize waterfall history if it doesn't exist\n    if (!window.waterfallHistory) {\n      window.waterfallHistory = [];\n      for (let i = 0; i < height; i++) {\n        window.waterfallHistory.push(new Uint8Array(bufferLength));\n      }\n    }\n    \n    // Update waterfall history - shift all rows down\n    if (Math.random() < speed * 0.2 + 0.1) { // Control speed of waterfall\n      for (let i = window.waterfallHistory.length - 1; i > 0; i--) {\n        window.waterfallHistory[i] = window.waterfallHistory[i - 1];\n      }\n      \n      // Add new data at the top\n      window.waterfallHistory[0] = new Uint8Array(dataArray);\n    }\n    \n    // Create a dark blue background\n    const bgGradient = ctx.createLinearGradient(0, 0, 0, height);\n    bgGradient.addColorStop(0, 'rgb(0, 10, 30)');\n    bgGradient.addColorStop(1, 'rgb(0, 5, 15)');\n    ctx.fillStyle = bgGradient;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Draw the waterfall\n    const barWidth = width / bufferLength;\n    const barCount = Math.min(bufferLength, Math.floor(width / 2)); // Limit for performance\n    const skipFactor = Math.floor(bufferLength / barCount);\n    \n    // Draw each row of the waterfall\n    for (let row = 0; row < window.waterfallHistory.length; row++) {\n      const rowData = window.waterfallHistory[row];\n      \n      for (let i = 0; i < barCount; i++) {\n        const dataIndex = i * skipFactor;\n        const value = rowData[dataIndex] / 255.0 * reactivity;\n        \n        if (value < 0.05) continue; // Skip very low values for performance\n        \n        // Calculate position\n        const x = i * barWidth * skipFactor;\n        const y = row;\n        \n        // Color based on frequency and intensity\n        const hue = (i / barCount) * 180 + 180; // Blue to cyan range\n        const saturation = 80 + value * 20;\n        const lightness = value * 60;\n        const alpha = 0.3 + value * 0.7;\n        \n        ctx.fillStyle = `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\n        ctx.fillRect(x, y, barWidth * skipFactor, 1);\n      }\n    }\n    \n    // Draw water surface at the top with reflection\n    const surfaceY = 50;\n    ctx.fillStyle = 'rgba(0, 150, 255, 0.2)';\n    ctx.fillRect(0, 0, width, surfaceY);\n    \n    // Draw ripples on the surface based on bass frequencies\n    const rippleCount = Math.floor(5 + detail * 15);\n    const bassEnergy = getAverageEnergy(dataArray, 0, Math.floor(bufferLength * 0.1)) * reactivity;\n    \n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n    ctx.lineWidth = 1;\n    \n    for (let i = 0; i < rippleCount; i++) {\n      if (Math.random() > bassEnergy * 0.5) continue;\n      \n      const x = Math.random() * width;\n      const y = Math.random() * surfaceY;\n      const size = 5 + Math.random() * 20 * bassEnergy;\n      \n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.stroke();\n      \n      // Smaller inner ripple\n      ctx.beginPath();\n      ctx.arc(x, y, size * 0.7, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n    \n    // Draw splashes when bass hits are detected\n    if (bassEnergy > 0.7) {\n      const splashCount = Math.floor(bassEnergy * 10);\n      \n      for (let i = 0; i < splashCount; i++) {\n        // Create splash particles\n        const x = Math.random() * width;\n        const particleCount = Math.floor(5 + Math.random() * 10);\n        \n        ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n        \n        for (let j = 0; j < particleCount; j++) {\n          const particleX = x + (Math.random() - 0.5) * 40;\n          const particleY = Math.random() * 30;\n          const size = 1 + Math.random() * 3;\n          \n          ctx.beginPath();\n          ctx.arc(particleX, particleY, size, 0, Math.PI * 2);\n          ctx.fill();\n        }\n      }\n    }\n    \n    // Draw waterfall edge highlights\n    const edgeGradient = ctx.createLinearGradient(0, surfaceY, 0, height);\n    edgeGradient.addColorStop(0, 'rgba(255, 255, 255, 0.4)');\n    edgeGradient.addColorStop(0.1, 'rgba(255, 255, 255, 0.1)');\n    edgeGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n    \n    ctx.fillStyle = edgeGradient;\n    ctx.fillRect(0, surfaceY, 10, height - surfaceY); // Left edge\n    ctx.fillRect(width - 10, surfaceY, 10, height - surfaceY); // Right edge\n    \n    // Draw mist at the bottom\n    const mistGradient = ctx.createLinearGradient(0, height - 100, 0, height);\n    mistGradient.addColorStop(0, 'rgba(255, 255, 255, 0)');\n    mistGradient.addColorStop(1, 'rgba(255, 255, 255, 0.2)');\n    \n    ctx.fillStyle = mistGradient;\n    ctx.fillRect(0, height - 100, width, 100);\n  };\n\n  const drawConstellation = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawConstellation\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ffffff'; // White default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const density = (cachedParameters.density || 50) / 50; // 0-1 density\n    const speed = (cachedParameters.speed || 50) / 100; // 0-0.5 speed\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    \n    // Create a dark space background\n    const bgGradient = ctx.createRadialGradient(width/2, height/2, 0, width/2, height/2, Math.max(width, height));\n    bgGradient.addColorStop(0, 'rgb(10, 10, 30)');\n    bgGradient.addColorStop(1, 'rgb(0, 0, 10)');\n    ctx.fillStyle = bgGradient;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Initialize stars if they don't exist\n    if (!window.constellationStars) {\n      window.constellationStars = [];\n      const starCount = Math.floor(50 + density * 150); // 50-200 stars\n      \n      for (let i = 0; i < starCount; i++) {\n        // Assign each star to a frequency band\n        const freqBand = Math.floor(Math.random() * bufferLength);\n        \n        window.constellationStars.push({\n          x: Math.random() * width,\n          y: Math.random() * height,\n          size: 1 + Math.random() * 3,\n          brightness: 0.3 + Math.random() * 0.7,\n          freqBand: freqBand,\n          hue: Math.random() * 60 + 180, // Blue to cyan range\n          connections: []\n        });\n      }\n    }\n    \n    // Update star positions slightly based on time\n    const stars = window.constellationStars;\n    const rotationCenter = { x: width / 2, y: height / 2 };\n    const rotationSpeed = speed * 0.01;\n    \n    for (let i = 0; i < stars.length; i++) {\n      const star = stars[i];\n      \n      // Calculate distance from center\n      const dx = star.x - rotationCenter.x;\n      const dy = star.y - rotationCenter.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      \n      // Calculate rotation angle (further stars rotate slower)\n      const rotationFactor = 1 - (distance / Math.max(width, height));\n      const angle = rotationSpeed * rotationFactor;\n      \n      // Apply rotation\n      const cos = Math.cos(angle);\n      const sin = Math.sin(angle);\n      \n      const newX = rotationCenter.x + (dx * cos - dy * sin);\n      const newY = rotationCenter.y + (dx * sin + dy * cos);\n      \n      // Keep stars within bounds\n      star.x = Math.max(0, Math.min(width, newX));\n      star.y = Math.max(0, Math.min(height, newY));\n      \n      // Update star brightness based on its frequency band\n      const freqValue = dataArray[star.freqBand] / 255.0;\n      star.brightness = 0.3 + freqValue * reactivity * 0.7;\n    }\n    \n    // Find connections between stars based on audio patterns\n    const maxConnections = Math.floor(density * 100); // Maximum number of connections\n    const connectionThreshold = 150 * (1 - density * 0.5); // Distance threshold for connections\n    \n    // Clear previous connections\n    stars.forEach(star => star.connections = []);\n    \n    // Find new connections\n    let connectionCount = 0;\n    \n    for (let i = 0; i < stars.length && connectionCount < maxConnections; i++) {\n      const star1 = stars[i];\n      \n      for (let j = i + 1; j < stars.length && connectionCount < maxConnections; j++) {\n        const star2 = stars[j];\n        \n        // Calculate distance between stars\n        const dx = star1.x - star2.x;\n        const dy = star1.y - star2.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        // Connect stars if they're close enough and their frequencies are related\n        const freqDiff = Math.abs(star1.freqBand - star2.freqBand);\n        const rhythmicPattern = (timeRef.current * 2) % 1 < 0.5; // Simple rhythm pattern\n        \n        if (distance < connectionThreshold && \n            (freqDiff < 10 || freqDiff > bufferLength - 10 || rhythmicPattern)) {\n          \n          // Calculate connection strength based on audio energy\n          const freqAvg = (dataArray[star1.freqBand] + dataArray[star2.freqBand]) / (2 * 255);\n          const strength = 0.1 + freqAvg * reactivity * 0.9;\n          \n          if (strength > 0.2) { // Only connect if there's enough energy\n            star1.connections.push({ star: star2, strength });\n            connectionCount++;\n          }\n        }\n      }\n    }\n    \n    // Draw connections first (behind stars)\n    ctx.lineCap = 'round';\n    \n    stars.forEach(star => {\n      star.connections.forEach(conn => {\n        const gradient = ctx.createLinearGradient(star.x, star.y, conn.star.x, conn.star.y);\n        \n        // Create gradient based on star colors\n        const color1 = `hsla(${star.hue}, 100%, 70%, ${conn.strength})`;\n        const color2 = `hsla(${conn.star.hue}, 100%, 70%, ${conn.strength})`;\n        \n        gradient.addColorStop(0, color1);\n        gradient.addColorStop(1, color2);\n        \n        ctx.strokeStyle = gradient;\n        ctx.lineWidth = 1 + conn.strength * 2;\n        \n        ctx.beginPath();\n        ctx.moveTo(star.x, star.y);\n        ctx.lineTo(conn.star.x, conn.star.y);\n        ctx.stroke();\n      });\n    });\n    \n    // Draw stars\n    stars.forEach(star => {\n      // Star color based on frequency\n      const freqValue = dataArray[star.freqBand] / 255.0;\n      const starColor = `hsla(${star.hue}, 100%, 70%, ${star.brightness})`;\n      \n      // Draw star glow\n      const glowSize = star.size * (1 + freqValue * reactivity * 3);\n      const glow = ctx.createRadialGradient(star.x, star.y, 0, star.x, star.y, glowSize);\n      glow.addColorStop(0, starColor);\n      glow.addColorStop(1, 'rgba(0, 0, 0, 0)');\n      \n      ctx.fillStyle = glow;\n      ctx.beginPath();\n      ctx.arc(star.x, star.y, glowSize, 0, Math.PI * 2);\n      ctx.fill();\n      \n      // Draw star core\n      ctx.fillStyle = 'rgba(255, 255, 255, ' + star.brightness + ')';\n      ctx.beginPath();\n      ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n      ctx.fill();\n    });\n    \n    // Draw constellation names occasionally\n    if (Math.random() < 0.005) {\n      const constellationNames = [\n        'Audionis', 'Beatoria', 'Rhythmica', 'Melodius', \n        'Harmonix', 'Synthus', 'Bassus Major', 'Treble Minor'\n      ];\n      \n      const name = constellationNames[Math.floor(Math.random() * constellationNames.length)];\n      const x = 100 + Math.random() * (width - 200);\n      const y = 100 + Math.random() * (height - 200);\n      \n      ctx.font = '20px Arial';\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\n      ctx.fillText(name, x, y);\n    }\n  };\n\n  const drawMandala = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawMandala\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ff00ff'; // Magenta default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const complexity = (cachedParameters.complexity || 50) / 50; // 0-1 complexity\n    const speed = (cachedParameters.speed || 50) / 100; // 0-0.5 speed\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    \n    // Create a dark background with subtle gradient\n    const bgGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, Math.max(width, height) / 2);\n    bgGradient.addColorStop(0, 'rgb(10, 0, 20)');\n    bgGradient.addColorStop(1, 'rgb(0, 0, 10)');\n    ctx.fillStyle = bgGradient;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Calculate average energy in different frequency bands\n    const bandCount = Math.floor(4 + complexity * 12); // 4-16 bands\n    const energyBands = [];\n    \n    for (let i = 0; i < bandCount; i++) {\n      const startBin = Math.floor((i / bandCount) * (bufferLength / 2));\n      const endBin = Math.floor(((i + 1) / bandCount) * (bufferLength / 2));\n      energyBands.push(getAverageEnergy(dataArray, startBin, endBin) * reactivity);\n    }\n    \n    // Calculate overall energy for scaling the mandala\n    const overallEnergy = energyBands.reduce((sum, energy) => sum + energy, 0) / bandCount;\n    \n    // Base radius of the mandala\n    const baseRadius = Math.min(width, height) * 0.35;\n    const radius = baseRadius * (0.8 + overallEnergy * 0.4);\n    \n    // Number of symmetry axes\n    const symmetryCount = Math.floor(4 + complexity * 12); // 4-16 symmetry axes\n    \n    // Draw the mandala layers from outside to inside\n    const layerCount = Math.floor(3 + complexity * 7); // 3-10 layers\n    \n    for (let layer = 0; layer < layerCount; layer++) {\n      // Layer properties\n      const layerRadius = radius * (1 - layer / layerCount * 0.8);\n      const layerEnergy = energyBands[layer % bandCount];\n      const layerRotation = timeRef.current * speed * (1 + layer * 0.1) + layer * Math.PI / layerCount;\n      \n      // Layer color based on position and energy\n      const hue = (layer / layerCount) * 300 + timeRef.current * 10;\n      const saturation = 80 + layerEnergy * 20;\n      const lightness = 40 + layerEnergy * 30;\n      const layerColor = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n      \n      // Draw the layer elements\n      ctx.strokeStyle = layerColor;\n      ctx.fillStyle = adjustColor(layerColor, -20);\n      \n      // Element complexity increases with layer\n      const elementComplexity = 0.2 + (layer / layerCount) * 0.8 * complexity;\n      \n      // Draw symmetrical elements\n      for (let i = 0; i < symmetryCount; i++) {\n        const angle = (i / symmetryCount) * Math.PI * 2 + layerRotation;\n        \n        // Draw petal/element\n        drawMandalaElement(\n          ctx, \n          centerX, \n          centerY, \n          angle, \n          layerRadius, \n          layerEnergy, \n          elementComplexity,\n          layer,\n          symmetryCount\n        );\n      }\n      \n      // Draw connecting circles between layers\n      if (layer > 0 && layer < layerCount - 1) {\n        const circleRadius = layerRadius * (0.1 + layerEnergy * 0.1);\n        ctx.lineWidth = 1 + layerEnergy * 3;\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, layerRadius, 0, Math.PI * 2);\n        ctx.stroke();\n      }\n    }\n    \n    // Draw central mandala element\n    const centerSize = radius * 0.2 * (0.8 + overallEnergy * 0.4);\n    const centerGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, centerSize);\n    centerGradient.addColorStop(0, adjustColor(color, 30));\n    centerGradient.addColorStop(0.7, adjustColor(color, 10));\n    centerGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n    \n    ctx.fillStyle = centerGradient;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, centerSize, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Draw sacred geometry in the center\n    ctx.strokeStyle = adjustColor(color, 50);\n    ctx.lineWidth = 1;\n    \n    // Draw flower of life pattern\n    const flowerRadius = centerSize * 0.6;\n    const petalCount = Math.floor(6 + overallEnergy * 6);\n    \n    for (let i = 0; i < petalCount; i++) {\n      const angle = (i / petalCount) * Math.PI * 2 + timeRef.current * speed;\n      const x = centerX + Math.cos(angle) * flowerRadius * 0.5;\n      const y = centerY + Math.sin(angle) * flowerRadius * 0.5;\n      \n      ctx.beginPath();\n      ctx.arc(x, y, flowerRadius * 0.5, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n    \n    // Function to draw a single mandala element\n    function drawMandalaElement(ctx, centerX, centerY, angle, radius, energy, complexity, layer, symmetryCount) {\n      // Calculate element position\n      const x = centerX + Math.cos(angle) * radius;\n      const y = centerY + Math.sin(angle) * radius;\n      \n      // Element size based on energy\n      const size = radius * 0.2 * (0.5 + energy * 0.8);\n      \n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(angle + Math.PI / 2);\n      \n      // Choose element type based on layer\n      const elementType = layer % 4;\n      \n      ctx.lineWidth = 1 + energy * 2;\n      \n      switch (elementType) {\n        case 0: // Petal shape\n          ctx.beginPath();\n          ctx.moveTo(0, -size);\n          ctx.bezierCurveTo(\n            size * complexity, -size * 0.5, \n            size * complexity, size * 0.5, \n            0, size\n          );\n          ctx.bezierCurveTo(\n            -size * complexity, size * 0.5, \n            -size * complexity, -size * 0.5, \n            0, -size\n          );\n          ctx.fill();\n          ctx.stroke();\n          break;\n          \n        case 1: // Triangular element\n          ctx.beginPath();\n          ctx.moveTo(0, -size);\n          ctx.lineTo(size * 0.7 * complexity, size * 0.5);\n          ctx.lineTo(-size * 0.7 * complexity, size * 0.5);\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n          \n        case 2: // Circular element\n          ctx.beginPath();\n          ctx.arc(0, 0, size * 0.5, 0, Math.PI * 2);\n          ctx.fill();\n          ctx.stroke();\n          \n          // Add inner detail\n          if (complexity > 0.5) {\n            ctx.beginPath();\n            ctx.arc(0, 0, size * 0.25, 0, Math.PI * 2);\n            ctx.stroke();\n          }\n          break;\n          \n        case 3: // Spiral element\n          ctx.beginPath();\n          for (let i = 0; i < Math.PI * 2 * complexity; i += 0.1) {\n            const spiralRadius = (i / (Math.PI * 2)) * size;\n            const sx = Math.cos(i) * spiralRadius;\n            const sy = Math.sin(i) * spiralRadius;\n            \n            if (i === 0) {\n              ctx.moveTo(sx, sy);\n            } else {\n              ctx.lineTo(sx, sy);\n            }\n          }\n          ctx.stroke();\n          break;\n      }\n      \n      ctx.restore();\n    }\n  };\n\n  const drawOcean = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawOcean\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#0066cc'; // Ocean blue default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const detail = (cachedParameters.detail || 50) / 50; // 0-1 detail\n    const speed = (cachedParameters.speed || 50) / 100; // 0-0.5 speed\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    \n    // Initialize wave points if they don't exist\n    if (!window.oceanWaves) {\n      window.oceanWaves = [];\n      const waveCount = 5; // Number of wave layers\n      \n      for (let w = 0; w < waveCount; w++) {\n        const pointCount = Math.floor(20 + detail * 60); // 20-80 points per wave\n        const points = [];\n        \n        for (let i = 0; i <= pointCount; i++) {\n          points.push({\n            x: (i / pointCount) * width,\n            y: height * (0.5 + (w * 0.1)), // Stagger waves vertically\n            baseY: height * (0.5 + (w * 0.1)),\n            offset: Math.random() * Math.PI * 2\n          });\n        }\n        \n        window.oceanWaves.push({\n          points,\n          speed: 0.5 + (w / waveCount) * 0.5, // Different speeds for each wave\n          amplitude: 10 + (waveCount - w) * 5, // Different amplitudes (higher for foreground)\n          color: adjustColor(color, -w * 10) // Darker for background waves\n        });\n      }\n    }\n    \n    // Create sky gradient\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, height * 0.5);\n    \n    // Get bass and mid frequencies for sky color\n    const bassEnergy = getAverageEnergy(dataArray, 0, Math.floor(bufferLength * 0.1)) * reactivity;\n    const midEnergy = getAverageEnergy(dataArray, Math.floor(bufferLength * 0.1), Math.floor(bufferLength * 0.5)) * reactivity;\n    \n    // Sky colors change with audio\n    const skyTopColor = `rgb(${20 + bassEnergy * 50}, ${100 + midEnergy * 50}, ${180 + bassEnergy * 20})`;\n    const skyBottomColor = `rgb(${100 + midEnergy * 30}, ${150 + bassEnergy * 30}, ${200 + midEnergy * 20})`;\n    \n    skyGradient.addColorStop(0, skyTopColor);\n    skyGradient.addColorStop(1, skyBottomColor);\n    \n    // Fill sky\n    ctx.fillStyle = skyGradient;\n    ctx.fillRect(0, 0, width, height * 0.5);\n    \n    // Draw sun/moon\n    const celestialSize = width * 0.08;\n    const celestialX = width * 0.8;\n    const celestialY = height * 0.2;\n    \n    // Sun/moon color based on audio\n    const celestialColor = `rgba(${255 - bassEnergy * 50}, ${255 - bassEnergy * 20}, ${220 - bassEnergy * 20}, 0.8)`;\n    \n    // Draw glow\n    const glowGradient = ctx.createRadialGradient(celestialX, celestialY, 0, celestialX, celestialY, celestialSize * 2);\n    glowGradient.addColorStop(0, celestialColor);\n    glowGradient.addColorStop(1, 'rgba(255, 255, 220, 0)');\n    \n    ctx.fillStyle = glowGradient;\n    ctx.beginPath();\n    ctx.arc(celestialX, celestialY, celestialSize * 2, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Draw sun/moon body\n    ctx.fillStyle = celestialColor;\n    ctx.beginPath();\n    ctx.arc(celestialX, celestialY, celestialSize, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Draw clouds if detail is high enough\n    if (detail > 0.4) {\n      const cloudCount = Math.floor(3 + detail * 7); // 3-10 clouds\n      \n      for (let i = 0; i < cloudCount; i++) {\n        // Cloud position\n        const cloudX = ((i / cloudCount) * width * 1.5) % (width * 1.2) - width * 0.1 + timeRef.current * speed * 20 % width;\n        const cloudY = height * (0.1 + Math.sin(i) * 0.1);\n        const cloudSize = width * (0.05 + (i % 3) * 0.03);\n        \n        // Cloud color affected by audio\n        const cloudOpacity = 0.7 + midEnergy * 0.3;\n        ctx.fillStyle = `rgba(255, 255, 255, ${cloudOpacity})`;\n        \n        // Draw cloud as a group of circles\n        for (let j = 0; j < 5; j++) {\n          const offsetX = (j - 2) * cloudSize * 0.5;\n          const offsetY = Math.sin(j * 1.5) * cloudSize * 0.2;\n          const size = cloudSize * (0.7 + Math.sin(j) * 0.3);\n          \n          ctx.beginPath();\n          ctx.arc(cloudX + offsetX, cloudY + offsetY, size, 0, Math.PI * 2);\n          ctx.fill();\n        }\n      }\n    }\n    \n    // Update and draw waves\n    const waves = window.oceanWaves;\n    \n    // Calculate frequency bands for wave modulation\n    const bandCount = waves.length;\n    const energyBands = [];\n    \n    for (let i = 0; i < bandCount; i++) {\n      const startBin = Math.floor((i / bandCount) * (bufferLength / 2));\n      const endBin = Math.floor(((i + 1) / bandCount) * (bufferLength / 2));\n      energyBands.push(getAverageEnergy(dataArray, startBin, endBin) * reactivity);\n    }\n    \n    // Create ocean base gradient\n    const oceanGradient = ctx.createLinearGradient(0, height * 0.5, 0, height);\n    oceanGradient.addColorStop(0, adjustColor(color, 20));\n    oceanGradient.addColorStop(1, adjustColor(color, -30));\n    \n    // Fill ocean base\n    ctx.fillStyle = oceanGradient;\n    ctx.fillRect(0, height * 0.5, width, height * 0.5);\n    \n    // Update and draw each wave\n    for (let w = 0; w < waves.length; w++) {\n      const wave = waves[w];\n      const energy = energyBands[w % energyBands.length];\n      \n      // Update wave points\n      for (let i = 0; i < wave.points.length; i++) {\n        const point = wave.points[i];\n        \n        // Wave motion: combination of time, position, and audio reactivity\n        const waveTime = timeRef.current * speed * wave.speed;\n        const wavePos = (i / wave.points.length) * Math.PI * 10 + point.offset;\n        \n        // Primary wave motion\n        const baseWave = Math.sin(waveTime + wavePos) * wave.amplitude;\n        \n        // Secondary choppiness based on audio\n        const choppiness = Math.sin(waveTime * 2 + wavePos * 2) * wave.amplitude * 0.3 * energy;\n        \n        // Update point position\n        point.y = point.baseY + baseWave + choppiness;\n      }\n      \n      // Draw the wave\n      ctx.fillStyle = wave.color;\n      ctx.beginPath();\n      ctx.moveTo(0, height);\n      ctx.lineTo(wave.points[0].x, wave.points[0].y);\n      \n      // Draw wave using bezier curves for smoothness\n      for (let i = 0; i < wave.points.length - 1; i++) {\n        const current = wave.points[i];\n        const next = wave.points[i + 1];\n        \n        // Control points for bezier curve\n        const cpX1 = current.x + (next.x - current.x) / 3;\n        const cpY1 = current.y;\n        const cpX2 = current.x + (next.x - current.x) * 2 / 3;\n        const cpY2 = next.y;\n        \n        ctx.bezierCurveTo(cpX1, cpY1, cpX2, cpY2, next.x, next.y);\n      }\n      \n      // Complete the wave shape\n      ctx.lineTo(width, height);\n      ctx.closePath();\n      ctx.fill();\n      \n      // Add foam/highlights to wave crests if detail is high enough\n      if (detail > 0.6 && w < 2) { // Only for top waves\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.lineWidth = 2;\n        \n        for (let i = 0; i < wave.points.length - 1; i++) {\n          const point = wave.points[i];\n          const nextPoint = wave.points[i + 1];\n          \n          // Only add foam to wave peaks\n          if (i > 0) {\n            const prevPoint = wave.points[i - 1];\n            \n            // Check if this is a peak (higher than neighbors)\n            if (point.y < prevPoint.y && point.y < nextPoint.y) {\n              // Foam intensity based on how sharp the peak is and audio energy\n              const peakSharpness = Math.min(\n                Math.abs(point.y - prevPoint.y),\n                Math.abs(point.y - nextPoint.y)\n              );\n              \n              if (peakSharpness > wave.amplitude * 0.3 * energy) {\n                // Draw foam as small arcs\n                ctx.beginPath();\n                ctx.arc(point.x, point.y, peakSharpness * 0.5, 0, Math.PI);\n                ctx.stroke();\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    // Add reflections on the water\n    if (detail > 0.3) {\n      // Sun/moon reflection\n      const reflectionGradient = ctx.createLinearGradient(\n        celestialX, height * 0.5,\n        celestialX, height * 0.7\n      );\n      reflectionGradient.addColorStop(0, `rgba(255, 255, 220, ${0.3 + bassEnergy * 0.2})`);\n      reflectionGradient.addColorStop(1, 'rgba(255, 255, 220, 0)');\n      \n      ctx.fillStyle = reflectionGradient;\n      ctx.beginPath();\n      ctx.moveTo(celestialX - celestialSize, height * 0.5);\n      ctx.lineTo(celestialX + celestialSize, height * 0.5);\n      ctx.lineTo(celestialX + celestialSize * 2, height * 0.7);\n      ctx.lineTo(celestialX - celestialSize * 2, height * 0.7);\n      ctx.closePath();\n      ctx.fill();\n    }\n  };\n\n  const drawDNA = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawDNA\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#00ff99'; // Teal default\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // 0-1 reactivity\n    const detail = (cachedParameters.detail || 50) / 50; // 0-1 detail\n    const speed = (cachedParameters.speed || 50) / 50; // 0-1 speed\n    \n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const centerX = width / 2;\n    \n    // Create a dark background with subtle gradient\n    const bgGradient = ctx.createLinearGradient(0, 0, 0, height);\n    bgGradient.addColorStop(0, 'rgb(0, 10, 20)');\n    bgGradient.addColorStop(1, 'rgb(0, 5, 10)');\n    ctx.fillStyle = bgGradient;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Calculate frequency bands for DNA modulation\n    const bandCount = Math.floor(10 + detail * 20); // 10-30 bands\n    const energyBands = [];\n    \n    for (let i = 0; i < bandCount; i++) {\n      const startBin = Math.floor((i / bandCount) * (bufferLength / 2));\n      const endBin = Math.floor(((i + 1) / bandCount) * (bufferLength / 2));\n      energyBands.push(getAverageEnergy(dataArray, startBin, endBin) * reactivity);\n    }\n    \n    // DNA helix parameters\n    const dnaLength = height * 1.5; // Length of the DNA strand\n    const dnaWidth = width * 0.15; // Width of the DNA helix\n    const dnaSegments = Math.floor(20 + detail * 60); // Number of segments in the DNA\n    const dnaRotation = timeRef.current * speed; // Rotation of the DNA over time\n    \n    // Calculate overall energy for DNA animation\n    const overallEnergy = energyBands.reduce((sum, energy) => sum + energy, 0) / bandCount;\n    \n    // Vertical offset to center the DNA\n    const verticalOffset = (height - dnaLength) / 2;\n    \n    // Draw the DNA strands\n    for (let strand = 0; strand < 2; strand++) {\n      // Each strand has a different color\n      const strandColor = strand === 0 ? color : adjustColor(color, 40);\n      \n      // Draw the strand backbone\n      ctx.strokeStyle = adjustColor(strandColor, -20);\n      ctx.lineWidth = 4;\n      ctx.beginPath();\n      \n      for (let i = 0; i <= dnaSegments; i++) {\n        const progress = i / dnaSegments;\n        const y = verticalOffset + progress * dnaLength;\n        \n        // Sine wave for the strand, offset by PI for the second strand\n        const phase = strand * Math.PI;\n        const waveAmplitude = dnaWidth * (0.8 + overallEnergy * 0.4);\n        const x = centerX + Math.sin(progress * Math.PI * 10 + dnaRotation + phase) * waveAmplitude;\n        \n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      \n      ctx.stroke();\n    }\n    \n    // Draw the base pairs (connections between strands)\n    for (let i = 0; i < dnaSegments; i++) {\n      const progress = i / dnaSegments;\n      const y = verticalOffset + progress * dnaLength;\n      \n      // Get the energy for this segment\n      const energy = energyBands[i % bandCount];\n      \n      // Calculate positions of the two strand points at this segment\n      const phase1 = 0;\n      const phase2 = Math.PI;\n      const waveAmplitude = dnaWidth * (0.8 + overallEnergy * 0.4);\n      \n      const x1 = centerX + Math.sin(progress * Math.PI * 10 + dnaRotation + phase1) * waveAmplitude;\n      const x2 = centerX + Math.sin(progress * Math.PI * 10 + dnaRotation + phase2) * waveAmplitude;\n      \n      // Only draw base pairs at certain intervals\n      if (i % 2 === 0) {\n        // Base pair color based on frequency band\n        const hue = (i / dnaSegments) * 180 + 180; // Cyan to blue range\n        const basePairColor = `hsla(${hue}, 100%, 70%, ${0.5 + energy * 0.5})`;\n        \n        // Draw base pair connection\n        ctx.strokeStyle = basePairColor;\n        ctx.lineWidth = 2 + energy * 4;\n        \n        ctx.beginPath();\n        ctx.moveTo(x1, y);\n        ctx.lineTo(x2, y);\n        ctx.stroke();\n        \n        // Draw nucleotide bases at the ends of the connection\n        const baseSize = 3 + energy * 5;\n        \n        // Base 1\n        ctx.fillStyle = adjustColor(color, 20);\n        ctx.beginPath();\n        ctx.arc(x1, y, baseSize, 0, Math.PI * 2);\n        ctx.fill();\n        \n        // Base 2\n        ctx.fillStyle = adjustColor(color, 60);\n        ctx.beginPath();\n        ctx.arc(x2, y, baseSize, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n    \n    // Add glow effect to the DNA\n    if (detail > 0.5) {\n      ctx.globalCompositeOperation = 'lighter';\n      \n      // Draw glow along the DNA strands\n      for (let i = 0; i < dnaSegments; i += 4) {\n        const progress = i / dnaSegments;\n        const y = verticalOffset + progress * dnaLength;\n        \n        // Get the energy for this segment\n        const energy = energyBands[i % bandCount];\n        \n        // Only add glow if there's enough energy\n        if (energy > 0.5) {\n          // Calculate position on the DNA\n          const phase = (i % 2) * Math.PI; // Alternate between strands\n          const waveAmplitude = dnaWidth * (0.8 + overallEnergy * 0.4);\n          const x = centerX + Math.sin(progress * Math.PI * 10 + dnaRotation + phase) * waveAmplitude;\n          \n          // Glow size based on energy\n          const glowSize = 20 + energy * 30;\n          \n          // Glow color\n          const hue = (i / dnaSegments) * 180 + 180;\n          const glowColor = `hsla(${hue}, 100%, 70%, ${energy * 0.3})`;\n          \n          // Draw glow\n          const glow = ctx.createRadialGradient(x, y, 0, x, y, glowSize);\n          glow.addColorStop(0, glowColor);\n          glow.addColorStop(1, 'rgba(0, 0, 0, 0)');\n          \n          ctx.fillStyle = glow;\n          ctx.beginPath();\n          ctx.arc(x, y, glowSize, 0, Math.PI * 2);\n          ctx.fill();\n        }\n      }\n      \n      ctx.globalCompositeOperation = 'source-over';\n    }\n    \n    // Add floating particles around the DNA if detail is high\n    if (detail > 0.7) {\n      const particleCount = Math.floor(20 + detail * 60);\n      \n      for (let i = 0; i < particleCount; i++) {\n        // Particle position - keep near the DNA\n        const angle = Math.random() * Math.PI * 2;\n        const distance = dnaWidth * 2 + Math.random() * width * 0.2;\n        const x = centerX + Math.cos(angle) * distance;\n        const y = Math.random() * height;\n        \n        // Particle size based on audio\n        const particleEnergy = energyBands[i % bandCount];\n        const size = 1 + particleEnergy * 3;\n        \n        // Particle color\n        const hue = (i / particleCount) * 180 + 180;\n        const particleColor = `hsla(${hue}, 100%, 70%, ${0.3 + particleEnergy * 0.7})`;\n        \n        // Draw particle\n        ctx.fillStyle = particleColor;\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n  };\n\n  function getAverageEnergy(data, startBin, endBin) {\n    let sum = 0;\n    const binCount = Math.min(endBin - startBin, data.length - startBin);\n    \n    if (binCount <= 0) return 0;\n    \n    for (let i = startBin; i < startBin + binCount; i++) {\n      sum += data[i] / 255.0;\n    }\n    \n    return sum / binCount;\n  }\n\n  // Update parameters when initialParameters change - use a ref to avoid re-renders\n  useEffect(() => {\n    // Only log in development\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(\"Visualizer received updated parameters:\", initialParameters);\n    }\n    \n    if (initialParameters && Object.keys(initialParameters).length > 0) {\n      // Use a simple update without triggering re-renders\n      setParameters(initialParameters);\n    }\n  }, [initialParameters]);\n\n  // Add a function to update parameters\n  const updateParameters = (newParameters) => {\n    // Only log in development\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(\"Updating visualization parameters:\", newParameters);\n    }\n    \n    setParameters(newParameters);\n  };\n\n  return (\n    <div className=\"visualizer-container\">\n      <div \n        ref={containerRef}\n        className={`visualizer-aspect-container ${RESOLUTIONS[resolution].className}`}\n      >\n        {use3D ? (\n          <ThreeVisualizer \n            audioData={audioData}\n            template={template.replace('3d', '')} // Remove '3d' suffix for the ThreeVisualizer\n            isPlaying={isPlaying}\n            parameters={parameters}\n          />\n        ) : (\n          <canvas ref={canvasRef} className=\"visualizer-canvas\"></canvas>\n        )}\n        <div className=\"visualizer-overlay\"></div>\n        <div className=\"resolution-indicator\">{resolution} ({RESOLUTIONS[resolution].width}×{RESOLUTIONS[resolution].height})</div>\n      </div>\n    </div>\n  );\n});\n\nexport default Visualizer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}