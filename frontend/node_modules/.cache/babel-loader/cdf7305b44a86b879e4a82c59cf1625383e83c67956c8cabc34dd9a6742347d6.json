{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\Controls.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './Controls.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Controls = ({\n  isPlaying,\n  onPlayPause,\n  audioElement\n}) => {\n  _s();\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const progressRef = useRef(null);\n  const progressBarRef = useRef(null);\n  const isDraggingRef = useRef(false);\n  const [hoverPosition, setHoverPosition] = useState(null);\n  const [wasPlaying, setWasPlaying] = useState(false);\n  useEffect(() => {\n    if (!audioElement) return;\n    const handleTimeUpdate = () => {\n      // Always update current time when audio updates\n      setCurrentTime(audioElement.currentTime);\n    };\n    const handleLoadedMetadata = () => {\n      setDuration(audioElement.duration);\n      setCurrentTime(audioElement.currentTime);\n    };\n    const handleDurationChange = () => {\n      setDuration(audioElement.duration);\n    };\n\n    // Add all event listeners\n    audioElement.addEventListener('timeupdate', handleTimeUpdate);\n    audioElement.addEventListener('loadedmetadata', handleLoadedMetadata);\n    audioElement.addEventListener('durationchange', handleDurationChange);\n    audioElement.addEventListener('seeking', handleTimeUpdate);\n    audioElement.addEventListener('seeked', handleTimeUpdate);\n\n    // Set initial values if already loaded\n    if (audioElement.duration) {\n      setDuration(audioElement.duration);\n      setCurrentTime(audioElement.currentTime);\n    }\n    return () => {\n      audioElement.removeEventListener('timeupdate', handleTimeUpdate);\n      audioElement.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      audioElement.removeEventListener('durationchange', handleDurationChange);\n      audioElement.removeEventListener('seeking', handleTimeUpdate);\n      audioElement.removeEventListener('seeked', handleTimeUpdate);\n    };\n  }, [audioElement]);\n  const formatTime = time => {\n    if (!isFinite(time) || time < 0) return '0:00';\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const updateAudioTime = async clientX => {\n    if (!audioElement || !progressBarRef.current || !duration) return;\n    try {\n      const rect = progressBarRef.current.getBoundingClientRect();\n      const pos = Math.max(0, Math.min((clientX - rect.left) / rect.width, 1));\n      const newTime = pos * duration;\n\n      // Ensure audio is loaded before setting time\n      if (audioElement.readyState >= 2) {\n        audioElement.currentTime = newTime;\n        setCurrentTime(newTime);\n      } else {\n        // Wait for audio to be loaded enough\n        await new Promise(resolve => {\n          const handleCanPlay = () => {\n            audioElement.currentTime = newTime;\n            setCurrentTime(newTime);\n            audioElement.removeEventListener('canplay', handleCanPlay);\n            resolve();\n          };\n          audioElement.addEventListener('canplay', handleCanPlay);\n        });\n      }\n    } catch (error) {\n      console.error('Error updating audio time:', error);\n    }\n  };\n  const handleProgressClick = async e => {\n    if (isDraggingRef.current) return;\n\n    // Remember if it was playing\n    setWasPlaying(!(audioElement !== null && audioElement !== void 0 && audioElement.paused));\n\n    // Pause while seeking\n    if (audioElement && !audioElement.paused) {\n      audioElement.pause();\n    }\n    await updateAudioTime(e.clientX);\n  };\n  const handleProgressMouseDown = async e => {\n    if (!audioElement || !duration) return;\n\n    // Remember if it was playing\n    setWasPlaying(!audioElement.paused);\n\n    // Pause audio while scrubbing for better performance\n    if (!audioElement.paused) {\n      audioElement.pause();\n    }\n    isDraggingRef.current = true;\n    await updateAudioTime(e.clientX);\n  };\n  const handleProgressMouseMove = async e => {\n    if (!progressBarRef.current || !duration) return;\n\n    // Update hover position for time preview\n    const rect = progressBarRef.current.getBoundingClientRect();\n    const pos = Math.max(0, Math.min((e.clientX - rect.left) / rect.width, 1));\n    setHoverPosition(pos);\n    if (!isDraggingRef.current) return;\n    e.preventDefault();\n    await updateAudioTime(e.clientX);\n  };\n  const handleProgressMouseUp = () => {\n    isDraggingRef.current = false;\n  };\n  const handleProgressMouseLeave = () => {\n    if (!isDraggingRef.current) {\n      setHoverPosition(null);\n    }\n  };\n  useEffect(() => {\n    if (isDraggingRef.current) {\n      const handleGlobalMouseMove = async e => {\n        await handleProgressMouseMove(e);\n      };\n      const handleGlobalMouseUp = async e => {\n        handleProgressMouseUp();\n        await updateAudioTime(e.clientX);\n      };\n      document.addEventListener('mousemove', handleGlobalMouseMove);\n      document.addEventListener('mouseup', handleGlobalMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleGlobalMouseMove);\n        document.removeEventListener('mouseup', handleGlobalMouseUp);\n      };\n    }\n  }, [duration, audioElement]);\n  const progressPercentage = duration > 0 ? currentTime / duration * 100 : 0;\n  const hoverTime = hoverPosition !== null ? duration * hoverPosition : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playback-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"time\",\n        children: formatTime(currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        ref: progressBarRef,\n        onClick: handleProgressClick,\n        onMouseDown: handleProgressMouseDown,\n        onMouseMove: handleProgressMouseMove,\n        onMouseLeave: handleProgressMouseLeave,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-fill\",\n          style: {\n            width: `${progressPercentage}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-handle\",\n          style: {\n            left: `${progressPercentage}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), hoverPosition !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-preview\",\n          style: {\n            left: `${hoverPosition * 100}%`\n          },\n          children: formatTime(hoverTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"time\",\n        children: formatTime(duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `play-pause-button ${isPlaying ? 'playing' : ''}`,\n      onClick: onPlayPause,\n      \"aria-label\": isPlaying ? 'Pause' : 'Play',\n      children: isPlaying ? /*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 24 24\",\n        className: \"control-icon\",\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: \"6\",\n          y: \"4\",\n          width: \"4\",\n          height: \"16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n          x: \"14\",\n          y: \"4\",\n          width: \"4\",\n          height: \"16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 24 24\",\n        className: \"control-icon\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M8 5v14l11-7z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(Controls, \"KYxNykdK24afeuzPh65J0fTISf0=\");\n_c = Controls;\nexport default Controls;\nvar _c;\n$RefreshReg$(_c, \"Controls\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","Controls","isPlaying","onPlayPause","audioElement","_s","currentTime","setCurrentTime","duration","setDuration","progressRef","progressBarRef","isDraggingRef","hoverPosition","setHoverPosition","wasPlaying","setWasPlaying","handleTimeUpdate","handleLoadedMetadata","handleDurationChange","addEventListener","removeEventListener","formatTime","time","isFinite","minutes","Math","floor","seconds","toString","padStart","updateAudioTime","clientX","current","rect","getBoundingClientRect","pos","max","min","left","width","newTime","readyState","Promise","resolve","handleCanPlay","error","console","handleProgressClick","e","paused","pause","handleProgressMouseDown","handleProgressMouseMove","preventDefault","handleProgressMouseUp","handleProgressMouseLeave","handleGlobalMouseMove","handleGlobalMouseUp","document","progressPercentage","hoverTime","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","onMouseDown","onMouseMove","onMouseLeave","style","viewBox","x","y","height","d","_c","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/Controls.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './Controls.css';\r\n\r\nconst Controls = ({ isPlaying, onPlayPause, audioElement }) => {\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const progressRef = useRef(null);\r\n  const progressBarRef = useRef(null);\r\n  const isDraggingRef = useRef(false);\r\n  const [hoverPosition, setHoverPosition] = useState(null);\r\n  const [wasPlaying, setWasPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!audioElement) return;\r\n\r\n    const handleTimeUpdate = () => {\r\n      // Always update current time when audio updates\r\n      setCurrentTime(audioElement.currentTime);\r\n    };\r\n\r\n    const handleLoadedMetadata = () => {\r\n      setDuration(audioElement.duration);\r\n      setCurrentTime(audioElement.currentTime);\r\n    };\r\n\r\n    const handleDurationChange = () => {\r\n      setDuration(audioElement.duration);\r\n    };\r\n\r\n    // Add all event listeners\r\n    audioElement.addEventListener('timeupdate', handleTimeUpdate);\r\n    audioElement.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n    audioElement.addEventListener('durationchange', handleDurationChange);\r\n    audioElement.addEventListener('seeking', handleTimeUpdate);\r\n    audioElement.addEventListener('seeked', handleTimeUpdate);\r\n\r\n    // Set initial values if already loaded\r\n    if (audioElement.duration) {\r\n      setDuration(audioElement.duration);\r\n      setCurrentTime(audioElement.currentTime);\r\n    }\r\n\r\n    return () => {\r\n      audioElement.removeEventListener('timeupdate', handleTimeUpdate);\r\n      audioElement.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n      audioElement.removeEventListener('durationchange', handleDurationChange);\r\n      audioElement.removeEventListener('seeking', handleTimeUpdate);\r\n      audioElement.removeEventListener('seeked', handleTimeUpdate);\r\n    };\r\n  }, [audioElement]);\r\n\r\n  const formatTime = (time) => {\r\n    if (!isFinite(time) || time < 0) return '0:00';\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const updateAudioTime = async (clientX) => {\r\n    if (!audioElement || !progressBarRef.current || !duration) return;\r\n\r\n    try {\r\n      const rect = progressBarRef.current.getBoundingClientRect();\r\n      const pos = Math.max(0, Math.min((clientX - rect.left) / rect.width, 1));\r\n      const newTime = pos * duration;\r\n      \r\n      // Ensure audio is loaded before setting time\r\n      if (audioElement.readyState >= 2) {\r\n        audioElement.currentTime = newTime;\r\n        setCurrentTime(newTime);\r\n      } else {\r\n        // Wait for audio to be loaded enough\r\n        await new Promise((resolve) => {\r\n          const handleCanPlay = () => {\r\n            audioElement.currentTime = newTime;\r\n            setCurrentTime(newTime);\r\n            audioElement.removeEventListener('canplay', handleCanPlay);\r\n            resolve();\r\n          };\r\n          audioElement.addEventListener('canplay', handleCanPlay);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating audio time:', error);\r\n    }\r\n  };\r\n\r\n  const handleProgressClick = async (e) => {\r\n    if (isDraggingRef.current) return;\r\n    \r\n    // Remember if it was playing\r\n    setWasPlaying(!audioElement?.paused);\r\n    \r\n    // Pause while seeking\r\n    if (audioElement && !audioElement.paused) {\r\n      audioElement.pause();\r\n    }\r\n    \r\n    await updateAudioTime(e.clientX);\r\n  };\r\n\r\n  const handleProgressMouseDown = async (e) => {\r\n    if (!audioElement || !duration) return;\r\n    \r\n    // Remember if it was playing\r\n    setWasPlaying(!audioElement.paused);\r\n    \r\n    // Pause audio while scrubbing for better performance\r\n    if (!audioElement.paused) {\r\n      audioElement.pause();\r\n    }\r\n    \r\n    isDraggingRef.current = true;\r\n    await updateAudioTime(e.clientX);\r\n  };\r\n\r\n  const handleProgressMouseMove = async (e) => {\r\n    if (!progressBarRef.current || !duration) return;\r\n    \r\n    // Update hover position for time preview\r\n    const rect = progressBarRef.current.getBoundingClientRect();\r\n    const pos = Math.max(0, Math.min((e.clientX - rect.left) / rect.width, 1));\r\n    setHoverPosition(pos);\r\n    \r\n    if (!isDraggingRef.current) return;\r\n    e.preventDefault();\r\n    await updateAudioTime(e.clientX);\r\n  };\r\n\r\n  const handleProgressMouseUp = () => {\r\n    isDraggingRef.current = false;\r\n  };\r\n  \r\n  const handleProgressMouseLeave = () => {\r\n    if (!isDraggingRef.current) {\r\n      setHoverPosition(null);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDraggingRef.current) {\r\n      const handleGlobalMouseMove = async (e) => {\r\n        await handleProgressMouseMove(e);\r\n      };\r\n      const handleGlobalMouseUp = async (e) => {\r\n        handleProgressMouseUp();\r\n        await updateAudioTime(e.clientX);\r\n      };\r\n\r\n      document.addEventListener('mousemove', handleGlobalMouseMove);\r\n      document.addEventListener('mouseup', handleGlobalMouseUp);\r\n\r\n      return () => {\r\n        document.removeEventListener('mousemove', handleGlobalMouseMove);\r\n        document.removeEventListener('mouseup', handleGlobalMouseUp);\r\n      };\r\n    }\r\n  }, [duration, audioElement]);\r\n\r\n  const progressPercentage = duration > 0 ? (currentTime / duration) * 100 : 0;\r\n  const hoverTime = hoverPosition !== null ? duration * hoverPosition : null;\r\n\r\n  return (\r\n    <div className=\"controls\">\r\n      <div className=\"playback-info\">\r\n        <span className=\"time\">{formatTime(currentTime)}</span>\r\n        <div \r\n          className=\"progress-bar\"\r\n          ref={progressBarRef}\r\n          onClick={handleProgressClick}\r\n          onMouseDown={handleProgressMouseDown}\r\n          onMouseMove={handleProgressMouseMove}\r\n          onMouseLeave={handleProgressMouseLeave}\r\n        >\r\n          <div \r\n            className=\"progress-bar-fill\"\r\n            style={{ width: `${progressPercentage}%` }}\r\n          />\r\n          <div \r\n            className=\"progress-handle\"\r\n            style={{ left: `${progressPercentage}%` }}\r\n          />\r\n          {hoverPosition !== null && (\r\n            <div \r\n              className=\"time-preview\"\r\n              style={{ left: `${hoverPosition * 100}%` }}\r\n            >\r\n              {formatTime(hoverTime)}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <span className=\"time\">{formatTime(duration)}</span>\r\n      </div>\r\n      <button\r\n        className={`play-pause-button ${isPlaying ? 'playing' : ''}`}\r\n        onClick={onPlayPause}\r\n        aria-label={isPlaying ? 'Pause' : 'Play'}\r\n      >\r\n        {isPlaying ? (\r\n          <svg viewBox=\"0 0 24 24\" className=\"control-icon\">\r\n            <rect x=\"6\" y=\"4\" width=\"4\" height=\"16\"/>\r\n            <rect x=\"14\" y=\"4\" width=\"4\" height=\"16\"/>\r\n          </svg>\r\n        ) : (\r\n          <svg viewBox=\"0 0 24 24\" className=\"control-icon\">\r\n            <path d=\"M8 5v14l11-7z\"/>\r\n          </svg>\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}