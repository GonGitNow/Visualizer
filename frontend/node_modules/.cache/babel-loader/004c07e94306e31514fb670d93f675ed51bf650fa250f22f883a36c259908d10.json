{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\Visualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useState } from 'react';\nimport ThreeVisualizer from './ThreeVisualizer';\nimport './Visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RESOLUTIONS = {\n  '4K': {\n    width: 3840,\n    height: 2160,\n    className: 'aspect-ratio-4k'\n  },\n  '1080p': {\n    width: 1920,\n    height: 1080,\n    className: 'aspect-ratio-1080p'\n  },\n  '720p': {\n    width: 1280,\n    height: 720,\n    className: 'aspect-ratio-720p'\n  },\n  'Square': {\n    width: 720,\n    height: 720,\n    className: 'aspect-ratio-square'\n  },\n  'Vertical': {\n    width: 1080,\n    height: 1920,\n    className: 'aspect-ratio-vertical'\n  }\n};\nconst Visualizer = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  audioFile,\n  template,\n  isPlaying,\n  onAudioElementCreated,\n  parameters: initialParameters = {}\n}, ref) => {\n  _s();\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const sourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n  const particlesRef = useRef([]);\n  const timeRef = useRef(0); // Add timeRef to track animation time\n  const [resolution, setResolution] = useState('1080p'); // Default to 1080p\n  const [audioData, setAudioData] = useState(null);\n  const [use3D, setUse3D] = useState(false);\n  const [parameters, setParameters] = useState(initialParameters);\n\n  // Check if template is a 3D visualization\n  useEffect(() => {\n    // Define which templates should use 3D rendering\n    const threeDTemplates = ['particles3d', 'waveform3d', 'spiral3d', 'kaleidoscope3d'];\n    setUse3D(threeDTemplates.includes(template));\n  }, [template]);\n\n  // Audio initialization effect\n  useEffect(() => {\n    if (!audioFile) return;\n    let isInitialized = false;\n    const initAudio = async () => {\n      try {\n        // Initialize audio context only on first load or if it doesn't exist\n        if (!audioContextRef.current) {\n          // Create context on user interaction\n          const context = new (window.AudioContext || window.webkitAudioContext)();\n          audioContextRef.current = context;\n\n          // Create analyzer with improved settings for better reactivity\n          const analyser = context.createAnalyser();\n          analyser.fftSize = 1024; // Reduced for more responsive analysis\n          analyser.smoothingTimeConstant = 0.5; // Balanced smoothing (0-1)\n          analyserRef.current = analyser;\n        }\n\n        // Create and set up audio element\n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n\n        // Set the audio source\n        const timestamp = new Date().getTime();\n        audioElement.src = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\n\n        // Wait for audio to be loaded enough to play\n        await new Promise((resolve, reject) => {\n          const loadHandler = () => {\n            console.log('Audio loaded, duration:', audioElement.duration);\n            resolve();\n          };\n          const errorHandler = error => {\n            console.error('Audio load error:', error);\n            reject(error);\n          };\n          audioElement.addEventListener('canplaythrough', loadHandler, {\n            once: true\n          });\n          audioElement.addEventListener('error', errorHandler, {\n            once: true\n          });\n          audioElement.load();\n        });\n\n        // Only create new media source if not already connected\n        if (!isInitialized) {\n          // Ensure old source is disconnected\n          if (sourceRef.current) {\n            sourceRef.current.disconnect();\n          }\n\n          // Create and connect new media source\n          const mediaSource = audioContextRef.current.createMediaElementSource(audioElement);\n          sourceRef.current = mediaSource;\n          mediaSource.connect(analyserRef.current);\n          analyserRef.current.connect(audioContextRef.current.destination);\n          isInitialized = true;\n        }\n\n        // Set up event listeners - REMOVE timeupdate listener which causes visualization restarts\n        const onSeeking = () => {\n          console.log('Seeking:', audioElement.currentTime);\n          if (isPlaying) startVisualization();\n        };\n        audioElement.addEventListener('seeking', onSeeking);\n        audioElement.addEventListener('seeked', onSeeking);\n        // Removed timeupdate listener which was causing visualization restarts\n\n        // Store reference and notify parent\n        audioElementRef.current = audioElement;\n        onAudioElementCreated(audioElement);\n\n        // Resume audio context if suspended\n        if (audioContextRef.current.state === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n        return () => {\n          console.log('Cleaning up audio element');\n          audioElement.removeEventListener('seeking', onSeeking);\n          audioElement.removeEventListener('seeked', onSeeking);\n          // Removed timeupdate listener cleanup\n          audioElement.pause();\n          audioElement.src = '';\n          onAudioElementCreated(null);\n        };\n      } catch (error) {\n        console.error('Audio initialization error:', error);\n        alert('Error loading audio. Please try again.');\n      }\n    };\n    initAudio();\n  }, [audioFile]); // Remove isPlaying from dependencies\n\n  // Separate playback control effect\n  useEffect(() => {\n    const audioElement = audioElementRef.current;\n    if (!audioElement) return;\n    const playAudio = async () => {\n      try {\n        var _audioContextRef$curr;\n        // Ensure audio context is running\n        if (((_audioContextRef$curr = audioContextRef.current) === null || _audioContextRef$curr === void 0 ? void 0 : _audioContextRef$curr.state) === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n        console.log('Playing audio...');\n        await audioElement.play();\n        startVisualization();\n      } catch (error) {\n        console.error('Playback error:', error);\n        alert('Error playing audio. Please try again.');\n      }\n    };\n    if (isPlaying) {\n      playAudio();\n    } else {\n      console.log('Pausing audio...');\n      audioElement.pause();\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isPlaying]);\n\n  // Add effect to handle template changes\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Clear the entire canvas\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Restart visualization if playing\n    if (isPlaying) {\n      startVisualization();\n    }\n  }, [template]);\n\n  // Update canvas size based on selected resolution\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const {\n      width,\n      height\n    } = RESOLUTIONS[resolution];\n\n    // Set canvas dimensions to match the selected resolution\n    canvas.width = width;\n    canvas.height = height;\n\n    // Clear canvas with new dimensions\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Adjust container styles based on aspect ratio\n    if (containerRef.current) {\n      if (resolution === 'Vertical') {\n        containerRef.current.style.width = 'auto';\n        containerRef.current.style.height = '80vh';\n      } else if (resolution === 'Square') {\n        containerRef.current.style.width = '720px';\n        containerRef.current.style.height = '720px';\n        containerRef.current.style.maxWidth = '720px';\n        containerRef.current.style.maxHeight = '720px';\n      } else {\n        containerRef.current.style.width = '100%';\n        containerRef.current.style.height = 'auto';\n        containerRef.current.style.maxWidth = `${width}px`;\n        containerRef.current.style.maxHeight = `${height}px`;\n      }\n    }\n\n    // Restart visualization if playing\n    if (isPlaying) {\n      startVisualization();\n    }\n\n    // Initialize particles for the new canvas size\n    if (template === 'particles') {\n      initParticles(ctx);\n    }\n  }, [resolution, isPlaying, template]);\n\n  // Function to change resolution\n  const changeResolution = newResolution => {\n    if (RESOLUTIONS[newResolution]) {\n      setResolution(newResolution);\n    }\n  };\n\n  // Expose changeResolution to parent via ref\n  React.useImperativeHandle(ref, () => ({\n    changeResolution,\n    getCurrentResolution: () => resolution,\n    updateParameters\n  }));\n  const initParticles = ctx => {\n    // Safety check - ensure context exists\n    if (!ctx || !ctx.canvas) {\n      console.error(\"Canvas context is null in initParticles\");\n      return;\n    }\n    const count = Math.floor((parameters.count || 50) / 50 * 200); // 100-400 particles based on count parameter\n    particlesRef.current = [];\n    for (let i = 0; i < count; i++) {\n      particlesRef.current.push({\n        x: Math.random() * ctx.canvas.width,\n        y: Math.random() * ctx.canvas.height,\n        size: Math.random() * ((parameters.size || 50) / 10) + 1,\n        // 1-6 size based on size parameter\n        vx: (Math.random() - 0.5) * ((parameters.speed || 50) / 25),\n        // Speed based on speed parameter\n        vy: (Math.random() - 0.5) * ((parameters.speed || 50) / 25),\n        hue: Math.random() * 360\n      });\n    }\n  };\n  const updateAndDrawParticles = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in updateAndDrawParticles\");\n      return;\n    }\n\n    // Safety check - ensure particles array exists\n    if (!particlesRef.current || particlesRef.current.length === 0) {\n      console.log(\"Initializing particles in updateAndDrawParticles\");\n      initParticles(ctx);\n\n      // Double-check initialization worked\n      if (!particlesRef.current || particlesRef.current.length === 0) {\n        console.error(\"Failed to initialize particles\");\n        return;\n      }\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ffffff';\n    const particleCount = Math.floor((cachedParameters.count || 50) / 100 * particlesRef.current.length);\n    const particleSize = (cachedParameters.size || 50) / 10; // Convert to 0-10 scale\n    const speed = (cachedParameters.speed || 50) / 50; // Convert to 0-2 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // Convert to 0-2 scale\n\n    // Clear canvas with fade effect\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    // Update and draw particles\n    for (let i = 0; i < particleCount; i++) {\n      const particle = particlesRef.current[i];\n\n      // Apply audio reactivity\n      const dataIndex = Math.floor(i / particleCount * bufferLength);\n      const audioValue = dataArray[dataIndex] / 255.0 * reactivity;\n\n      // Update position\n      particle.x += particle.vx * speed;\n      particle.y += particle.vy * speed;\n\n      // Bounce off edges\n      if (particle.x < 0 || particle.x > canvasRef.current.width) {\n        particle.vx = -particle.vx;\n      }\n      if (particle.y < 0 || particle.y > canvasRef.current.height) {\n        particle.vy = -particle.vy;\n      }\n\n      // Draw particle\n      const size = particleSize * (1 + audioValue);\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);\n      ctx.fillStyle = adjustColor(color, audioValue * 50);\n      ctx.fill();\n    }\n  };\n\n  // Helper function to adjust colors\n  const adjustColor = (hexColor, amount) => {\n    // Convert hex to RGB\n    let r = parseInt(hexColor.substring(1, 3), 16);\n    let g = parseInt(hexColor.substring(3, 5), 16);\n    let b = parseInt(hexColor.substring(5, 7), 16);\n\n    // Adjust RGB values\n    r = Math.max(0, Math.min(255, r + amount));\n    g = Math.max(0, Math.min(255, g + amount));\n    b = Math.max(0, Math.min(255, b + amount));\n\n    // Convert back to hex\n    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n  };\n\n  // Start visualization\n  const startVisualization = () => {\n    if (!analyserRef.current) {\n      console.error(\"Analyzer reference is null in startVisualization\");\n      return;\n    }\n    const analyser = analyserRef.current;\n\n    // Create data arrays for audio analysis\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const timeArray = new Uint8Array(bufferLength);\n\n    // Get initial data\n    analyser.getByteFrequencyData(dataArray);\n    analyser.getByteTimeDomainData(timeArray);\n\n    // Cancel any existing animation frame\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n\n    // Reset animation time to ensure consistent animation speed\n    timeRef.current = 0;\n\n    // Track frame timing for consistent animation speed\n    let lastFrameTime = performance.now();\n    const targetFrameRate = 60; // Target 60 FPS\n    const frameInterval = 1000 / targetFrameRate;\n\n    // Handle 3D visualization\n    if (use3D) {\n      // For 3D, we need to continuously update the audio data\n      const update3DAudio = currentTime => {\n        animationFrameRef.current = requestAnimationFrame(update3DAudio);\n\n        // Calculate delta time for smooth animation regardless of frame rate\n        const deltaTime = (currentTime - lastFrameTime) / frameInterval;\n        lastFrameTime = currentTime;\n\n        // Increment time for animations with consistent speed\n        timeRef.current += 0.01 * Math.min(deltaTime, 2);\n\n        // Get frequency and time domain data\n        analyser.getByteFrequencyData(dataArray);\n        analyser.getByteTimeDomainData(timeArray);\n\n        // Update audio data for 3D visualizer with more efficient approach\n        const newDataArray = new Array(bufferLength);\n        const newTimeArray = new Array(bufferLength);\n\n        // Use logarithmic sampling to focus more on lower frequencies\n        for (let i = 0; i < bufferLength; i++) {\n          // Logarithmic mapping to emphasize lower frequencies\n          const logIndex = Math.min(bufferLength - 1, Math.floor(Math.pow(i / bufferLength, 0.5) * bufferLength));\n          newDataArray[i] = dataArray[logIndex];\n          newTimeArray[i] = timeArray[logIndex];\n        }\n        setAudioData({\n          dataArray: newDataArray,\n          timeArray: newTimeArray,\n          bufferLength\n        });\n      };\n      update3DAudio(performance.now());\n      return;\n    }\n\n    // For 2D visualizations, ensure canvas exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in startVisualization for 2D visualization\");\n      return;\n    }\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', {\n      alpha: false\n    }); // Optimize by disabling alpha\n\n    // Cache parameter values outside the animation loop for better performance\n    let cachedParameters = {\n      ...parameters\n    };\n\n    // Pre-process frequency data for better visualization\n    const processFrequencyData = data => {\n      // Create a copy to avoid modifying the original data\n      const processedData = new Uint8Array(data);\n\n      // Apply bass boost for better low-frequency response\n      for (let i = 0; i < Math.min(processedData.length, 10); i++) {\n        processedData[i] = Math.min(255, processedData[i] * 1.5);\n      }\n      return processedData;\n    };\n\n    // Animation function for 2D visualizations\n    const draw = currentTime => {\n      animationFrameRef.current = requestAnimationFrame(draw);\n\n      // Calculate delta time for smooth animation regardless of frame rate\n      const deltaTime = (currentTime - lastFrameTime) / frameInterval;\n      lastFrameTime = currentTime;\n\n      // Increment time for animations with consistent speed\n      timeRef.current += 0.01 * Math.min(deltaTime, 2);\n\n      // Get frequency and time domain data\n      analyser.getByteFrequencyData(dataArray);\n      analyser.getByteTimeDomainData(timeArray);\n\n      // Process frequency data for better visualization\n      const processedData = processFrequencyData(dataArray);\n\n      // Clear canvas\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Check if parameters have changed\n      if (JSON.stringify(cachedParameters) !== JSON.stringify(parameters)) {\n        cachedParameters = {\n          ...parameters\n        };\n      }\n\n      // Draw visualization based on template\n      switch (template) {\n        case 'waveform':\n          drawWaveform(ctx, processedData, bufferLength, cachedParameters);\n          break;\n        case 'bars':\n          drawBars(ctx, processedData, bufferLength, cachedParameters);\n          break;\n        case 'circles':\n          drawCircles(ctx, processedData, bufferLength, cachedParameters);\n          break;\n        case 'kaleidoscope':\n          drawKaleidoscope(ctx, processedData, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'spiral':\n          drawSpiral(ctx, processedData, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'particles':\n          updateAndDrawParticles(ctx, processedData, bufferLength, cachedParameters);\n          break;\n        default:\n          drawWaveform(ctx, processedData, bufferLength, cachedParameters);\n      }\n    };\n    draw(performance.now());\n  };\n  const drawWaveform = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawWaveform\");\n      return;\n    }\n\n    // Apply parameters\n    const lineWidth = cachedParameters.lineWidth || 3;\n    const color = cachedParameters.color || '#00aaff';\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // Convert to 0-2 scale\n    const smoothing = (cachedParameters.smoothing || 50) / 100; // Convert to 0-1 scale\n\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = color;\n    ctx.beginPath();\n    const sliceWidth = canvasRef.current.width * 1.0 / bufferLength;\n    let x = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      const v = dataArray[i] / 128.0 * reactivity;\n      const y = v * canvasRef.current.height / 2;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        // Apply smoothing if enabled\n        if (smoothing > 0) {\n          const prevX = x - sliceWidth;\n          const prevY = dataArray[i - 1] / 128.0 * reactivity * canvasRef.current.height / 2;\n          const cpX1 = prevX + sliceWidth / 3;\n          const cpX2 = x - sliceWidth / 3;\n          const cpY1 = prevY;\n          const cpY2 = y;\n\n          // Use bezier curve for smoothing\n          ctx.bezierCurveTo(cpX1, cpY1, cpX2, cpY2, x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      x += sliceWidth;\n    }\n    ctx.lineTo(canvasRef.current.width, canvasRef.current.height / 2);\n    ctx.stroke();\n  };\n  const drawBars = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawBars\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ff5500';\n    const barWidth = (cachedParameters.barWidth || 50) / 100; // Convert to 0-1 scale\n    const spacing = (cachedParameters.spacing || 30) / 100; // Convert to 0-1 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 25; // Convert to 0-4 scale\n\n    const bars = Math.min(bufferLength, 256);\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const barWidthPx = width / bars * barWidth;\n    const barSpacing = width / bars * spacing;\n    const totalBarWidth = barWidthPx + barSpacing;\n    for (let i = 0; i < bars; i++) {\n      // Use logarithmic mapping to emphasize lower frequencies\n      const dataIndex = Math.min(bufferLength - 1, Math.floor(Math.pow(i / bars, 1.2) * bufferLength));\n      const barHeight = dataArray[dataIndex] * reactivity;\n      const x = i * totalBarWidth;\n      const y = height - barHeight;\n      ctx.fillStyle = adjustColor(color, i / bars * 30);\n      ctx.fillRect(x, y, barWidthPx, barHeight);\n    }\n  };\n  const drawCircles = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawCircles\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ff00ff';\n    const baseRadius = (cachedParameters.radius || 50) / 100 * Math.min(canvasRef.current.width, canvasRef.current.height) / 2;\n    const circleCount = Math.max(1, Math.min(20, Math.floor((cachedParameters.count || 50) / 5))); // 1-20 circles\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // Convert to 0-2 scale\n\n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n\n    // Draw circles\n    for (let c = 0; c < circleCount; c++) {\n      const circleIndex = Math.floor(c / circleCount * bufferLength);\n      const audioValue = dataArray[circleIndex] / 128.0 * reactivity;\n      const radius = baseRadius * (c + 1) / circleCount * audioValue;\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      ctx.strokeStyle = adjustColor(color, c / circleCount * 50);\n      ctx.stroke();\n    }\n  };\n  const drawKaleidoscope = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawKaleidoscope\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#ffaa00';\n    const segments = cachedParameters.segments || 8;\n    const speed = (cachedParameters.speed || 50) / 1000; // Convert to 0-0.05 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // Convert to 0-2 scale\n\n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n    const radius = Math.min(centerX, centerY) * 0.9;\n\n    // Draw kaleidoscope segments\n    for (let s = 0; s < segments; s++) {\n      const angle = s / segments * Math.PI * 2;\n      const rotationOffset = timeRef.current * speed;\n      ctx.save();\n      ctx.translate(centerX, centerY);\n      ctx.rotate(angle + rotationOffset);\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      for (let i = 0; i < bufferLength; i += 8) {\n        const normalizedIndex = i / bufferLength;\n        const audioValue = dataArray[i] / 128.0 * reactivity;\n        const x = normalizedIndex * radius * audioValue;\n        const y = (timeArray[i] / 128.0 - 1) * radius * 0.5 * audioValue;\n        ctx.lineTo(x, y);\n      }\n      ctx.strokeStyle = adjustColor(color, s * 5);\n      ctx.stroke();\n      ctx.restore();\n    }\n  };\n  const drawSpiral = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawSpiral\");\n      return;\n    }\n\n    // Apply parameters\n    const color = cachedParameters.color || '#00ff99';\n    const arms = cachedParameters.arms || 5;\n    const speed = (cachedParameters.speed || 50) / 1000; // Convert to 0-0.05 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 25; // Increased reactivity range (0-4 scale)\n\n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n    const maxRadius = Math.min(centerX, centerY) * 0.9;\n\n    // Rotate based on time and speed\n    ctx.translate(centerX, centerY);\n    ctx.rotate(timeRef.current * speed);\n\n    // Pre-calculate common values\n    const PI2 = Math.PI * 2;\n    const PI6 = Math.PI * 6;\n\n    // Calculate beat detection for pulsing effect\n    let beatDetected = false;\n    let bassEnergy = 0;\n\n    // Calculate bass energy (low frequencies)\n    for (let i = 0; i < Math.min(8, bufferLength); i++) {\n      bassEnergy += dataArray[i];\n    }\n    bassEnergy = bassEnergy / Math.min(8, bufferLength) / 255;\n\n    // Detect beats by comparing current bass energy to recent average\n    if (bassEnergy > 0.6) {\n      beatDetected = true;\n    }\n\n    // Pre-calculate arm colors to avoid recalculating in the loop\n    const armColors = [];\n    for (let a = 0; a < arms; a++) {\n      // Make colors more vibrant on beat detection\n      const colorOffset = beatDetected ? 20 : 10;\n      armColors[a] = adjustColor(color, a * colorOffset);\n    }\n\n    // Draw spiral arms\n    for (let a = 0; a < arms; a++) {\n      const armAngle = a / arms * PI2;\n      ctx.beginPath();\n      ctx.strokeStyle = armColors[a];\n\n      // Adjust line width based on beat detection\n      ctx.lineWidth = beatDetected ? 2.5 : 1.5;\n\n      // Use a more efficient approach for drawing the spiral\n      // but maintain the original visual appearance with 100 points\n      const pointsPerArm = 100;\n\n      // Each arm responds to a different frequency range\n      const freqRangeStart = Math.floor(a / arms * (bufferLength / 4));\n      const freqRangeEnd = Math.floor((a + 1) / arms * (bufferLength / 4));\n      for (let i = 0; i < pointsPerArm; i++) {\n        const t = i / pointsPerArm;\n        const angle = armAngle + t * PI6;\n        const radius = t * maxRadius;\n\n        // Apply audio reactivity - use frequency range specific to this arm\n        const freqIndex = Math.min(bufferLength - 1, freqRangeStart + Math.floor(t * (freqRangeEnd - freqRangeStart)));\n\n        // Apply smoothing between adjacent frequency bins\n        let audioValue = dataArray[freqIndex] / 128.0;\n        if (freqIndex > 0 && freqIndex < bufferLength - 1) {\n          audioValue = (dataArray[freqIndex - 1] + dataArray[freqIndex] * 2 + dataArray[freqIndex + 1]) / (4 * 128.0);\n        }\n\n        // Add a base value to ensure the spiral is visible even with low audio\n        const baseValue = 0.3;\n        const scaledAudioValue = baseValue + audioValue * reactivity * (1 - baseValue);\n\n        // Add subtle pulsing effect on beat detection\n        const pulseEffect = beatDetected ? 1.2 : 1.0;\n\n        // Pre-calculate trig functions for performance\n        const cosAngle = Math.cos(angle);\n        const sinAngle = Math.sin(angle);\n        const x = cosAngle * radius * scaledAudioValue * pulseEffect;\n        const y = sinAngle * radius * scaledAudioValue * pulseEffect;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      ctx.stroke();\n    }\n\n    // Reset transformation\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  };\n\n  // Update parameters when initialParameters change - use a ref to avoid re-renders\n  useEffect(() => {\n    // Only log in development\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(\"Visualizer received updated parameters:\", initialParameters);\n    }\n    if (initialParameters && Object.keys(initialParameters).length > 0) {\n      // Use a simple update without triggering re-renders\n      setParameters(initialParameters);\n    }\n  }, [initialParameters]);\n\n  // Add a function to update parameters\n  const updateParameters = newParameters => {\n    // Only log in development\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(\"Updating visualization parameters:\", newParameters);\n    }\n    setParameters(newParameters);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"visualizer-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: `visualizer-aspect-container ${RESOLUTIONS[resolution].className}`,\n      children: [use3D ? /*#__PURE__*/_jsxDEV(ThreeVisualizer, {\n        audioData: audioData,\n        template: template.replace('3d', '') // Remove '3d' suffix for the ThreeVisualizer\n        ,\n        isPlaying: isPlaying,\n        parameters: parameters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"visualizer-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 793,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resolution-indicator\",\n        children: [resolution, \" (\", RESOLUTIONS[resolution].width, \"\\xD7\", RESOLUTIONS[resolution].height, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 781,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 780,\n    columnNumber: 5\n  }, this);\n}, \"YKAxe3DkZ4mr2sIx+Fv//uNOOD8=\")), \"YKAxe3DkZ4mr2sIx+Fv//uNOOD8=\");\n_c2 = Visualizer;\nexport default Visualizer;\nvar _c, _c2;\n$RefreshReg$(_c, \"Visualizer$forwardRef\");\n$RefreshReg$(_c2, \"Visualizer\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useState","ThreeVisualizer","jsxDEV","_jsxDEV","RESOLUTIONS","width","height","className","Visualizer","_s","_c","audioFile","template","isPlaying","onAudioElementCreated","parameters","initialParameters","ref","canvasRef","containerRef","audioContextRef","analyserRef","animationFrameRef","sourceRef","audioElementRef","particlesRef","timeRef","resolution","setResolution","audioData","setAudioData","use3D","setUse3D","setParameters","threeDTemplates","includes","isInitialized","initAudio","current","context","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","smoothingTimeConstant","audioElement","Audio","crossOrigin","preload","timestamp","Date","getTime","src","path","Promise","resolve","reject","loadHandler","console","log","duration","errorHandler","error","addEventListener","once","load","disconnect","mediaSource","createMediaElementSource","connect","destination","onSeeking","currentTime","startVisualization","state","resume","removeEventListener","pause","alert","playAudio","_audioContextRef$curr","play","cancelAnimationFrame","canvas","ctx","getContext","fillStyle","fillRect","style","maxWidth","maxHeight","initParticles","changeResolution","newResolution","useImperativeHandle","getCurrentResolution","updateParameters","count","Math","floor","i","push","x","random","y","size","vx","speed","vy","hue","updateAndDrawParticles","dataArray","bufferLength","cachedParameters","length","color","particleCount","particleSize","reactivity","particle","dataIndex","audioValue","beginPath","arc","PI","adjustColor","fill","hexColor","amount","r","parseInt","substring","g","b","max","min","toString","padStart","frequencyBinCount","Uint8Array","timeArray","getByteFrequencyData","getByteTimeDomainData","lastFrameTime","performance","now","targetFrameRate","frameInterval","update3DAudio","requestAnimationFrame","deltaTime","newDataArray","Array","newTimeArray","logIndex","pow","alpha","processFrequencyData","data","processedData","draw","JSON","stringify","drawWaveform","drawBars","drawCircles","drawKaleidoscope","drawSpiral","lineWidth","smoothing","strokeStyle","sliceWidth","v","moveTo","prevX","prevY","cpX1","cpX2","cpY1","cpY2","bezierCurveTo","lineTo","stroke","barWidth","spacing","bars","barWidthPx","barSpacing","totalBarWidth","barHeight","baseRadius","radius","circleCount","centerX","centerY","c","circleIndex","segments","s","angle","rotationOffset","save","translate","rotate","normalizedIndex","restore","arms","maxRadius","PI2","PI6","beatDetected","bassEnergy","armColors","a","colorOffset","armAngle","pointsPerArm","freqRangeStart","freqRangeEnd","t","freqIndex","baseValue","scaledAudioValue","pulseEffect","cosAngle","cos","sinAngle","sin","setTransform","process","env","NODE_ENV","Object","keys","newParameters","children","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/Visualizer.js"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useState } from 'react';\nimport ThreeVisualizer from './ThreeVisualizer';\nimport './Visualizer.css';\n\nconst RESOLUTIONS = {\n  '4K': { width: 3840, height: 2160, className: 'aspect-ratio-4k' },\n  '1080p': { width: 1920, height: 1080, className: 'aspect-ratio-1080p' },\n  '720p': { width: 1280, height: 720, className: 'aspect-ratio-720p' },\n  'Square': { width: 720, height: 720, className: 'aspect-ratio-square' },\n  'Vertical': { width: 1080, height: 1920, className: 'aspect-ratio-vertical' }\n};\n\nconst Visualizer = forwardRef(({ audioFile, template, isPlaying, onAudioElementCreated, parameters: initialParameters = {} }, ref) => {\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const sourceRef = useRef(null);\n  const audioElementRef = useRef(null);\n  const particlesRef = useRef([]);\n  const timeRef = useRef(0); // Add timeRef to track animation time\n  const [resolution, setResolution] = useState('1080p'); // Default to 1080p\n  const [audioData, setAudioData] = useState(null);\n  const [use3D, setUse3D] = useState(false);\n  const [parameters, setParameters] = useState(initialParameters);\n\n  // Check if template is a 3D visualization\n  useEffect(() => {\n    // Define which templates should use 3D rendering\n    const threeDTemplates = ['particles3d', 'waveform3d', 'spiral3d', 'kaleidoscope3d'];\n    setUse3D(threeDTemplates.includes(template));\n  }, [template]);\n\n  // Audio initialization effect\n  useEffect(() => {\n    if (!audioFile) return;\n\n    let isInitialized = false;\n\n    const initAudio = async () => {\n      try {\n        // Initialize audio context only on first load or if it doesn't exist\n        if (!audioContextRef.current) {\n          // Create context on user interaction\n          const context = new (window.AudioContext || window.webkitAudioContext)();\n          audioContextRef.current = context;\n          \n          // Create analyzer with improved settings for better reactivity\n          const analyser = context.createAnalyser();\n          analyser.fftSize = 1024; // Reduced for more responsive analysis\n          analyser.smoothingTimeConstant = 0.5; // Balanced smoothing (0-1)\n          analyserRef.current = analyser;\n        }\n\n        // Create and set up audio element\n        const audioElement = new Audio();\n        audioElement.crossOrigin = \"anonymous\";\n        audioElement.preload = \"auto\";\n\n        // Set the audio source\n        const timestamp = new Date().getTime();\n        audioElement.src = `http://localhost:5001${audioFile.path}?t=${timestamp}`;\n\n        // Wait for audio to be loaded enough to play\n        await new Promise((resolve, reject) => {\n          const loadHandler = () => {\n            console.log('Audio loaded, duration:', audioElement.duration);\n            resolve();\n          };\n\n          const errorHandler = (error) => {\n            console.error('Audio load error:', error);\n            reject(error);\n          };\n\n          audioElement.addEventListener('canplaythrough', loadHandler, { once: true });\n          audioElement.addEventListener('error', errorHandler, { once: true });\n          audioElement.load();\n        });\n\n        // Only create new media source if not already connected\n        if (!isInitialized) {\n          // Ensure old source is disconnected\n          if (sourceRef.current) {\n            sourceRef.current.disconnect();\n          }\n\n          // Create and connect new media source\n          const mediaSource = audioContextRef.current.createMediaElementSource(audioElement);\n          sourceRef.current = mediaSource;\n          mediaSource.connect(analyserRef.current);\n          analyserRef.current.connect(audioContextRef.current.destination);\n          isInitialized = true;\n        }\n\n        // Set up event listeners - REMOVE timeupdate listener which causes visualization restarts\n        const onSeeking = () => {\n          console.log('Seeking:', audioElement.currentTime);\n          if (isPlaying) startVisualization();\n        };\n\n        audioElement.addEventListener('seeking', onSeeking);\n        audioElement.addEventListener('seeked', onSeeking);\n        // Removed timeupdate listener which was causing visualization restarts\n\n        // Store reference and notify parent\n        audioElementRef.current = audioElement;\n        onAudioElementCreated(audioElement);\n\n        // Resume audio context if suspended\n        if (audioContextRef.current.state === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n\n        return () => {\n          console.log('Cleaning up audio element');\n          audioElement.removeEventListener('seeking', onSeeking);\n          audioElement.removeEventListener('seeked', onSeeking);\n          // Removed timeupdate listener cleanup\n          audioElement.pause();\n          audioElement.src = '';\n          onAudioElementCreated(null);\n        };\n      } catch (error) {\n        console.error('Audio initialization error:', error);\n        alert('Error loading audio. Please try again.');\n      }\n    };\n\n    initAudio();\n  }, [audioFile]); // Remove isPlaying from dependencies\n\n  // Separate playback control effect\n  useEffect(() => {\n    const audioElement = audioElementRef.current;\n    if (!audioElement) return;\n\n    const playAudio = async () => {\n      try {\n        // Ensure audio context is running\n        if (audioContextRef.current?.state === 'suspended') {\n          await audioContextRef.current.resume();\n        }\n        \n        console.log('Playing audio...');\n        await audioElement.play();\n        startVisualization();\n      } catch (error) {\n        console.error('Playback error:', error);\n        alert('Error playing audio. Please try again.');\n      }\n    };\n\n    if (isPlaying) {\n      playAudio();\n    } else {\n      console.log('Pausing audio...');\n      audioElement.pause();\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isPlaying]);\n\n  // Add effect to handle template changes\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Clear the entire canvas\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Restart visualization if playing\n    if (isPlaying) {\n      startVisualization();\n    }\n  }, [template]);\n\n  // Update canvas size based on selected resolution\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const { width, height } = RESOLUTIONS[resolution];\n    \n    // Set canvas dimensions to match the selected resolution\n    canvas.width = width;\n    canvas.height = height;\n    \n    // Clear canvas with new dimensions\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    // Adjust container styles based on aspect ratio\n    if (containerRef.current) {\n      if (resolution === 'Vertical') {\n        containerRef.current.style.width = 'auto';\n        containerRef.current.style.height = '80vh';\n      } else if (resolution === 'Square') {\n        containerRef.current.style.width = '720px';\n        containerRef.current.style.height = '720px';\n        containerRef.current.style.maxWidth = '720px';\n        containerRef.current.style.maxHeight = '720px';\n      } else {\n        containerRef.current.style.width = '100%';\n        containerRef.current.style.height = 'auto';\n        containerRef.current.style.maxWidth = `${width}px`;\n        containerRef.current.style.maxHeight = `${height}px`;\n      }\n    }\n    \n    // Restart visualization if playing\n    if (isPlaying) {\n      startVisualization();\n    }\n    \n    // Initialize particles for the new canvas size\n    if (template === 'particles') {\n      initParticles(ctx);\n    }\n  }, [resolution, isPlaying, template]);\n\n  // Function to change resolution\n  const changeResolution = (newResolution) => {\n    if (RESOLUTIONS[newResolution]) {\n      setResolution(newResolution);\n    }\n  };\n\n  // Expose changeResolution to parent via ref\n  React.useImperativeHandle(ref, () => ({\n    changeResolution,\n    getCurrentResolution: () => resolution,\n    updateParameters\n  }));\n\n  const initParticles = (ctx) => {\n    // Safety check - ensure context exists\n    if (!ctx || !ctx.canvas) {\n      console.error(\"Canvas context is null in initParticles\");\n      return;\n    }\n    \n    const count = Math.floor(((parameters.count || 50) / 50) * 200); // 100-400 particles based on count parameter\n    particlesRef.current = [];\n    \n    for (let i = 0; i < count; i++) {\n      particlesRef.current.push({\n        x: Math.random() * ctx.canvas.width,\n        y: Math.random() * ctx.canvas.height,\n        size: Math.random() * ((parameters.size || 50) / 10) + 1, // 1-6 size based on size parameter\n        vx: (Math.random() - 0.5) * ((parameters.speed || 50) / 25), // Speed based on speed parameter\n        vy: (Math.random() - 0.5) * ((parameters.speed || 50) / 25),\n        hue: Math.random() * 360\n      });\n    }\n  };\n\n  const updateAndDrawParticles = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in updateAndDrawParticles\");\n      return;\n    }\n    \n    // Safety check - ensure particles array exists\n    if (!particlesRef.current || particlesRef.current.length === 0) {\n      console.log(\"Initializing particles in updateAndDrawParticles\");\n      initParticles(ctx);\n      \n      // Double-check initialization worked\n      if (!particlesRef.current || particlesRef.current.length === 0) {\n        console.error(\"Failed to initialize particles\");\n        return;\n      }\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ffffff';\n    const particleCount = Math.floor(((cachedParameters.count || 50) / 100) * particlesRef.current.length);\n    const particleSize = (cachedParameters.size || 50) / 10; // Convert to 0-10 scale\n    const speed = (cachedParameters.speed || 50) / 50; // Convert to 0-2 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // Convert to 0-2 scale\n    \n    // Clear canvas with fade effect\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    \n    // Update and draw particles\n    for (let i = 0; i < particleCount; i++) {\n      const particle = particlesRef.current[i];\n      \n      // Apply audio reactivity\n      const dataIndex = Math.floor((i / particleCount) * bufferLength);\n      const audioValue = dataArray[dataIndex] / 255.0 * reactivity;\n      \n      // Update position\n      particle.x += particle.vx * speed;\n      particle.y += particle.vy * speed;\n      \n      // Bounce off edges\n      if (particle.x < 0 || particle.x > canvasRef.current.width) {\n        particle.vx = -particle.vx;\n      }\n      \n      if (particle.y < 0 || particle.y > canvasRef.current.height) {\n        particle.vy = -particle.vy;\n      }\n      \n      // Draw particle\n      const size = particleSize * (1 + audioValue);\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);\n      ctx.fillStyle = adjustColor(color, audioValue * 50);\n      ctx.fill();\n    }\n  };\n\n  // Helper function to adjust colors\n  const adjustColor = (hexColor, amount) => {\n    // Convert hex to RGB\n    let r = parseInt(hexColor.substring(1, 3), 16);\n    let g = parseInt(hexColor.substring(3, 5), 16);\n    let b = parseInt(hexColor.substring(5, 7), 16);\n    \n    // Adjust RGB values\n    r = Math.max(0, Math.min(255, r + amount));\n    g = Math.max(0, Math.min(255, g + amount));\n    b = Math.max(0, Math.min(255, b + amount));\n    \n    // Convert back to hex\n    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n  };\n\n  // Start visualization\n  const startVisualization = () => {\n    if (!analyserRef.current) {\n      console.error(\"Analyzer reference is null in startVisualization\");\n      return;\n    }\n    \n    const analyser = analyserRef.current;\n    \n    // Create data arrays for audio analysis\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const timeArray = new Uint8Array(bufferLength);\n    \n    // Get initial data\n    analyser.getByteFrequencyData(dataArray);\n    analyser.getByteTimeDomainData(timeArray);\n    \n    // Cancel any existing animation frame\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    \n    // Reset animation time to ensure consistent animation speed\n    timeRef.current = 0;\n    \n    // Track frame timing for consistent animation speed\n    let lastFrameTime = performance.now();\n    const targetFrameRate = 60; // Target 60 FPS\n    const frameInterval = 1000 / targetFrameRate;\n    \n    // Handle 3D visualization\n    if (use3D) {\n      // For 3D, we need to continuously update the audio data\n      const update3DAudio = (currentTime) => {\n        animationFrameRef.current = requestAnimationFrame(update3DAudio);\n        \n        // Calculate delta time for smooth animation regardless of frame rate\n        const deltaTime = (currentTime - lastFrameTime) / frameInterval;\n        lastFrameTime = currentTime;\n        \n        // Increment time for animations with consistent speed\n        timeRef.current += 0.01 * Math.min(deltaTime, 2);\n        \n        // Get frequency and time domain data\n        analyser.getByteFrequencyData(dataArray);\n        analyser.getByteTimeDomainData(timeArray);\n        \n        // Update audio data for 3D visualizer with more efficient approach\n        const newDataArray = new Array(bufferLength);\n        const newTimeArray = new Array(bufferLength);\n        \n        // Use logarithmic sampling to focus more on lower frequencies\n        for (let i = 0; i < bufferLength; i++) {\n          // Logarithmic mapping to emphasize lower frequencies\n          const logIndex = Math.min(bufferLength - 1, Math.floor(Math.pow(i / bufferLength, 0.5) * bufferLength));\n          newDataArray[i] = dataArray[logIndex];\n          newTimeArray[i] = timeArray[logIndex];\n        }\n        \n        setAudioData({ \n          dataArray: newDataArray, \n          timeArray: newTimeArray, \n          bufferLength \n        });\n      };\n      \n      update3DAudio(performance.now());\n      return;\n    }\n    \n    // For 2D visualizations, ensure canvas exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in startVisualization for 2D visualization\");\n      return;\n    }\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', { alpha: false }); // Optimize by disabling alpha\n    \n    // Cache parameter values outside the animation loop for better performance\n    let cachedParameters = { ...parameters };\n    \n    // Pre-process frequency data for better visualization\n    const processFrequencyData = (data) => {\n      // Create a copy to avoid modifying the original data\n      const processedData = new Uint8Array(data);\n      \n      // Apply bass boost for better low-frequency response\n      for (let i = 0; i < Math.min(processedData.length, 10); i++) {\n        processedData[i] = Math.min(255, processedData[i] * 1.5);\n      }\n      \n      return processedData;\n    };\n    \n    // Animation function for 2D visualizations\n    const draw = (currentTime) => {\n      animationFrameRef.current = requestAnimationFrame(draw);\n      \n      // Calculate delta time for smooth animation regardless of frame rate\n      const deltaTime = (currentTime - lastFrameTime) / frameInterval;\n      lastFrameTime = currentTime;\n      \n      // Increment time for animations with consistent speed\n      timeRef.current += 0.01 * Math.min(deltaTime, 2);\n      \n      // Get frequency and time domain data\n      analyser.getByteFrequencyData(dataArray);\n      analyser.getByteTimeDomainData(timeArray);\n      \n      // Process frequency data for better visualization\n      const processedData = processFrequencyData(dataArray);\n      \n      // Clear canvas\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      // Check if parameters have changed\n      if (JSON.stringify(cachedParameters) !== JSON.stringify(parameters)) {\n        cachedParameters = { ...parameters };\n      }\n      \n      // Draw visualization based on template\n      switch (template) {\n        case 'waveform':\n          drawWaveform(ctx, processedData, bufferLength, cachedParameters);\n          break;\n        case 'bars':\n          drawBars(ctx, processedData, bufferLength, cachedParameters);\n          break;\n        case 'circles':\n          drawCircles(ctx, processedData, bufferLength, cachedParameters);\n          break;\n        case 'kaleidoscope':\n          drawKaleidoscope(ctx, processedData, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'spiral':\n          drawSpiral(ctx, processedData, timeArray, bufferLength, cachedParameters);\n          break;\n        case 'particles':\n          updateAndDrawParticles(ctx, processedData, bufferLength, cachedParameters);\n          break;\n        default:\n          drawWaveform(ctx, processedData, bufferLength, cachedParameters);\n      }\n    };\n    \n    draw(performance.now());\n  };\n\n  const drawWaveform = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawWaveform\");\n      return;\n    }\n    \n    // Apply parameters\n    const lineWidth = cachedParameters.lineWidth || 3;\n    const color = cachedParameters.color || '#00aaff';\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // Convert to 0-2 scale\n    const smoothing = (cachedParameters.smoothing || 50) / 100; // Convert to 0-1 scale\n    \n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = color;\n    ctx.beginPath();\n    \n    const sliceWidth = (canvasRef.current.width * 1.0) / bufferLength;\n    let x = 0;\n    \n    for (let i = 0; i < bufferLength; i++) {\n      const v = dataArray[i] / 128.0 * reactivity;\n      const y = v * canvasRef.current.height / 2;\n      \n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        // Apply smoothing if enabled\n        if (smoothing > 0) {\n          const prevX = x - sliceWidth;\n          const prevY = dataArray[i - 1] / 128.0 * reactivity * canvasRef.current.height / 2;\n          const cpX1 = prevX + sliceWidth / 3;\n          const cpX2 = x - sliceWidth / 3;\n          const cpY1 = prevY;\n          const cpY2 = y;\n          \n          // Use bezier curve for smoothing\n          ctx.bezierCurveTo(cpX1, cpY1, cpX2, cpY2, x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      \n      x += sliceWidth;\n    }\n    \n    ctx.lineTo(canvasRef.current.width, canvasRef.current.height / 2);\n    ctx.stroke();\n  };\n\n  const drawBars = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawBars\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ff5500';\n    const barWidth = (cachedParameters.barWidth || 50) / 100; // Convert to 0-1 scale\n    const spacing = (cachedParameters.spacing || 30) / 100; // Convert to 0-1 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 25; // Convert to 0-4 scale\n    \n    const bars = Math.min(bufferLength, 256);\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    \n    const barWidthPx = (width / bars) * barWidth;\n    const barSpacing = (width / bars) * spacing;\n    const totalBarWidth = barWidthPx + barSpacing;\n    \n    for (let i = 0; i < bars; i++) {\n      // Use logarithmic mapping to emphasize lower frequencies\n      const dataIndex = Math.min(bufferLength - 1, Math.floor(Math.pow(i / bars, 1.2) * bufferLength));\n      const barHeight = dataArray[dataIndex] * reactivity;\n      \n      const x = i * totalBarWidth;\n      const y = height - barHeight;\n      \n      ctx.fillStyle = adjustColor(color, (i / bars) * 30);\n      ctx.fillRect(x, y, barWidthPx, barHeight);\n    }\n  };\n\n  const drawCircles = (ctx, dataArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawCircles\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ff00ff';\n    const baseRadius = (cachedParameters.radius || 50) / 100 * Math.min(canvasRef.current.width, canvasRef.current.height) / 2;\n    const circleCount = Math.max(1, Math.min(20, Math.floor((cachedParameters.count || 50) / 5))); // 1-20 circles\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // Convert to 0-2 scale\n    \n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n    \n    // Draw circles\n    for (let c = 0; c < circleCount; c++) {\n      const circleIndex = Math.floor((c / circleCount) * bufferLength);\n      const audioValue = dataArray[circleIndex] / 128.0 * reactivity;\n      \n      const radius = baseRadius * (c + 1) / circleCount * audioValue;\n      \n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      ctx.strokeStyle = adjustColor(color, (c / circleCount) * 50);\n      ctx.stroke();\n    }\n  };\n\n  const drawKaleidoscope = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawKaleidoscope\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#ffaa00';\n    const segments = cachedParameters.segments || 8;\n    const speed = (cachedParameters.speed || 50) / 1000; // Convert to 0-0.05 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 50; // Convert to 0-2 scale\n    \n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n    const radius = Math.min(centerX, centerY) * 0.9;\n    \n    // Draw kaleidoscope segments\n    for (let s = 0; s < segments; s++) {\n      const angle = (s / segments) * Math.PI * 2;\n      const rotationOffset = timeRef.current * speed;\n      \n      ctx.save();\n      ctx.translate(centerX, centerY);\n      ctx.rotate(angle + rotationOffset);\n      \n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      \n      for (let i = 0; i < bufferLength; i += 8) {\n        const normalizedIndex = i / bufferLength;\n        const audioValue = dataArray[i] / 128.0 * reactivity;\n        \n        const x = normalizedIndex * radius * audioValue;\n        const y = (timeArray[i] / 128.0 - 1) * radius * 0.5 * audioValue;\n        \n        ctx.lineTo(x, y);\n      }\n      \n      ctx.strokeStyle = adjustColor(color, s * 5);\n      ctx.stroke();\n      ctx.restore();\n    }\n  };\n\n  const drawSpiral = (ctx, dataArray, timeArray, bufferLength, cachedParameters) => {\n    // Safety check - ensure canvas reference exists\n    if (!canvasRef.current) {\n      console.error(\"Canvas reference is null in drawSpiral\");\n      return;\n    }\n    \n    // Apply parameters\n    const color = cachedParameters.color || '#00ff99';\n    const arms = cachedParameters.arms || 5;\n    const speed = (cachedParameters.speed || 50) / 1000; // Convert to 0-0.05 scale\n    const reactivity = (cachedParameters.reactivity || 50) / 25; // Increased reactivity range (0-4 scale)\n    \n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n    const maxRadius = Math.min(centerX, centerY) * 0.9;\n    \n    // Rotate based on time and speed\n    ctx.translate(centerX, centerY);\n    ctx.rotate(timeRef.current * speed);\n    \n    // Pre-calculate common values\n    const PI2 = Math.PI * 2;\n    const PI6 = Math.PI * 6;\n    \n    // Calculate beat detection for pulsing effect\n    let beatDetected = false;\n    let bassEnergy = 0;\n    \n    // Calculate bass energy (low frequencies)\n    for (let i = 0; i < Math.min(8, bufferLength); i++) {\n      bassEnergy += dataArray[i];\n    }\n    bassEnergy = bassEnergy / Math.min(8, bufferLength) / 255;\n    \n    // Detect beats by comparing current bass energy to recent average\n    if (bassEnergy > 0.6) {\n      beatDetected = true;\n    }\n    \n    // Pre-calculate arm colors to avoid recalculating in the loop\n    const armColors = [];\n    for (let a = 0; a < arms; a++) {\n      // Make colors more vibrant on beat detection\n      const colorOffset = beatDetected ? 20 : 10;\n      armColors[a] = adjustColor(color, a * colorOffset);\n    }\n    \n    // Draw spiral arms\n    for (let a = 0; a < arms; a++) {\n      const armAngle = (a / arms) * PI2;\n      \n      ctx.beginPath();\n      ctx.strokeStyle = armColors[a];\n      \n      // Adjust line width based on beat detection\n      ctx.lineWidth = beatDetected ? 2.5 : 1.5;\n      \n      // Use a more efficient approach for drawing the spiral\n      // but maintain the original visual appearance with 100 points\n      const pointsPerArm = 100;\n      \n      // Each arm responds to a different frequency range\n      const freqRangeStart = Math.floor((a / arms) * (bufferLength / 4));\n      const freqRangeEnd = Math.floor(((a + 1) / arms) * (bufferLength / 4));\n      \n      for (let i = 0; i < pointsPerArm; i++) {\n        const t = i / pointsPerArm;\n        const angle = armAngle + t * PI6;\n        const radius = t * maxRadius;\n        \n        // Apply audio reactivity - use frequency range specific to this arm\n        const freqIndex = Math.min(bufferLength - 1, freqRangeStart + Math.floor(t * (freqRangeEnd - freqRangeStart)));\n        \n        // Apply smoothing between adjacent frequency bins\n        let audioValue = dataArray[freqIndex] / 128.0;\n        if (freqIndex > 0 && freqIndex < bufferLength - 1) {\n          audioValue = (dataArray[freqIndex - 1] + dataArray[freqIndex] * 2 + dataArray[freqIndex + 1]) / (4 * 128.0);\n        }\n        \n        // Add a base value to ensure the spiral is visible even with low audio\n        const baseValue = 0.3;\n        const scaledAudioValue = baseValue + (audioValue * reactivity * (1 - baseValue));\n        \n        // Add subtle pulsing effect on beat detection\n        const pulseEffect = beatDetected ? 1.2 : 1.0;\n        \n        // Pre-calculate trig functions for performance\n        const cosAngle = Math.cos(angle);\n        const sinAngle = Math.sin(angle);\n        \n        const x = cosAngle * radius * scaledAudioValue * pulseEffect;\n        const y = sinAngle * radius * scaledAudioValue * pulseEffect;\n        \n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      \n      ctx.stroke();\n    }\n    \n    // Reset transformation\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  };\n\n  // Update parameters when initialParameters change - use a ref to avoid re-renders\n  useEffect(() => {\n    // Only log in development\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(\"Visualizer received updated parameters:\", initialParameters);\n    }\n    \n    if (initialParameters && Object.keys(initialParameters).length > 0) {\n      // Use a simple update without triggering re-renders\n      setParameters(initialParameters);\n    }\n  }, [initialParameters]);\n\n  // Add a function to update parameters\n  const updateParameters = (newParameters) => {\n    // Only log in development\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(\"Updating visualization parameters:\", newParameters);\n    }\n    \n    setParameters(newParameters);\n  };\n\n  return (\n    <div className=\"visualizer-container\">\n      <div \n        ref={containerRef}\n        className={`visualizer-aspect-container ${RESOLUTIONS[resolution].className}`}\n      >\n        {use3D ? (\n          <ThreeVisualizer \n            audioData={audioData}\n            template={template.replace('3d', '')} // Remove '3d' suffix for the ThreeVisualizer\n            isPlaying={isPlaying}\n            parameters={parameters}\n          />\n        ) : (\n          <canvas ref={canvasRef} className=\"visualizer-canvas\"></canvas>\n        )}\n        <div className=\"visualizer-overlay\"></div>\n        <div className=\"resolution-indicator\">{resolution} ({RESOLUTIONS[resolution].width}×{RESOLUTIONS[resolution].height})</div>\n      </div>\n    </div>\n  );\n});\n\nexport default Visualizer; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACtE,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,GAAG;EAClB,IAAI,EAAE;IAAEC,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE,IAAI;IAAEC,SAAS,EAAE;EAAkB,CAAC;EACjE,OAAO,EAAE;IAAEF,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE,IAAI;IAAEC,SAAS,EAAE;EAAqB,CAAC;EACvE,MAAM,EAAE;IAAEF,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE,GAAG;IAAEC,SAAS,EAAE;EAAoB,CAAC;EACpE,QAAQ,EAAE;IAAEF,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE,GAAG;IAAEC,SAAS,EAAE;EAAsB,CAAC;EACvE,UAAU,EAAE;IAAEF,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE,IAAI;IAAEC,SAAS,EAAE;EAAwB;AAC9E,CAAC;AAED,MAAMC,UAAU,gBAAAC,EAAA,cAAGV,UAAU,CAAAW,EAAA,GAAAD,EAAA,CAAC,CAAC;EAAEE,SAAS;EAAEC,QAAQ;EAAEC,SAAS;EAAEC,qBAAqB;EAAEC,UAAU,EAAEC,iBAAiB,GAAG,CAAC;AAAE,CAAC,EAAEC,GAAG,KAAK;EAAAR,EAAA;EACpI,MAAMS,SAAS,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMqB,YAAY,GAAGrB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMsB,eAAe,GAAGtB,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMuB,WAAW,GAAGvB,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMwB,iBAAiB,GAAGxB,MAAM,CAAC,IAAI,CAAC;EACtC,MAAMyB,SAAS,GAAGzB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM0B,eAAe,GAAG1B,MAAM,CAAC,IAAI,CAAC;EACpC,MAAM2B,YAAY,GAAG3B,MAAM,CAAC,EAAE,CAAC;EAC/B,MAAM4B,OAAO,GAAG5B,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3B,MAAM,CAAC6B,UAAU,EAAEC,aAAa,CAAC,GAAG5B,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EACvD,MAAM,CAAC6B,SAAS,EAAEC,YAAY,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC+B,KAAK,EAAEC,QAAQ,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACe,UAAU,EAAEkB,aAAa,CAAC,GAAGjC,QAAQ,CAACgB,iBAAiB,CAAC;;EAE/D;EACAnB,SAAS,CAAC,MAAM;IACd;IACA,MAAMqC,eAAe,GAAG,CAAC,aAAa,EAAE,YAAY,EAAE,UAAU,EAAE,gBAAgB,CAAC;IACnFF,QAAQ,CAACE,eAAe,CAACC,QAAQ,CAACvB,QAAQ,CAAC,CAAC;EAC9C,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACAf,SAAS,CAAC,MAAM;IACd,IAAI,CAACc,SAAS,EAAE;IAEhB,IAAIyB,aAAa,GAAG,KAAK;IAEzB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,IAAI,CAACjB,eAAe,CAACkB,OAAO,EAAE;UAC5B;UACA,MAAMC,OAAO,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;UACxEtB,eAAe,CAACkB,OAAO,GAAGC,OAAO;;UAEjC;UACA,MAAMI,QAAQ,GAAGJ,OAAO,CAACK,cAAc,CAAC,CAAC;UACzCD,QAAQ,CAACE,OAAO,GAAG,IAAI,CAAC,CAAC;UACzBF,QAAQ,CAACG,qBAAqB,GAAG,GAAG,CAAC,CAAC;UACtCzB,WAAW,CAACiB,OAAO,GAAGK,QAAQ;QAChC;;QAEA;QACA,MAAMI,YAAY,GAAG,IAAIC,KAAK,CAAC,CAAC;QAChCD,YAAY,CAACE,WAAW,GAAG,WAAW;QACtCF,YAAY,CAACG,OAAO,GAAG,MAAM;;QAE7B;QACA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QACtCN,YAAY,CAACO,GAAG,GAAG,wBAAwB3C,SAAS,CAAC4C,IAAI,MAAMJ,SAAS,EAAE;;QAE1E;QACA,MAAM,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;UACrC,MAAMC,WAAW,GAAGA,CAAA,KAAM;YACxBC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEd,YAAY,CAACe,QAAQ,CAAC;YAC7DL,OAAO,CAAC,CAAC;UACX,CAAC;UAED,MAAMM,YAAY,GAAIC,KAAK,IAAK;YAC9BJ,OAAO,CAACI,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;YACzCN,MAAM,CAACM,KAAK,CAAC;UACf,CAAC;UAEDjB,YAAY,CAACkB,gBAAgB,CAAC,gBAAgB,EAAEN,WAAW,EAAE;YAAEO,IAAI,EAAE;UAAK,CAAC,CAAC;UAC5EnB,YAAY,CAACkB,gBAAgB,CAAC,OAAO,EAAEF,YAAY,EAAE;YAAEG,IAAI,EAAE;UAAK,CAAC,CAAC;UACpEnB,YAAY,CAACoB,IAAI,CAAC,CAAC;QACrB,CAAC,CAAC;;QAEF;QACA,IAAI,CAAC/B,aAAa,EAAE;UAClB;UACA,IAAIb,SAAS,CAACe,OAAO,EAAE;YACrBf,SAAS,CAACe,OAAO,CAAC8B,UAAU,CAAC,CAAC;UAChC;;UAEA;UACA,MAAMC,WAAW,GAAGjD,eAAe,CAACkB,OAAO,CAACgC,wBAAwB,CAACvB,YAAY,CAAC;UAClFxB,SAAS,CAACe,OAAO,GAAG+B,WAAW;UAC/BA,WAAW,CAACE,OAAO,CAAClD,WAAW,CAACiB,OAAO,CAAC;UACxCjB,WAAW,CAACiB,OAAO,CAACiC,OAAO,CAACnD,eAAe,CAACkB,OAAO,CAACkC,WAAW,CAAC;UAChEpC,aAAa,GAAG,IAAI;QACtB;;QAEA;QACA,MAAMqC,SAAS,GAAGA,CAAA,KAAM;UACtBb,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEd,YAAY,CAAC2B,WAAW,CAAC;UACjD,IAAI7D,SAAS,EAAE8D,kBAAkB,CAAC,CAAC;QACrC,CAAC;QAED5B,YAAY,CAACkB,gBAAgB,CAAC,SAAS,EAAEQ,SAAS,CAAC;QACnD1B,YAAY,CAACkB,gBAAgB,CAAC,QAAQ,EAAEQ,SAAS,CAAC;QAClD;;QAEA;QACAjD,eAAe,CAACc,OAAO,GAAGS,YAAY;QACtCjC,qBAAqB,CAACiC,YAAY,CAAC;;QAEnC;QACA,IAAI3B,eAAe,CAACkB,OAAO,CAACsC,KAAK,KAAK,WAAW,EAAE;UACjD,MAAMxD,eAAe,CAACkB,OAAO,CAACuC,MAAM,CAAC,CAAC;QACxC;QAEA,OAAO,MAAM;UACXjB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;UACxCd,YAAY,CAAC+B,mBAAmB,CAAC,SAAS,EAAEL,SAAS,CAAC;UACtD1B,YAAY,CAAC+B,mBAAmB,CAAC,QAAQ,EAAEL,SAAS,CAAC;UACrD;UACA1B,YAAY,CAACgC,KAAK,CAAC,CAAC;UACpBhC,YAAY,CAACO,GAAG,GAAG,EAAE;UACrBxC,qBAAqB,CAAC,IAAI,CAAC;QAC7B,CAAC;MACH,CAAC,CAAC,OAAOkD,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDgB,KAAK,CAAC,wCAAwC,CAAC;MACjD;IACF,CAAC;IAED3C,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAAC1B,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB;EACAd,SAAS,CAAC,MAAM;IACd,MAAMkD,YAAY,GAAGvB,eAAe,CAACc,OAAO;IAC5C,IAAI,CAACS,YAAY,EAAE;IAEnB,MAAMkC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QAAA,IAAAC,qBAAA;QACF;QACA,IAAI,EAAAA,qBAAA,GAAA9D,eAAe,CAACkB,OAAO,cAAA4C,qBAAA,uBAAvBA,qBAAA,CAAyBN,KAAK,MAAK,WAAW,EAAE;UAClD,MAAMxD,eAAe,CAACkB,OAAO,CAACuC,MAAM,CAAC,CAAC;QACxC;QAEAjB,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/B,MAAMd,YAAY,CAACoC,IAAI,CAAC,CAAC;QACzBR,kBAAkB,CAAC,CAAC;MACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;QACvCgB,KAAK,CAAC,wCAAwC,CAAC;MACjD;IACF,CAAC;IAED,IAAInE,SAAS,EAAE;MACboE,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACLrB,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/Bd,YAAY,CAACgC,KAAK,CAAC,CAAC;MACpBK,oBAAoB,CAAC9D,iBAAiB,CAACgB,OAAO,CAAC;IACjD;EACF,CAAC,EAAE,CAACzB,SAAS,CAAC,CAAC;;EAEf;EACAhB,SAAS,CAAC,MAAM;IACd,IAAI,CAACqB,SAAS,CAACoB,OAAO,EAAE;IAExB,MAAM+C,MAAM,GAAGnE,SAAS,CAACoB,OAAO;IAChC,MAAMgD,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;IAEnC;IACAD,GAAG,CAACE,SAAS,GAAG,cAAc;IAC9BF,GAAG,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAAChF,KAAK,EAAEgF,MAAM,CAAC/E,MAAM,CAAC;;IAE/C;IACA,IAAIO,SAAS,EAAE;MACb8D,kBAAkB,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAAC/D,QAAQ,CAAC,CAAC;;EAEd;EACAf,SAAS,CAAC,MAAM;IACd,IAAI,CAACqB,SAAS,CAACoB,OAAO,EAAE;IAExB,MAAM+C,MAAM,GAAGnE,SAAS,CAACoB,OAAO;IAChC,MAAM;MAAEjC,KAAK;MAAEC;IAAO,CAAC,GAAGF,WAAW,CAACuB,UAAU,CAAC;;IAEjD;IACA0D,MAAM,CAAChF,KAAK,GAAGA,KAAK;IACpBgF,MAAM,CAAC/E,MAAM,GAAGA,MAAM;;IAEtB;IACA,MAAMgF,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAACE,SAAS,GAAG,cAAc;IAC9BF,GAAG,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAAChF,KAAK,EAAEgF,MAAM,CAAC/E,MAAM,CAAC;;IAE/C;IACA,IAAIa,YAAY,CAACmB,OAAO,EAAE;MACxB,IAAIX,UAAU,KAAK,UAAU,EAAE;QAC7BR,YAAY,CAACmB,OAAO,CAACoD,KAAK,CAACrF,KAAK,GAAG,MAAM;QACzCc,YAAY,CAACmB,OAAO,CAACoD,KAAK,CAACpF,MAAM,GAAG,MAAM;MAC5C,CAAC,MAAM,IAAIqB,UAAU,KAAK,QAAQ,EAAE;QAClCR,YAAY,CAACmB,OAAO,CAACoD,KAAK,CAACrF,KAAK,GAAG,OAAO;QAC1Cc,YAAY,CAACmB,OAAO,CAACoD,KAAK,CAACpF,MAAM,GAAG,OAAO;QAC3Ca,YAAY,CAACmB,OAAO,CAACoD,KAAK,CAACC,QAAQ,GAAG,OAAO;QAC7CxE,YAAY,CAACmB,OAAO,CAACoD,KAAK,CAACE,SAAS,GAAG,OAAO;MAChD,CAAC,MAAM;QACLzE,YAAY,CAACmB,OAAO,CAACoD,KAAK,CAACrF,KAAK,GAAG,MAAM;QACzCc,YAAY,CAACmB,OAAO,CAACoD,KAAK,CAACpF,MAAM,GAAG,MAAM;QAC1Ca,YAAY,CAACmB,OAAO,CAACoD,KAAK,CAACC,QAAQ,GAAG,GAAGtF,KAAK,IAAI;QAClDc,YAAY,CAACmB,OAAO,CAACoD,KAAK,CAACE,SAAS,GAAG,GAAGtF,MAAM,IAAI;MACtD;IACF;;IAEA;IACA,IAAIO,SAAS,EAAE;MACb8D,kBAAkB,CAAC,CAAC;IACtB;;IAEA;IACA,IAAI/D,QAAQ,KAAK,WAAW,EAAE;MAC5BiF,aAAa,CAACP,GAAG,CAAC;IACpB;EACF,CAAC,EAAE,CAAC3D,UAAU,EAAEd,SAAS,EAAED,QAAQ,CAAC,CAAC;;EAErC;EACA,MAAMkF,gBAAgB,GAAIC,aAAa,IAAK;IAC1C,IAAI3F,WAAW,CAAC2F,aAAa,CAAC,EAAE;MAC9BnE,aAAa,CAACmE,aAAa,CAAC;IAC9B;EACF,CAAC;;EAED;EACAnG,KAAK,CAACoG,mBAAmB,CAAC/E,GAAG,EAAE,OAAO;IACpC6E,gBAAgB;IAChBG,oBAAoB,EAAEA,CAAA,KAAMtE,UAAU;IACtCuE;EACF,CAAC,CAAC,CAAC;EAEH,MAAML,aAAa,GAAIP,GAAG,IAAK;IAC7B;IACA,IAAI,CAACA,GAAG,IAAI,CAACA,GAAG,CAACD,MAAM,EAAE;MACvBzB,OAAO,CAACI,KAAK,CAAC,yCAAyC,CAAC;MACxD;IACF;IAEA,MAAMmC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAAE,CAACtF,UAAU,CAACoF,KAAK,IAAI,EAAE,IAAI,EAAE,GAAI,GAAG,CAAC,CAAC,CAAC;IACjE1E,YAAY,CAACa,OAAO,GAAG,EAAE;IAEzB,KAAK,IAAIgE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,EAAEG,CAAC,EAAE,EAAE;MAC9B7E,YAAY,CAACa,OAAO,CAACiE,IAAI,CAAC;QACxBC,CAAC,EAAEJ,IAAI,CAACK,MAAM,CAAC,CAAC,GAAGnB,GAAG,CAACD,MAAM,CAAChF,KAAK;QACnCqG,CAAC,EAAEN,IAAI,CAACK,MAAM,CAAC,CAAC,GAAGnB,GAAG,CAACD,MAAM,CAAC/E,MAAM;QACpCqG,IAAI,EAAEP,IAAI,CAACK,MAAM,CAAC,CAAC,IAAI,CAAC1F,UAAU,CAAC4F,IAAI,IAAI,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC;QAAE;QAC1DC,EAAE,EAAE,CAACR,IAAI,CAACK,MAAM,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC1F,UAAU,CAAC8F,KAAK,IAAI,EAAE,IAAI,EAAE,CAAC;QAAE;QAC7DC,EAAE,EAAE,CAACV,IAAI,CAACK,MAAM,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC1F,UAAU,CAAC8F,KAAK,IAAI,EAAE,IAAI,EAAE,CAAC;QAC3DE,GAAG,EAAEX,IAAI,CAACK,MAAM,CAAC,CAAC,GAAG;MACvB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMO,sBAAsB,GAAGA,CAAC1B,GAAG,EAAE2B,SAAS,EAAEC,YAAY,EAAEC,gBAAgB,KAAK;IACjF;IACA,IAAI,CAACjG,SAAS,CAACoB,OAAO,EAAE;MACtBsB,OAAO,CAACI,KAAK,CAAC,oDAAoD,CAAC;MACnE;IACF;;IAEA;IACA,IAAI,CAACvC,YAAY,CAACa,OAAO,IAAIb,YAAY,CAACa,OAAO,CAAC8E,MAAM,KAAK,CAAC,EAAE;MAC9DxD,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;MAC/DgC,aAAa,CAACP,GAAG,CAAC;;MAElB;MACA,IAAI,CAAC7D,YAAY,CAACa,OAAO,IAAIb,YAAY,CAACa,OAAO,CAAC8E,MAAM,KAAK,CAAC,EAAE;QAC9DxD,OAAO,CAACI,KAAK,CAAC,gCAAgC,CAAC;QAC/C;MACF;IACF;;IAEA;IACA,MAAMqD,KAAK,GAAGF,gBAAgB,CAACE,KAAK,IAAI,SAAS;IACjD,MAAMC,aAAa,GAAGlB,IAAI,CAACC,KAAK,CAAE,CAACc,gBAAgB,CAAChB,KAAK,IAAI,EAAE,IAAI,GAAG,GAAI1E,YAAY,CAACa,OAAO,CAAC8E,MAAM,CAAC;IACtG,MAAMG,YAAY,GAAG,CAACJ,gBAAgB,CAACR,IAAI,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACzD,MAAME,KAAK,GAAG,CAACM,gBAAgB,CAACN,KAAK,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACnD,MAAMW,UAAU,GAAG,CAACL,gBAAgB,CAACK,UAAU,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;;IAE7D;IACAlC,GAAG,CAACE,SAAS,GAAG,oBAAoB;IACpCF,GAAG,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEvE,SAAS,CAACoB,OAAO,CAACjC,KAAK,EAAEa,SAAS,CAACoB,OAAO,CAAChC,MAAM,CAAC;;IAErE;IACA,KAAK,IAAIgG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgB,aAAa,EAAEhB,CAAC,EAAE,EAAE;MACtC,MAAMmB,QAAQ,GAAGhG,YAAY,CAACa,OAAO,CAACgE,CAAC,CAAC;;MAExC;MACA,MAAMoB,SAAS,GAAGtB,IAAI,CAACC,KAAK,CAAEC,CAAC,GAAGgB,aAAa,GAAIJ,YAAY,CAAC;MAChE,MAAMS,UAAU,GAAGV,SAAS,CAACS,SAAS,CAAC,GAAG,KAAK,GAAGF,UAAU;;MAE5D;MACAC,QAAQ,CAACjB,CAAC,IAAIiB,QAAQ,CAACb,EAAE,GAAGC,KAAK;MACjCY,QAAQ,CAACf,CAAC,IAAIe,QAAQ,CAACX,EAAE,GAAGD,KAAK;;MAEjC;MACA,IAAIY,QAAQ,CAACjB,CAAC,GAAG,CAAC,IAAIiB,QAAQ,CAACjB,CAAC,GAAGtF,SAAS,CAACoB,OAAO,CAACjC,KAAK,EAAE;QAC1DoH,QAAQ,CAACb,EAAE,GAAG,CAACa,QAAQ,CAACb,EAAE;MAC5B;MAEA,IAAIa,QAAQ,CAACf,CAAC,GAAG,CAAC,IAAIe,QAAQ,CAACf,CAAC,GAAGxF,SAAS,CAACoB,OAAO,CAAChC,MAAM,EAAE;QAC3DmH,QAAQ,CAACX,EAAE,GAAG,CAACW,QAAQ,CAACX,EAAE;MAC5B;;MAEA;MACA,MAAMH,IAAI,GAAGY,YAAY,IAAI,CAAC,GAAGI,UAAU,CAAC;MAC5CrC,GAAG,CAACsC,SAAS,CAAC,CAAC;MACftC,GAAG,CAACuC,GAAG,CAACJ,QAAQ,CAACjB,CAAC,EAAEiB,QAAQ,CAACf,CAAC,EAAEC,IAAI,EAAE,CAAC,EAAEP,IAAI,CAAC0B,EAAE,GAAG,CAAC,CAAC;MACrDxC,GAAG,CAACE,SAAS,GAAGuC,WAAW,CAACV,KAAK,EAAEM,UAAU,GAAG,EAAE,CAAC;MACnDrC,GAAG,CAAC0C,IAAI,CAAC,CAAC;IACZ;EACF,CAAC;;EAED;EACA,MAAMD,WAAW,GAAGA,CAACE,QAAQ,EAAEC,MAAM,KAAK;IACxC;IACA,IAAIC,CAAC,GAAGC,QAAQ,CAACH,QAAQ,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAC9C,IAAIC,CAAC,GAAGF,QAAQ,CAACH,QAAQ,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAC9C,IAAIE,CAAC,GAAGH,QAAQ,CAACH,QAAQ,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;;IAE9C;IACAF,CAAC,GAAG/B,IAAI,CAACoC,GAAG,CAAC,CAAC,EAAEpC,IAAI,CAACqC,GAAG,CAAC,GAAG,EAAEN,CAAC,GAAGD,MAAM,CAAC,CAAC;IAC1CI,CAAC,GAAGlC,IAAI,CAACoC,GAAG,CAAC,CAAC,EAAEpC,IAAI,CAACqC,GAAG,CAAC,GAAG,EAAEH,CAAC,GAAGJ,MAAM,CAAC,CAAC;IAC1CK,CAAC,GAAGnC,IAAI,CAACoC,GAAG,CAAC,CAAC,EAAEpC,IAAI,CAACqC,GAAG,CAAC,GAAG,EAAEF,CAAC,GAAGL,MAAM,CAAC,CAAC;;IAE1C;IACA,OAAO,IAAIC,CAAC,CAACO,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAGL,CAAC,CAACI,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAGJ,CAAC,CAACG,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EAClH,CAAC;;EAED;EACA,MAAMhE,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI,CAACtD,WAAW,CAACiB,OAAO,EAAE;MACxBsB,OAAO,CAACI,KAAK,CAAC,kDAAkD,CAAC;MACjE;IACF;IAEA,MAAMrB,QAAQ,GAAGtB,WAAW,CAACiB,OAAO;;IAEpC;IACA,MAAM4E,YAAY,GAAGvE,QAAQ,CAACiG,iBAAiB;IAC/C,MAAM3B,SAAS,GAAG,IAAI4B,UAAU,CAAC3B,YAAY,CAAC;IAC9C,MAAM4B,SAAS,GAAG,IAAID,UAAU,CAAC3B,YAAY,CAAC;;IAE9C;IACAvE,QAAQ,CAACoG,oBAAoB,CAAC9B,SAAS,CAAC;IACxCtE,QAAQ,CAACqG,qBAAqB,CAACF,SAAS,CAAC;;IAEzC;IACA,IAAIxH,iBAAiB,CAACgB,OAAO,EAAE;MAC7B8C,oBAAoB,CAAC9D,iBAAiB,CAACgB,OAAO,CAAC;IACjD;;IAEA;IACAZ,OAAO,CAACY,OAAO,GAAG,CAAC;;IAEnB;IACA,IAAI2G,aAAa,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;IACrC,MAAMC,eAAe,GAAG,EAAE,CAAC,CAAC;IAC5B,MAAMC,aAAa,GAAG,IAAI,GAAGD,eAAe;;IAE5C;IACA,IAAIrH,KAAK,EAAE;MACT;MACA,MAAMuH,aAAa,GAAI5E,WAAW,IAAK;QACrCpD,iBAAiB,CAACgB,OAAO,GAAGiH,qBAAqB,CAACD,aAAa,CAAC;;QAEhE;QACA,MAAME,SAAS,GAAG,CAAC9E,WAAW,GAAGuE,aAAa,IAAII,aAAa;QAC/DJ,aAAa,GAAGvE,WAAW;;QAE3B;QACAhD,OAAO,CAACY,OAAO,IAAI,IAAI,GAAG8D,IAAI,CAACqC,GAAG,CAACe,SAAS,EAAE,CAAC,CAAC;;QAEhD;QACA7G,QAAQ,CAACoG,oBAAoB,CAAC9B,SAAS,CAAC;QACxCtE,QAAQ,CAACqG,qBAAqB,CAACF,SAAS,CAAC;;QAEzC;QACA,MAAMW,YAAY,GAAG,IAAIC,KAAK,CAACxC,YAAY,CAAC;QAC5C,MAAMyC,YAAY,GAAG,IAAID,KAAK,CAACxC,YAAY,CAAC;;QAE5C;QACA,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,YAAY,EAAEZ,CAAC,EAAE,EAAE;UACrC;UACA,MAAMsD,QAAQ,GAAGxD,IAAI,CAACqC,GAAG,CAACvB,YAAY,GAAG,CAAC,EAAEd,IAAI,CAACC,KAAK,CAACD,IAAI,CAACyD,GAAG,CAACvD,CAAC,GAAGY,YAAY,EAAE,GAAG,CAAC,GAAGA,YAAY,CAAC,CAAC;UACvGuC,YAAY,CAACnD,CAAC,CAAC,GAAGW,SAAS,CAAC2C,QAAQ,CAAC;UACrCD,YAAY,CAACrD,CAAC,CAAC,GAAGwC,SAAS,CAACc,QAAQ,CAAC;QACvC;QAEA9H,YAAY,CAAC;UACXmF,SAAS,EAAEwC,YAAY;UACvBX,SAAS,EAAEa,YAAY;UACvBzC;QACF,CAAC,CAAC;MACJ,CAAC;MAEDoC,aAAa,CAACJ,WAAW,CAACC,GAAG,CAAC,CAAC,CAAC;MAChC;IACF;;IAEA;IACA,IAAI,CAACjI,SAAS,CAACoB,OAAO,EAAE;MACtBsB,OAAO,CAACI,KAAK,CAAC,qEAAqE,CAAC;MACpF;IACF;IAEA,MAAMqB,MAAM,GAAGnE,SAAS,CAACoB,OAAO;IAChC,MAAMgD,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,EAAE;MAAEuE,KAAK,EAAE;IAAM,CAAC,CAAC,CAAC,CAAC;;IAEvD;IACA,IAAI3C,gBAAgB,GAAG;MAAE,GAAGpG;IAAW,CAAC;;IAExC;IACA,MAAMgJ,oBAAoB,GAAIC,IAAI,IAAK;MACrC;MACA,MAAMC,aAAa,GAAG,IAAIpB,UAAU,CAACmB,IAAI,CAAC;;MAE1C;MACA,KAAK,IAAI1D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACqC,GAAG,CAACwB,aAAa,CAAC7C,MAAM,EAAE,EAAE,CAAC,EAAEd,CAAC,EAAE,EAAE;QAC3D2D,aAAa,CAAC3D,CAAC,CAAC,GAAGF,IAAI,CAACqC,GAAG,CAAC,GAAG,EAAEwB,aAAa,CAAC3D,CAAC,CAAC,GAAG,GAAG,CAAC;MAC1D;MAEA,OAAO2D,aAAa;IACtB,CAAC;;IAED;IACA,MAAMC,IAAI,GAAIxF,WAAW,IAAK;MAC5BpD,iBAAiB,CAACgB,OAAO,GAAGiH,qBAAqB,CAACW,IAAI,CAAC;;MAEvD;MACA,MAAMV,SAAS,GAAG,CAAC9E,WAAW,GAAGuE,aAAa,IAAII,aAAa;MAC/DJ,aAAa,GAAGvE,WAAW;;MAE3B;MACAhD,OAAO,CAACY,OAAO,IAAI,IAAI,GAAG8D,IAAI,CAACqC,GAAG,CAACe,SAAS,EAAE,CAAC,CAAC;;MAEhD;MACA7G,QAAQ,CAACoG,oBAAoB,CAAC9B,SAAS,CAAC;MACxCtE,QAAQ,CAACqG,qBAAqB,CAACF,SAAS,CAAC;;MAEzC;MACA,MAAMmB,aAAa,GAAGF,oBAAoB,CAAC9C,SAAS,CAAC;;MAErD;MACA3B,GAAG,CAACE,SAAS,GAAG,cAAc;MAC9BF,GAAG,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAAChF,KAAK,EAAEgF,MAAM,CAAC/E,MAAM,CAAC;;MAE/C;MACA,IAAI6J,IAAI,CAACC,SAAS,CAACjD,gBAAgB,CAAC,KAAKgD,IAAI,CAACC,SAAS,CAACrJ,UAAU,CAAC,EAAE;QACnEoG,gBAAgB,GAAG;UAAE,GAAGpG;QAAW,CAAC;MACtC;;MAEA;MACA,QAAQH,QAAQ;QACd,KAAK,UAAU;UACbyJ,YAAY,CAAC/E,GAAG,EAAE2E,aAAa,EAAE/C,YAAY,EAAEC,gBAAgB,CAAC;UAChE;QACF,KAAK,MAAM;UACTmD,QAAQ,CAAChF,GAAG,EAAE2E,aAAa,EAAE/C,YAAY,EAAEC,gBAAgB,CAAC;UAC5D;QACF,KAAK,SAAS;UACZoD,WAAW,CAACjF,GAAG,EAAE2E,aAAa,EAAE/C,YAAY,EAAEC,gBAAgB,CAAC;UAC/D;QACF,KAAK,cAAc;UACjBqD,gBAAgB,CAAClF,GAAG,EAAE2E,aAAa,EAAEnB,SAAS,EAAE5B,YAAY,EAAEC,gBAAgB,CAAC;UAC/E;QACF,KAAK,QAAQ;UACXsD,UAAU,CAACnF,GAAG,EAAE2E,aAAa,EAAEnB,SAAS,EAAE5B,YAAY,EAAEC,gBAAgB,CAAC;UACzE;QACF,KAAK,WAAW;UACdH,sBAAsB,CAAC1B,GAAG,EAAE2E,aAAa,EAAE/C,YAAY,EAAEC,gBAAgB,CAAC;UAC1E;QACF;UACEkD,YAAY,CAAC/E,GAAG,EAAE2E,aAAa,EAAE/C,YAAY,EAAEC,gBAAgB,CAAC;MACpE;IACF,CAAC;IAED+C,IAAI,CAAChB,WAAW,CAACC,GAAG,CAAC,CAAC,CAAC;EACzB,CAAC;EAED,MAAMkB,YAAY,GAAGA,CAAC/E,GAAG,EAAE2B,SAAS,EAAEC,YAAY,EAAEC,gBAAgB,KAAK;IACvE;IACA,IAAI,CAACjG,SAAS,CAACoB,OAAO,EAAE;MACtBsB,OAAO,CAACI,KAAK,CAAC,0CAA0C,CAAC;MACzD;IACF;;IAEA;IACA,MAAM0G,SAAS,GAAGvD,gBAAgB,CAACuD,SAAS,IAAI,CAAC;IACjD,MAAMrD,KAAK,GAAGF,gBAAgB,CAACE,KAAK,IAAI,SAAS;IACjD,MAAMG,UAAU,GAAG,CAACL,gBAAgB,CAACK,UAAU,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7D,MAAMmD,SAAS,GAAG,CAACxD,gBAAgB,CAACwD,SAAS,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC;;IAE5DrF,GAAG,CAACoF,SAAS,GAAGA,SAAS;IACzBpF,GAAG,CAACsF,WAAW,GAAGvD,KAAK;IACvB/B,GAAG,CAACsC,SAAS,CAAC,CAAC;IAEf,MAAMiD,UAAU,GAAI3J,SAAS,CAACoB,OAAO,CAACjC,KAAK,GAAG,GAAG,GAAI6G,YAAY;IACjE,IAAIV,CAAC,GAAG,CAAC;IAET,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,YAAY,EAAEZ,CAAC,EAAE,EAAE;MACrC,MAAMwE,CAAC,GAAG7D,SAAS,CAACX,CAAC,CAAC,GAAG,KAAK,GAAGkB,UAAU;MAC3C,MAAMd,CAAC,GAAGoE,CAAC,GAAG5J,SAAS,CAACoB,OAAO,CAAChC,MAAM,GAAG,CAAC;MAE1C,IAAIgG,CAAC,KAAK,CAAC,EAAE;QACXhB,GAAG,CAACyF,MAAM,CAACvE,CAAC,EAAEE,CAAC,CAAC;MAClB,CAAC,MAAM;QACL;QACA,IAAIiE,SAAS,GAAG,CAAC,EAAE;UACjB,MAAMK,KAAK,GAAGxE,CAAC,GAAGqE,UAAU;UAC5B,MAAMI,KAAK,GAAGhE,SAAS,CAACX,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAGkB,UAAU,GAAGtG,SAAS,CAACoB,OAAO,CAAChC,MAAM,GAAG,CAAC;UAClF,MAAM4K,IAAI,GAAGF,KAAK,GAAGH,UAAU,GAAG,CAAC;UACnC,MAAMM,IAAI,GAAG3E,CAAC,GAAGqE,UAAU,GAAG,CAAC;UAC/B,MAAMO,IAAI,GAAGH,KAAK;UAClB,MAAMI,IAAI,GAAG3E,CAAC;;UAEd;UACApB,GAAG,CAACgG,aAAa,CAACJ,IAAI,EAAEE,IAAI,EAAED,IAAI,EAAEE,IAAI,EAAE7E,CAAC,EAAEE,CAAC,CAAC;QACjD,CAAC,MAAM;UACLpB,GAAG,CAACiG,MAAM,CAAC/E,CAAC,EAAEE,CAAC,CAAC;QAClB;MACF;MAEAF,CAAC,IAAIqE,UAAU;IACjB;IAEAvF,GAAG,CAACiG,MAAM,CAACrK,SAAS,CAACoB,OAAO,CAACjC,KAAK,EAAEa,SAAS,CAACoB,OAAO,CAAChC,MAAM,GAAG,CAAC,CAAC;IACjEgF,GAAG,CAACkG,MAAM,CAAC,CAAC;EACd,CAAC;EAED,MAAMlB,QAAQ,GAAGA,CAAChF,GAAG,EAAE2B,SAAS,EAAEC,YAAY,EAAEC,gBAAgB,KAAK;IACnE;IACA,IAAI,CAACjG,SAAS,CAACoB,OAAO,EAAE;MACtBsB,OAAO,CAACI,KAAK,CAAC,sCAAsC,CAAC;MACrD;IACF;;IAEA;IACA,MAAMqD,KAAK,GAAGF,gBAAgB,CAACE,KAAK,IAAI,SAAS;IACjD,MAAMoE,QAAQ,GAAG,CAACtE,gBAAgB,CAACsE,QAAQ,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC;IAC1D,MAAMC,OAAO,GAAG,CAACvE,gBAAgB,CAACuE,OAAO,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC;IACxD,MAAMlE,UAAU,GAAG,CAACL,gBAAgB,CAACK,UAAU,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;;IAE7D,MAAMmE,IAAI,GAAGvF,IAAI,CAACqC,GAAG,CAACvB,YAAY,EAAE,GAAG,CAAC;IACxC,MAAM7G,KAAK,GAAGa,SAAS,CAACoB,OAAO,CAACjC,KAAK;IACrC,MAAMC,MAAM,GAAGY,SAAS,CAACoB,OAAO,CAAChC,MAAM;IAEvC,MAAMsL,UAAU,GAAIvL,KAAK,GAAGsL,IAAI,GAAIF,QAAQ;IAC5C,MAAMI,UAAU,GAAIxL,KAAK,GAAGsL,IAAI,GAAID,OAAO;IAC3C,MAAMI,aAAa,GAAGF,UAAU,GAAGC,UAAU;IAE7C,KAAK,IAAIvF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqF,IAAI,EAAErF,CAAC,EAAE,EAAE;MAC7B;MACA,MAAMoB,SAAS,GAAGtB,IAAI,CAACqC,GAAG,CAACvB,YAAY,GAAG,CAAC,EAAEd,IAAI,CAACC,KAAK,CAACD,IAAI,CAACyD,GAAG,CAACvD,CAAC,GAAGqF,IAAI,EAAE,GAAG,CAAC,GAAGzE,YAAY,CAAC,CAAC;MAChG,MAAM6E,SAAS,GAAG9E,SAAS,CAACS,SAAS,CAAC,GAAGF,UAAU;MAEnD,MAAMhB,CAAC,GAAGF,CAAC,GAAGwF,aAAa;MAC3B,MAAMpF,CAAC,GAAGpG,MAAM,GAAGyL,SAAS;MAE5BzG,GAAG,CAACE,SAAS,GAAGuC,WAAW,CAACV,KAAK,EAAGf,CAAC,GAAGqF,IAAI,GAAI,EAAE,CAAC;MACnDrG,GAAG,CAACG,QAAQ,CAACe,CAAC,EAAEE,CAAC,EAAEkF,UAAU,EAAEG,SAAS,CAAC;IAC3C;EACF,CAAC;EAED,MAAMxB,WAAW,GAAGA,CAACjF,GAAG,EAAE2B,SAAS,EAAEC,YAAY,EAAEC,gBAAgB,KAAK;IACtE;IACA,IAAI,CAACjG,SAAS,CAACoB,OAAO,EAAE;MACtBsB,OAAO,CAACI,KAAK,CAAC,yCAAyC,CAAC;MACxD;IACF;;IAEA;IACA,MAAMqD,KAAK,GAAGF,gBAAgB,CAACE,KAAK,IAAI,SAAS;IACjD,MAAM2E,UAAU,GAAG,CAAC7E,gBAAgB,CAAC8E,MAAM,IAAI,EAAE,IAAI,GAAG,GAAG7F,IAAI,CAACqC,GAAG,CAACvH,SAAS,CAACoB,OAAO,CAACjC,KAAK,EAAEa,SAAS,CAACoB,OAAO,CAAChC,MAAM,CAAC,GAAG,CAAC;IAC1H,MAAM4L,WAAW,GAAG9F,IAAI,CAACoC,GAAG,CAAC,CAAC,EAAEpC,IAAI,CAACqC,GAAG,CAAC,EAAE,EAAErC,IAAI,CAACC,KAAK,CAAC,CAACc,gBAAgB,CAAChB,KAAK,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/F,MAAMqB,UAAU,GAAG,CAACL,gBAAgB,CAACK,UAAU,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;;IAE7D,MAAM2E,OAAO,GAAGjL,SAAS,CAACoB,OAAO,CAACjC,KAAK,GAAG,CAAC;IAC3C,MAAM+L,OAAO,GAAGlL,SAAS,CAACoB,OAAO,CAAChC,MAAM,GAAG,CAAC;;IAE5C;IACA,KAAK,IAAI+L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAE,EAAE;MACpC,MAAMC,WAAW,GAAGlG,IAAI,CAACC,KAAK,CAAEgG,CAAC,GAAGH,WAAW,GAAIhF,YAAY,CAAC;MAChE,MAAMS,UAAU,GAAGV,SAAS,CAACqF,WAAW,CAAC,GAAG,KAAK,GAAG9E,UAAU;MAE9D,MAAMyE,MAAM,GAAGD,UAAU,IAAIK,CAAC,GAAG,CAAC,CAAC,GAAGH,WAAW,GAAGvE,UAAU;MAE9DrC,GAAG,CAACsC,SAAS,CAAC,CAAC;MACftC,GAAG,CAACuC,GAAG,CAACsE,OAAO,EAAEC,OAAO,EAAEH,MAAM,EAAE,CAAC,EAAE7F,IAAI,CAAC0B,EAAE,GAAG,CAAC,CAAC;MACjDxC,GAAG,CAACsF,WAAW,GAAG7C,WAAW,CAACV,KAAK,EAAGgF,CAAC,GAAGH,WAAW,GAAI,EAAE,CAAC;MAC5D5G,GAAG,CAACkG,MAAM,CAAC,CAAC;IACd;EACF,CAAC;EAED,MAAMhB,gBAAgB,GAAGA,CAAClF,GAAG,EAAE2B,SAAS,EAAE6B,SAAS,EAAE5B,YAAY,EAAEC,gBAAgB,KAAK;IACtF;IACA,IAAI,CAACjG,SAAS,CAACoB,OAAO,EAAE;MACtBsB,OAAO,CAACI,KAAK,CAAC,8CAA8C,CAAC;MAC7D;IACF;;IAEA;IACA,MAAMqD,KAAK,GAAGF,gBAAgB,CAACE,KAAK,IAAI,SAAS;IACjD,MAAMkF,QAAQ,GAAGpF,gBAAgB,CAACoF,QAAQ,IAAI,CAAC;IAC/C,MAAM1F,KAAK,GAAG,CAACM,gBAAgB,CAACN,KAAK,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;IACrD,MAAMW,UAAU,GAAG,CAACL,gBAAgB,CAACK,UAAU,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;;IAE7D,MAAM2E,OAAO,GAAGjL,SAAS,CAACoB,OAAO,CAACjC,KAAK,GAAG,CAAC;IAC3C,MAAM+L,OAAO,GAAGlL,SAAS,CAACoB,OAAO,CAAChC,MAAM,GAAG,CAAC;IAC5C,MAAM2L,MAAM,GAAG7F,IAAI,CAACqC,GAAG,CAAC0D,OAAO,EAAEC,OAAO,CAAC,GAAG,GAAG;;IAE/C;IACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,KAAK,GAAID,CAAC,GAAGD,QAAQ,GAAInG,IAAI,CAAC0B,EAAE,GAAG,CAAC;MAC1C,MAAM4E,cAAc,GAAGhL,OAAO,CAACY,OAAO,GAAGuE,KAAK;MAE9CvB,GAAG,CAACqH,IAAI,CAAC,CAAC;MACVrH,GAAG,CAACsH,SAAS,CAACT,OAAO,EAAEC,OAAO,CAAC;MAC/B9G,GAAG,CAACuH,MAAM,CAACJ,KAAK,GAAGC,cAAc,CAAC;MAElCpH,GAAG,CAACsC,SAAS,CAAC,CAAC;MACftC,GAAG,CAACyF,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MAEhB,KAAK,IAAIzE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,YAAY,EAAEZ,CAAC,IAAI,CAAC,EAAE;QACxC,MAAMwG,eAAe,GAAGxG,CAAC,GAAGY,YAAY;QACxC,MAAMS,UAAU,GAAGV,SAAS,CAACX,CAAC,CAAC,GAAG,KAAK,GAAGkB,UAAU;QAEpD,MAAMhB,CAAC,GAAGsG,eAAe,GAAGb,MAAM,GAAGtE,UAAU;QAC/C,MAAMjB,CAAC,GAAG,CAACoC,SAAS,CAACxC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI2F,MAAM,GAAG,GAAG,GAAGtE,UAAU;QAEhErC,GAAG,CAACiG,MAAM,CAAC/E,CAAC,EAAEE,CAAC,CAAC;MAClB;MAEApB,GAAG,CAACsF,WAAW,GAAG7C,WAAW,CAACV,KAAK,EAAEmF,CAAC,GAAG,CAAC,CAAC;MAC3ClH,GAAG,CAACkG,MAAM,CAAC,CAAC;MACZlG,GAAG,CAACyH,OAAO,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMtC,UAAU,GAAGA,CAACnF,GAAG,EAAE2B,SAAS,EAAE6B,SAAS,EAAE5B,YAAY,EAAEC,gBAAgB,KAAK;IAChF;IACA,IAAI,CAACjG,SAAS,CAACoB,OAAO,EAAE;MACtBsB,OAAO,CAACI,KAAK,CAAC,wCAAwC,CAAC;MACvD;IACF;;IAEA;IACA,MAAMqD,KAAK,GAAGF,gBAAgB,CAACE,KAAK,IAAI,SAAS;IACjD,MAAM2F,IAAI,GAAG7F,gBAAgB,CAAC6F,IAAI,IAAI,CAAC;IACvC,MAAMnG,KAAK,GAAG,CAACM,gBAAgB,CAACN,KAAK,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;IACrD,MAAMW,UAAU,GAAG,CAACL,gBAAgB,CAACK,UAAU,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;;IAE7D,MAAM2E,OAAO,GAAGjL,SAAS,CAACoB,OAAO,CAACjC,KAAK,GAAG,CAAC;IAC3C,MAAM+L,OAAO,GAAGlL,SAAS,CAACoB,OAAO,CAAChC,MAAM,GAAG,CAAC;IAC5C,MAAM2M,SAAS,GAAG7G,IAAI,CAACqC,GAAG,CAAC0D,OAAO,EAAEC,OAAO,CAAC,GAAG,GAAG;;IAElD;IACA9G,GAAG,CAACsH,SAAS,CAACT,OAAO,EAAEC,OAAO,CAAC;IAC/B9G,GAAG,CAACuH,MAAM,CAACnL,OAAO,CAACY,OAAO,GAAGuE,KAAK,CAAC;;IAEnC;IACA,MAAMqG,GAAG,GAAG9G,IAAI,CAAC0B,EAAE,GAAG,CAAC;IACvB,MAAMqF,GAAG,GAAG/G,IAAI,CAAC0B,EAAE,GAAG,CAAC;;IAEvB;IACA,IAAIsF,YAAY,GAAG,KAAK;IACxB,IAAIC,UAAU,GAAG,CAAC;;IAElB;IACA,KAAK,IAAI/G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACqC,GAAG,CAAC,CAAC,EAAEvB,YAAY,CAAC,EAAEZ,CAAC,EAAE,EAAE;MAClD+G,UAAU,IAAIpG,SAAS,CAACX,CAAC,CAAC;IAC5B;IACA+G,UAAU,GAAGA,UAAU,GAAGjH,IAAI,CAACqC,GAAG,CAAC,CAAC,EAAEvB,YAAY,CAAC,GAAG,GAAG;;IAEzD;IACA,IAAImG,UAAU,GAAG,GAAG,EAAE;MACpBD,YAAY,GAAG,IAAI;IACrB;;IAEA;IACA,MAAME,SAAS,GAAG,EAAE;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,EAAEO,CAAC,EAAE,EAAE;MAC7B;MACA,MAAMC,WAAW,GAAGJ,YAAY,GAAG,EAAE,GAAG,EAAE;MAC1CE,SAAS,CAACC,CAAC,CAAC,GAAGxF,WAAW,CAACV,KAAK,EAAEkG,CAAC,GAAGC,WAAW,CAAC;IACpD;;IAEA;IACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,EAAEO,CAAC,EAAE,EAAE;MAC7B,MAAME,QAAQ,GAAIF,CAAC,GAAGP,IAAI,GAAIE,GAAG;MAEjC5H,GAAG,CAACsC,SAAS,CAAC,CAAC;MACftC,GAAG,CAACsF,WAAW,GAAG0C,SAAS,CAACC,CAAC,CAAC;;MAE9B;MACAjI,GAAG,CAACoF,SAAS,GAAG0C,YAAY,GAAG,GAAG,GAAG,GAAG;;MAExC;MACA;MACA,MAAMM,YAAY,GAAG,GAAG;;MAExB;MACA,MAAMC,cAAc,GAAGvH,IAAI,CAACC,KAAK,CAAEkH,CAAC,GAAGP,IAAI,IAAK9F,YAAY,GAAG,CAAC,CAAC,CAAC;MAClE,MAAM0G,YAAY,GAAGxH,IAAI,CAACC,KAAK,CAAE,CAACkH,CAAC,GAAG,CAAC,IAAIP,IAAI,IAAK9F,YAAY,GAAG,CAAC,CAAC,CAAC;MAEtE,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoH,YAAY,EAAEpH,CAAC,EAAE,EAAE;QACrC,MAAMuH,CAAC,GAAGvH,CAAC,GAAGoH,YAAY;QAC1B,MAAMjB,KAAK,GAAGgB,QAAQ,GAAGI,CAAC,GAAGV,GAAG;QAChC,MAAMlB,MAAM,GAAG4B,CAAC,GAAGZ,SAAS;;QAE5B;QACA,MAAMa,SAAS,GAAG1H,IAAI,CAACqC,GAAG,CAACvB,YAAY,GAAG,CAAC,EAAEyG,cAAc,GAAGvH,IAAI,CAACC,KAAK,CAACwH,CAAC,IAAID,YAAY,GAAGD,cAAc,CAAC,CAAC,CAAC;;QAE9G;QACA,IAAIhG,UAAU,GAAGV,SAAS,CAAC6G,SAAS,CAAC,GAAG,KAAK;QAC7C,IAAIA,SAAS,GAAG,CAAC,IAAIA,SAAS,GAAG5G,YAAY,GAAG,CAAC,EAAE;UACjDS,UAAU,GAAG,CAACV,SAAS,CAAC6G,SAAS,GAAG,CAAC,CAAC,GAAG7G,SAAS,CAAC6G,SAAS,CAAC,GAAG,CAAC,GAAG7G,SAAS,CAAC6G,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;QAC7G;;QAEA;QACA,MAAMC,SAAS,GAAG,GAAG;QACrB,MAAMC,gBAAgB,GAAGD,SAAS,GAAIpG,UAAU,GAAGH,UAAU,IAAI,CAAC,GAAGuG,SAAS,CAAE;;QAEhF;QACA,MAAME,WAAW,GAAGb,YAAY,GAAG,GAAG,GAAG,GAAG;;QAE5C;QACA,MAAMc,QAAQ,GAAG9H,IAAI,CAAC+H,GAAG,CAAC1B,KAAK,CAAC;QAChC,MAAM2B,QAAQ,GAAGhI,IAAI,CAACiI,GAAG,CAAC5B,KAAK,CAAC;QAEhC,MAAMjG,CAAC,GAAG0H,QAAQ,GAAGjC,MAAM,GAAG+B,gBAAgB,GAAGC,WAAW;QAC5D,MAAMvH,CAAC,GAAG0H,QAAQ,GAAGnC,MAAM,GAAG+B,gBAAgB,GAAGC,WAAW;QAE5D,IAAI3H,CAAC,KAAK,CAAC,EAAE;UACXhB,GAAG,CAACyF,MAAM,CAACvE,CAAC,EAAEE,CAAC,CAAC;QAClB,CAAC,MAAM;UACLpB,GAAG,CAACiG,MAAM,CAAC/E,CAAC,EAAEE,CAAC,CAAC;QAClB;MACF;MAEApB,GAAG,CAACkG,MAAM,CAAC,CAAC;IACd;;IAEA;IACAlG,GAAG,CAACgJ,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACpC,CAAC;;EAED;EACAzO,SAAS,CAAC,MAAM;IACd;IACA,IAAI0O,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC7K,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAE7C,iBAAiB,CAAC;IAC3E;IAEA,IAAIA,iBAAiB,IAAI0N,MAAM,CAACC,IAAI,CAAC3N,iBAAiB,CAAC,CAACoG,MAAM,GAAG,CAAC,EAAE;MAClE;MACAnF,aAAa,CAACjB,iBAAiB,CAAC;IAClC;EACF,CAAC,EAAE,CAACA,iBAAiB,CAAC,CAAC;;EAEvB;EACA,MAAMkF,gBAAgB,GAAI0I,aAAa,IAAK;IAC1C;IACA,IAAIL,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC7K,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE+K,aAAa,CAAC;IAClE;IAEA3M,aAAa,CAAC2M,aAAa,CAAC;EAC9B,CAAC;EAED,oBACEzO,OAAA;IAAKI,SAAS,EAAC,sBAAsB;IAAAsO,QAAA,eACnC1O,OAAA;MACEc,GAAG,EAAEE,YAAa;MAClBZ,SAAS,EAAE,+BAA+BH,WAAW,CAACuB,UAAU,CAAC,CAACpB,SAAS,EAAG;MAAAsO,QAAA,GAE7E9M,KAAK,gBACJ5B,OAAA,CAACF,eAAe;QACd4B,SAAS,EAAEA,SAAU;QACrBjB,QAAQ,EAAEA,QAAQ,CAACkO,OAAO,CAAC,IAAI,EAAE,EAAE,CAAE,CAAC;QAAA;QACtCjO,SAAS,EAAEA,SAAU;QACrBE,UAAU,EAAEA;MAAW;QAAAgO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,gBAEF/O,OAAA;QAAQc,GAAG,EAAEC,SAAU;QAACX,SAAS,EAAC;MAAmB;QAAAwO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAC/D,eACD/O,OAAA;QAAKI,SAAS,EAAC;MAAoB;QAAAwO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC1C/O,OAAA;QAAKI,SAAS,EAAC,sBAAsB;QAAAsO,QAAA,GAAElN,UAAU,EAAC,IAAE,EAACvB,WAAW,CAACuB,UAAU,CAAC,CAACtB,KAAK,EAAC,MAAC,EAACD,WAAW,CAACuB,UAAU,CAAC,CAACrB,MAAM,EAAC,GAAC;MAAA;QAAAyO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC,kCAAC;AAACC,GAAA,GAnxBG3O,UAAU;AAqxBhB,eAAeA,UAAU;AAAC,IAAAE,EAAA,EAAAyO,GAAA;AAAAC,YAAA,CAAA1O,EAAA;AAAA0O,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}