{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\ThreeVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeVisualizer = ({\n  audioData,\n  template,\n  isPlaying,\n  parameters: initialParameters = {}\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const particlesRef = useRef(null);\n  const waveformRef = useRef(null);\n  const timeRef = useRef(0);\n  const controlsRef = useRef(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [parameters, setParameters] = useState(initialParameters);\n  console.log(\"ThreeVisualizer rendering with template:\", template);\n  console.log(\"Audio data:\", audioData);\n  console.log(\"Is playing:\", isPlaying);\n  console.log(\"Parameters:\", parameters);\n\n  // Update parameters when initialParameters change\n  useEffect(() => {\n    console.log(\"Initial parameters changed:\", initialParameters);\n    setParameters(initialParameters);\n  }, [initialParameters]);\n\n  // Initialize Three.js scene\n  useEffect(() => {\n    if (!mountRef.current) return;\n    console.log(\"Initializing Three.js scene\");\n    try {\n      // Create scene\n      const scene = new THREE.Scene();\n      sceneRef.current = scene;\n\n      // Create camera\n      const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n      camera.position.z = 5;\n      cameraRef.current = camera;\n\n      // Create renderer\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n      renderer.setClearColor(0x000000, 1);\n      mountRef.current.appendChild(renderer.domElement);\n      rendererRef.current = renderer;\n\n      // Add orbit controls for user interaction\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.05;\n      controls.rotateSpeed = 0.5;\n      controlsRef.current = controls;\n\n      // Add ambient light\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n\n      // Add directional light\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(0, 1, 1);\n      scene.add(directionalLight);\n\n      // Handle window resize\n      const handleResize = () => {\n        if (!mountRef.current || !cameraRef.current || !rendererRef.current) return;\n        const width = mountRef.current.clientWidth;\n        const height = mountRef.current.clientHeight;\n        cameraRef.current.aspect = width / height;\n        cameraRef.current.updateProjectionMatrix();\n        rendererRef.current.setSize(width, height);\n      };\n      window.addEventListener('resize', handleResize);\n\n      // Initial render\n      renderer.render(scene, camera);\n      setIsInitialized(true);\n      console.log(\"Three.js scene initialized successfully\");\n\n      // Clean up\n      return () => {\n        console.log(\"Cleaning up Three.js scene\");\n        window.removeEventListener('resize', handleResize);\n        if (rendererRef.current && mountRef.current) {\n          try {\n            mountRef.current.removeChild(rendererRef.current.domElement);\n          } catch (error) {\n            console.error(\"Error removing renderer:\", error);\n          }\n        }\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n        }\n\n        // Dispose of Three.js objects\n        if (particlesRef.current) {\n          try {\n            particlesRef.current.geometry.dispose();\n            particlesRef.current.material.dispose();\n            sceneRef.current.remove(particlesRef.current);\n          } catch (error) {\n            console.error(\"Error disposing particles:\", error);\n          }\n        }\n        if (waveformRef.current) {\n          try {\n            waveformRef.current.geometry.dispose();\n            waveformRef.current.material.dispose();\n            sceneRef.current.remove(waveformRef.current);\n          } catch (error) {\n            console.error(\"Error disposing waveform:\", error);\n          }\n        }\n        setIsInitialized(false);\n      };\n    } catch (error) {\n      console.error(\"Error initializing Three.js:\", error);\n    }\n  }, []);\n\n  // Create or update visualization based on template\n  useEffect(() => {\n    if (!isInitialized || !sceneRef.current) {\n      console.log(\"Scene not initialized yet, skipping visualization creation\");\n      return;\n    }\n    console.log(\"Creating visualization for template:\", template);\n    try {\n      // Clear previous visualizations\n      if (particlesRef.current) {\n        particlesRef.current.geometry.dispose();\n        particlesRef.current.material.dispose();\n        sceneRef.current.remove(particlesRef.current);\n        particlesRef.current = null;\n      }\n      if (waveformRef.current) {\n        waveformRef.current.geometry.dispose();\n        waveformRef.current.material.dispose();\n        sceneRef.current.remove(waveformRef.current);\n        waveformRef.current = null;\n      }\n\n      // Create new visualization based on template\n      switch (template) {\n        case 'particles':\n          createParticleSystem();\n          break;\n        case 'waveform':\n          createWaveform();\n          break;\n        case 'spiral':\n          createSpiral();\n          break;\n        case 'kaleidoscope':\n          createKaleidoscope();\n          break;\n        default:\n          console.log(\"Unknown template, defaulting to particles\");\n          createParticleSystem();\n      }\n      console.log(\"Visualization created successfully\");\n\n      // Start animation if playing\n      if (isPlaying) {\n        animate();\n      }\n    } catch (error) {\n      console.error(\"Error creating visualization:\", error);\n    }\n  }, [template, isInitialized]);\n\n  // Handle play/pause\n  useEffect(() => {\n    console.log(\"Play state changed:\", isPlaying);\n    if (!isInitialized) {\n      console.log(\"Scene not initialized yet, skipping animation\");\n      return;\n    }\n    if (isPlaying) {\n      console.log(\"Starting animation\");\n      animate();\n    } else if (animationFrameRef.current) {\n      console.log(\"Stopping animation\");\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isPlaying, isInitialized]);\n\n  // Create particle system visualization\n  const createParticleSystem = () => {\n    console.log(\"Creating particle system\");\n    try {\n      // Use count parameter to determine particle count\n      const particleCount = Math.floor((parameters.count || 50) / 50 * 5000);\n      const particles = new THREE.BufferGeometry();\n      const positions = new Float32Array(particleCount * 3);\n      const colors = new Float32Array(particleCount * 3);\n      const sizes = new Float32Array(particleCount);\n\n      // Use color from parameters\n      const baseColor = parameters.color ? new THREE.Color(parameters.color) : new THREE.Color(0xffffff);\n      for (let i = 0; i < particleCount; i++) {\n        // Position particles in a sphere\n        const radius = 3 + Math.random() * 2;\n        const theta = Math.random() * Math.PI * 2;\n        const phi = Math.acos(2 * Math.random() - 1);\n        positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\n        positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n        positions[i * 3 + 2] = radius * Math.cos(phi);\n\n        // Random colors based on parameter color\n        const color = baseColor.clone().offsetHSL((Math.random() - 0.5) * 0.2, 0, (Math.random() - 0.5) * 0.3);\n        colors[i * 3] = color.r;\n        colors[i * 3 + 1] = color.g;\n        colors[i * 3 + 2] = color.b;\n\n        // Random sizes based on size parameter\n        sizes[i] = (Math.random() * 0.5 + 0.5) * ((parameters.size || 50) / 25);\n      }\n      particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n      particles.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n\n      // Use simpler material for better compatibility\n      const particleMaterial = new THREE.PointsMaterial({\n        size: 0.1,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.8,\n        blending: THREE.AdditiveBlending\n      });\n      const particleSystem = new THREE.Points(particles, particleMaterial);\n\n      // Store parameters for animation\n      particleSystem.userData.rotationSpeed = {\n        x: 0.001 * ((parameters.speed || 50) / 50),\n        y: 0.002 * ((parameters.speed || 50) / 50)\n      };\n      particleSystem.userData.reactivity = (parameters.reactivity || 50) / 50;\n      sceneRef.current.add(particleSystem);\n      particlesRef.current = particleSystem;\n      console.log(\"Particle system created successfully\");\n    } catch (error) {\n      console.error(\"Error creating particle system:\", error);\n    }\n  };\n\n  // Create waveform visualization\n  const createWaveform = () => {\n    console.log(\"Creating waveform\");\n    try {\n      const geometry = new THREE.BufferGeometry();\n      const vertices = new Float32Array(128 * 3);\n      const colors = new Float32Array(128 * 3);\n\n      // Use color from parameters\n      const baseColor = parameters.color ? new THREE.Color(parameters.color) : new THREE.Color(0x00aaff);\n      for (let i = 0; i < 128; i++) {\n        const x = i / 128 * 10 - 5;\n        vertices[i * 3] = x;\n        vertices[i * 3 + 1] = 0;\n        vertices[i * 3 + 2] = 0;\n\n        // Color gradient based on parameter color\n        const hue = i / 128;\n        const color = baseColor.clone().offsetHSL(hue * 0.3, 0, 0); // Slight hue variation\n        colors[i * 3] = color.r;\n        colors[i * 3 + 1] = color.g;\n        colors[i * 3 + 2] = color.b;\n      }\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n      const material = new THREE.LineBasicMaterial({\n        vertexColors: true,\n        linewidth: parameters.lineWidth || 2\n      });\n      const waveform = new THREE.Line(geometry, material);\n\n      // Store reactivity for animation\n      waveform.userData.reactivity = (parameters.reactivity || 50) / 50;\n\n      // Store height parameter\n      waveform.userData.height = (parameters.height || 50) / 50;\n      sceneRef.current.add(waveform);\n      waveformRef.current = waveform;\n      console.log(\"Waveform created successfully\");\n    } catch (error) {\n      console.error(\"Error creating waveform:\", error);\n    }\n  };\n\n  // Create spiral visualization\n  const createSpiral = () => {\n    console.log(\"Creating spiral\");\n    try {\n      const geometry = new THREE.BufferGeometry();\n      const armCount = parameters.arms || 5;\n      const pointsPerArm = 400;\n      const totalPoints = armCount * pointsPerArm;\n      const vertices = new Float32Array(totalPoints * 3);\n      const colors = new Float32Array(totalPoints * 3);\n\n      // Use color from parameters\n      const baseColor = parameters.color ? new THREE.Color(parameters.color) : new THREE.Color(0x00ff99);\n\n      // Create spiral with multiple arms\n      for (let arm = 0; arm < armCount; arm++) {\n        const armAngle = arm / armCount * Math.PI * 2;\n        for (let i = 0; i < pointsPerArm; i++) {\n          const index = (arm * pointsPerArm + i) * 3;\n          const t = i / pointsPerArm;\n          const angle = armAngle + t * Math.PI * 20;\n          const radius = t * 5;\n          vertices[index] = Math.cos(angle) * radius;\n          vertices[index + 1] = Math.sin(angle) * radius;\n          vertices[index + 2] = t * 2 - 1;\n\n          // Color gradient based on parameter color\n          const color = baseColor.clone().offsetHSL(t * 0.5, 0, 0); // Hue variation along spiral\n          colors[index] = color.r;\n          colors[index + 1] = color.g;\n          colors[index + 2] = color.b;\n        }\n      }\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n      const material = new THREE.PointsMaterial({\n        size: 0.1,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.8,\n        blending: THREE.AdditiveBlending\n      });\n      const spiral = new THREE.Points(geometry, material);\n\n      // Store parameters for animation\n      spiral.userData.rotationSpeed = 0.005 * ((parameters.speed || 50) / 50);\n      spiral.userData.reactivity = (parameters.reactivity || 50) / 50;\n\n      // Apply radius parameter\n      const scale = (parameters.radius || 50) / 50;\n      spiral.scale.set(scale, scale, scale);\n      sceneRef.current.add(spiral);\n      particlesRef.current = spiral;\n      console.log(\"Spiral created successfully\");\n    } catch (error) {\n      console.error(\"Error creating spiral:\", error);\n    }\n  };\n\n  // Create kaleidoscope visualization\n  const createKaleidoscope = () => {\n    console.log(\"Creating kaleidoscope\");\n    try {\n      // Create a simpler geometry for better compatibility\n      const geometry = new THREE.IcosahedronGeometry(2, 2);\n\n      // Use MeshPhongMaterial for better color control\n      const material = new THREE.MeshPhongMaterial({\n        color: parameters.color || 0xffffff,\n        wireframe: true,\n        emissive: parameters.color ? new THREE.Color(parameters.color).multiplyScalar(0.5) : 0x444444,\n        specular: 0xffffff,\n        shininess: 100\n      });\n      const kaleidoscope = new THREE.Mesh(geometry, material);\n\n      // Store base scale for reactivity\n      kaleidoscope.userData.baseScale = 0.5 + (parameters.complexity || 50) / 100;\n      kaleidoscope.scale.set(kaleidoscope.userData.baseScale, kaleidoscope.userData.baseScale, kaleidoscope.userData.baseScale);\n\n      // Store rotation speed\n      kaleidoscope.userData.rotationSpeed = {\n        x: 0.005 * ((parameters.speed || 50) / 50),\n        y: 0.01 * ((parameters.speed || 50) / 50)\n      };\n      sceneRef.current.add(kaleidoscope);\n      particlesRef.current = kaleidoscope;\n      console.log(\"Kaleidoscope created successfully\");\n    } catch (error) {\n      console.error(\"Error creating kaleidoscope:\", error);\n    }\n  };\n\n  // Apply parameters to the visualizations\n  useEffect(() => {\n    if (!isInitialized || !sceneRef.current || !particlesRef.current) return;\n    console.log(\"Applying parameters to 3D visualization:\", parameters);\n    try {\n      // Apply common parameters\n      const reactivity = (parameters.reactivity || 50) / 50; // Convert to 0-2 scale\n      const speed = (parameters.speed || 50) / 50; // Convert to 0-2 scale\n\n      // Apply color if available\n      if (parameters.color && particlesRef.current.material) {\n        // Convert hex color to THREE.Color\n        const color = new THREE.Color(parameters.color);\n\n        // Apply color based on material type\n        if (particlesRef.current.material.color) {\n          particlesRef.current.material.color.set(color);\n        } else if (particlesRef.current.material.emissive) {\n          particlesRef.current.material.emissive.set(color);\n        }\n      }\n\n      // Apply template-specific parameters\n      switch (template) {\n        case 'particles':\n          // Apply particle count\n          if (parameters.count && particlesRef.current.geometry.attributes.size) {\n            // Can't change particle count dynamically, but we can hide some\n            const count = Math.floor(parameters.count / 100 * particlesRef.current.geometry.attributes.position.count);\n            const sizes = particlesRef.current.geometry.attributes.size.array;\n            for (let i = 0; i < sizes.length; i++) {\n              sizes[i] = i < count ? (parameters.size || 50) / 5 : 0;\n            }\n            particlesRef.current.geometry.attributes.size.needsUpdate = true;\n          }\n\n          // Apply size\n          if (parameters.size && particlesRef.current.geometry.attributes.size) {\n            const sizes = particlesRef.current.geometry.attributes.size.array;\n            const count = Math.floor((parameters.count || 50) / 100 * sizes.length);\n            for (let i = 0; i < count; i++) {\n              sizes[i] = (Math.random() * 0.5 + 0.5) * (parameters.size / 25);\n            }\n            particlesRef.current.geometry.attributes.size.needsUpdate = true;\n          }\n          break;\n        case 'kaleidoscope':\n          // Apply complexity\n          if (parameters.complexity && particlesRef.current.geometry) {\n            // Can't change geometry complexity dynamically, but we can scale it\n            const scale = 0.5 + parameters.complexity / 100;\n            particlesRef.current.userData.baseScale = scale;\n            particlesRef.current.scale.set(scale, scale, scale);\n          }\n          break;\n        case 'spiral':\n          // Apply arms count\n          if (parameters.arms && particlesRef.current.geometry) {\n            // Can't change arms dynamically, but we can adjust rotation speed\n            const rotationSpeed = 0.005 * (parameters.arms / 5);\n            particlesRef.current.userData.rotationSpeed = rotationSpeed;\n          }\n\n          // Apply radius\n          if (parameters.radius && particlesRef.current.geometry) {\n            const scale = parameters.radius / 50;\n            particlesRef.current.scale.set(scale, scale, scale);\n          }\n          break;\n        case 'waveform':\n          // Apply line width\n          if (parameters.lineWidth && particlesRef.current.material) {\n            particlesRef.current.material.linewidth = parameters.lineWidth;\n          }\n          break;\n      }\n\n      // Store reactivity and speed in userData for use in animation\n      particlesRef.current.userData.reactivity = reactivity;\n      particlesRef.current.userData.speed = speed;\n    } catch (error) {\n      console.error(\"Error applying parameters:\", error);\n    }\n  }, [parameters, template, isInitialized]);\n\n  // Animation loop\n  const animate = () => {\n    if (!sceneRef.current || !cameraRef.current || !rendererRef.current) {\n      console.log(\"Missing required refs for animation\");\n      return;\n    }\n    try {\n      animationFrameRef.current = requestAnimationFrame(animate);\n      timeRef.current += 0.01;\n\n      // Update based on template\n      if (particlesRef.current) {\n        if (template === 'particles') {\n          // Use stored rotation speeds\n          const rotationSpeed = particlesRef.current.userData.rotationSpeed || {\n            x: 0.001,\n            y: 0.002\n          };\n          particlesRef.current.rotation.y += rotationSpeed.y;\n          particlesRef.current.rotation.x += rotationSpeed.x;\n\n          // Apply audio reactivity if available\n          if (audioData && audioData.dataArray && particlesRef.current.geometry.attributes.size) {\n            const sizes = particlesRef.current.geometry.attributes.size.array;\n            const reactivity = particlesRef.current.userData.reactivity || 1;\n            for (let i = 0; i < sizes.length; i++) {\n              const dataIndex = i % Math.min(128, audioData.dataArray.length);\n              const audioValue = audioData.dataArray[dataIndex] / 255;\n              const baseSize = sizes[i] / (1 + reactivity); // Get base size without reactivity\n\n              // Apply reactivity\n              sizes[i] = baseSize * (1 + audioValue * reactivity);\n            }\n            particlesRef.current.geometry.attributes.size.needsUpdate = true;\n          }\n        } else if (template === 'spiral') {\n          // Use stored rotation speed\n          const rotationSpeed = particlesRef.current.userData.rotationSpeed || 0.005;\n          particlesRef.current.rotation.z += rotationSpeed;\n\n          // Apply audio reactivity if available\n          if (audioData && audioData.dataArray && particlesRef.current.geometry.attributes.position) {\n            const positions = particlesRef.current.geometry.attributes.position.array;\n            const originalPositions = particlesRef.current.userData.originalPositions;\n            const reactivity = particlesRef.current.userData.reactivity || 1;\n\n            // Store original positions if not already stored\n            if (!originalPositions) {\n              particlesRef.current.userData.originalPositions = new Float32Array(positions.length);\n              for (let i = 0; i < positions.length; i++) {\n                particlesRef.current.userData.originalPositions[i] = positions[i];\n              }\n            }\n\n            // Apply audio reactivity\n            for (let i = 0; i < positions.length / 3; i++) {\n              const dataIndex = i % Math.min(128, audioData.dataArray.length);\n              const audioValue = audioData.dataArray[dataIndex] / 255 * reactivity;\n              if (originalPositions) {\n                positions[i * 3] = originalPositions[i * 3] * (1 + audioValue * 0.3);\n                positions[i * 3 + 1] = originalPositions[i * 3 + 1] * (1 + audioValue * 0.3);\n              }\n            }\n            particlesRef.current.geometry.attributes.position.needsUpdate = true;\n          }\n        } else if (template === 'kaleidoscope') {\n          // Use stored rotation speeds\n          const rotationSpeed = particlesRef.current.userData.rotationSpeed || {\n            x: 0.005,\n            y: 0.01\n          };\n          particlesRef.current.rotation.x += rotationSpeed.x;\n          particlesRef.current.rotation.y += rotationSpeed.y;\n\n          // Scale based on audio if available\n          if (audioData && audioData.dataArray) {\n            let avgAudio = 0;\n            for (let i = 0; i < Math.min(128, audioData.dataArray.length); i++) {\n              avgAudio += audioData.dataArray[i];\n            }\n            avgAudio = avgAudio / Math.min(128, audioData.dataArray.length) / 255;\n\n            // Apply reactivity parameter\n            const reactivity = particlesRef.current.userData.reactivity || 1;\n            avgAudio *= reactivity;\n            const baseScale = particlesRef.current.userData.baseScale || 1;\n            particlesRef.current.scale.set(baseScale * (1 + avgAudio), baseScale * (1 + avgAudio), baseScale * (1 + avgAudio));\n          }\n        }\n      }\n\n      // Update waveform if available\n      if (waveformRef.current && audioData && audioData.dataArray) {\n        const positions = waveformRef.current.geometry.attributes.position.array;\n        const reactivity = waveformRef.current.userData.reactivity || 1;\n        const height = waveformRef.current.userData.height || 1;\n        for (let i = 0; i < Math.min(128, audioData.dataArray.length); i++) {\n          positions[i * 3 + 1] = audioData.dataArray[i] / 128 * 2 * reactivity * height - 1;\n        }\n        waveformRef.current.geometry.attributes.position.needsUpdate = true;\n      }\n\n      // Update controls\n      if (controlsRef.current) {\n        controlsRef.current.update();\n      }\n\n      // Render scene\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n    } catch (error) {\n      console.error(\"Error in animation loop:\", error);\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 656,\n    columnNumber: 10\n  }, this);\n};\n_s(ThreeVisualizer, \"FxMDg2k676Tf2uIq1RK9qE8DBQ8=\");\n_c = ThreeVisualizer;\nexport default ThreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"ThreeVisualizer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","OrbitControls","jsxDEV","_jsxDEV","ThreeVisualizer","audioData","template","isPlaying","parameters","initialParameters","_s","mountRef","sceneRef","cameraRef","rendererRef","animationFrameRef","particlesRef","waveformRef","timeRef","controlsRef","isInitialized","setIsInitialized","setParameters","console","log","current","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","setClearColor","appendChild","domElement","controls","enableDamping","dampingFactor","rotateSpeed","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","set","handleResize","width","height","aspect","updateProjectionMatrix","window","addEventListener","render","removeEventListener","removeChild","error","cancelAnimationFrame","geometry","dispose","material","remove","createParticleSystem","createWaveform","createSpiral","createKaleidoscope","animate","particleCount","Math","floor","count","particles","BufferGeometry","positions","Float32Array","colors","sizes","baseColor","color","Color","i","radius","random","theta","PI","phi","acos","sin","cos","clone","offsetHSL","r","g","b","size","setAttribute","BufferAttribute","particleMaterial","PointsMaterial","vertexColors","transparent","opacity","blending","AdditiveBlending","particleSystem","Points","userData","rotationSpeed","x","speed","y","reactivity","vertices","hue","LineBasicMaterial","linewidth","lineWidth","waveform","Line","armCount","arms","pointsPerArm","totalPoints","arm","armAngle","index","t","angle","spiral","scale","IcosahedronGeometry","MeshPhongMaterial","wireframe","emissive","multiplyScalar","specular","shininess","kaleidoscope","Mesh","baseScale","complexity","attributes","array","length","needsUpdate","requestAnimationFrame","rotation","dataArray","dataIndex","min","audioValue","baseSize","originalPositions","avgAudio","update","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/ThreeVisualizer.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst ThreeVisualizer = ({ audioData, template, isPlaying, parameters: initialParameters = {} }) => {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const particlesRef = useRef(null);\n  const waveformRef = useRef(null);\n  const timeRef = useRef(0);\n  const controlsRef = useRef(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [parameters, setParameters] = useState(initialParameters);\n\n  console.log(\"ThreeVisualizer rendering with template:\", template);\n  console.log(\"Audio data:\", audioData);\n  console.log(\"Is playing:\", isPlaying);\n  console.log(\"Parameters:\", parameters);\n\n  // Update parameters when initialParameters change\n  useEffect(() => {\n    console.log(\"Initial parameters changed:\", initialParameters);\n    setParameters(initialParameters);\n  }, [initialParameters]);\n\n  // Initialize Three.js scene\n  useEffect(() => {\n    if (!mountRef.current) return;\n    \n    console.log(\"Initializing Three.js scene\");\n\n    try {\n      // Create scene\n      const scene = new THREE.Scene();\n      sceneRef.current = scene;\n\n      // Create camera\n      const camera = new THREE.PerspectiveCamera(\n        75,\n        mountRef.current.clientWidth / mountRef.current.clientHeight,\n        0.1,\n        1000\n      );\n      camera.position.z = 5;\n      cameraRef.current = camera;\n\n      // Create renderer\n      const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n      renderer.setClearColor(0x000000, 1);\n      mountRef.current.appendChild(renderer.domElement);\n      rendererRef.current = renderer;\n\n      // Add orbit controls for user interaction\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.05;\n      controls.rotateSpeed = 0.5;\n      controlsRef.current = controls;\n\n      // Add ambient light\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n\n      // Add directional light\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(0, 1, 1);\n      scene.add(directionalLight);\n\n      // Handle window resize\n      const handleResize = () => {\n        if (!mountRef.current || !cameraRef.current || !rendererRef.current) return;\n        \n        const width = mountRef.current.clientWidth;\n        const height = mountRef.current.clientHeight;\n        \n        cameraRef.current.aspect = width / height;\n        cameraRef.current.updateProjectionMatrix();\n        \n        rendererRef.current.setSize(width, height);\n      };\n\n      window.addEventListener('resize', handleResize);\n      \n      // Initial render\n      renderer.render(scene, camera);\n      setIsInitialized(true);\n      \n      console.log(\"Three.js scene initialized successfully\");\n\n      // Clean up\n      return () => {\n        console.log(\"Cleaning up Three.js scene\");\n        window.removeEventListener('resize', handleResize);\n        \n        if (rendererRef.current && mountRef.current) {\n          try {\n            mountRef.current.removeChild(rendererRef.current.domElement);\n          } catch (error) {\n            console.error(\"Error removing renderer:\", error);\n          }\n        }\n        \n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n        }\n        \n        // Dispose of Three.js objects\n        if (particlesRef.current) {\n          try {\n            particlesRef.current.geometry.dispose();\n            particlesRef.current.material.dispose();\n            sceneRef.current.remove(particlesRef.current);\n          } catch (error) {\n            console.error(\"Error disposing particles:\", error);\n          }\n        }\n        \n        if (waveformRef.current) {\n          try {\n            waveformRef.current.geometry.dispose();\n            waveformRef.current.material.dispose();\n            sceneRef.current.remove(waveformRef.current);\n          } catch (error) {\n            console.error(\"Error disposing waveform:\", error);\n          }\n        }\n        \n        setIsInitialized(false);\n      };\n    } catch (error) {\n      console.error(\"Error initializing Three.js:\", error);\n    }\n  }, []);\n\n  // Create or update visualization based on template\n  useEffect(() => {\n    if (!isInitialized || !sceneRef.current) {\n      console.log(\"Scene not initialized yet, skipping visualization creation\");\n      return;\n    }\n    \n    console.log(\"Creating visualization for template:\", template);\n\n    try {\n      // Clear previous visualizations\n      if (particlesRef.current) {\n        particlesRef.current.geometry.dispose();\n        particlesRef.current.material.dispose();\n        sceneRef.current.remove(particlesRef.current);\n        particlesRef.current = null;\n      }\n\n      if (waveformRef.current) {\n        waveformRef.current.geometry.dispose();\n        waveformRef.current.material.dispose();\n        sceneRef.current.remove(waveformRef.current);\n        waveformRef.current = null;\n      }\n\n      // Create new visualization based on template\n      switch (template) {\n        case 'particles':\n          createParticleSystem();\n          break;\n        case 'waveform':\n          createWaveform();\n          break;\n        case 'spiral':\n          createSpiral();\n          break;\n        case 'kaleidoscope':\n          createKaleidoscope();\n          break;\n        default:\n          console.log(\"Unknown template, defaulting to particles\");\n          createParticleSystem();\n      }\n      \n      console.log(\"Visualization created successfully\");\n\n      // Start animation if playing\n      if (isPlaying) {\n        animate();\n      }\n    } catch (error) {\n      console.error(\"Error creating visualization:\", error);\n    }\n  }, [template, isInitialized]);\n\n  // Handle play/pause\n  useEffect(() => {\n    console.log(\"Play state changed:\", isPlaying);\n    \n    if (!isInitialized) {\n      console.log(\"Scene not initialized yet, skipping animation\");\n      return;\n    }\n\n    if (isPlaying) {\n      console.log(\"Starting animation\");\n      animate();\n    } else if (animationFrameRef.current) {\n      console.log(\"Stopping animation\");\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isPlaying, isInitialized]);\n\n  // Create particle system visualization\n  const createParticleSystem = () => {\n    console.log(\"Creating particle system\");\n    \n    try {\n      // Use count parameter to determine particle count\n      const particleCount = Math.floor(((parameters.count || 50) / 50) * 5000);\n      const particles = new THREE.BufferGeometry();\n      \n      const positions = new Float32Array(particleCount * 3);\n      const colors = new Float32Array(particleCount * 3);\n      const sizes = new Float32Array(particleCount);\n      \n      // Use color from parameters\n      const baseColor = parameters.color ? new THREE.Color(parameters.color) : new THREE.Color(0xffffff);\n      \n      for (let i = 0; i < particleCount; i++) {\n        // Position particles in a sphere\n        const radius = 3 + Math.random() * 2;\n        const theta = Math.random() * Math.PI * 2;\n        const phi = Math.acos(2 * Math.random() - 1);\n        \n        positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\n        positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n        positions[i * 3 + 2] = radius * Math.cos(phi);\n        \n        // Random colors based on parameter color\n        const color = baseColor.clone().offsetHSL((Math.random() - 0.5) * 0.2, 0, (Math.random() - 0.5) * 0.3);\n        colors[i * 3] = color.r;\n        colors[i * 3 + 1] = color.g;\n        colors[i * 3 + 2] = color.b;\n        \n        // Random sizes based on size parameter\n        sizes[i] = (Math.random() * 0.5 + 0.5) * ((parameters.size || 50) / 25);\n      }\n      \n      particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n      particles.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n      \n      // Use simpler material for better compatibility\n      const particleMaterial = new THREE.PointsMaterial({\n        size: 0.1,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.8,\n        blending: THREE.AdditiveBlending\n      });\n      \n      const particleSystem = new THREE.Points(particles, particleMaterial);\n      \n      // Store parameters for animation\n      particleSystem.userData.rotationSpeed = {\n        x: 0.001 * ((parameters.speed || 50) / 50),\n        y: 0.002 * ((parameters.speed || 50) / 50)\n      };\n      particleSystem.userData.reactivity = (parameters.reactivity || 50) / 50;\n      \n      sceneRef.current.add(particleSystem);\n      particlesRef.current = particleSystem;\n      \n      console.log(\"Particle system created successfully\");\n    } catch (error) {\n      console.error(\"Error creating particle system:\", error);\n    }\n  };\n\n  // Create waveform visualization\n  const createWaveform = () => {\n    console.log(\"Creating waveform\");\n    \n    try {\n      const geometry = new THREE.BufferGeometry();\n      const vertices = new Float32Array(128 * 3);\n      const colors = new Float32Array(128 * 3);\n      \n      // Use color from parameters\n      const baseColor = parameters.color ? new THREE.Color(parameters.color) : new THREE.Color(0x00aaff);\n      \n      for (let i = 0; i < 128; i++) {\n        const x = (i / 128) * 10 - 5;\n        vertices[i * 3] = x;\n        vertices[i * 3 + 1] = 0;\n        vertices[i * 3 + 2] = 0;\n        \n        // Color gradient based on parameter color\n        const hue = i / 128;\n        const color = baseColor.clone().offsetHSL(hue * 0.3, 0, 0); // Slight hue variation\n        colors[i * 3] = color.r;\n        colors[i * 3 + 1] = color.g;\n        colors[i * 3 + 2] = color.b;\n      }\n      \n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n      \n      const material = new THREE.LineBasicMaterial({\n        vertexColors: true,\n        linewidth: parameters.lineWidth || 2,\n      });\n      \n      const waveform = new THREE.Line(geometry, material);\n      \n      // Store reactivity for animation\n      waveform.userData.reactivity = (parameters.reactivity || 50) / 50;\n      \n      // Store height parameter\n      waveform.userData.height = (parameters.height || 50) / 50;\n      \n      sceneRef.current.add(waveform);\n      waveformRef.current = waveform;\n      \n      console.log(\"Waveform created successfully\");\n    } catch (error) {\n      console.error(\"Error creating waveform:\", error);\n    }\n  };\n\n  // Create spiral visualization\n  const createSpiral = () => {\n    console.log(\"Creating spiral\");\n    \n    try {\n      const geometry = new THREE.BufferGeometry();\n      const armCount = parameters.arms || 5;\n      const pointsPerArm = 400;\n      const totalPoints = armCount * pointsPerArm;\n      const vertices = new Float32Array(totalPoints * 3);\n      const colors = new Float32Array(totalPoints * 3);\n      \n      // Use color from parameters\n      const baseColor = parameters.color ? new THREE.Color(parameters.color) : new THREE.Color(0x00ff99);\n      \n      // Create spiral with multiple arms\n      for (let arm = 0; arm < armCount; arm++) {\n        const armAngle = (arm / armCount) * Math.PI * 2;\n        \n        for (let i = 0; i < pointsPerArm; i++) {\n          const index = (arm * pointsPerArm + i) * 3;\n          const t = i / pointsPerArm;\n          const angle = armAngle + t * Math.PI * 20;\n          const radius = t * 5;\n          \n          vertices[index] = Math.cos(angle) * radius;\n          vertices[index + 1] = Math.sin(angle) * radius;\n          vertices[index + 2] = t * 2 - 1;\n          \n          // Color gradient based on parameter color\n          const color = baseColor.clone().offsetHSL(t * 0.5, 0, 0); // Hue variation along spiral\n          colors[index] = color.r;\n          colors[index + 1] = color.g;\n          colors[index + 2] = color.b;\n        }\n      }\n      \n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n      \n      const material = new THREE.PointsMaterial({\n        size: 0.1,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.8,\n        blending: THREE.AdditiveBlending,\n      });\n      \n      const spiral = new THREE.Points(geometry, material);\n      \n      // Store parameters for animation\n      spiral.userData.rotationSpeed = 0.005 * ((parameters.speed || 50) / 50);\n      spiral.userData.reactivity = (parameters.reactivity || 50) / 50;\n      \n      // Apply radius parameter\n      const scale = (parameters.radius || 50) / 50;\n      spiral.scale.set(scale, scale, scale);\n      \n      sceneRef.current.add(spiral);\n      particlesRef.current = spiral;\n      \n      console.log(\"Spiral created successfully\");\n    } catch (error) {\n      console.error(\"Error creating spiral:\", error);\n    }\n  };\n\n  // Create kaleidoscope visualization\n  const createKaleidoscope = () => {\n    console.log(\"Creating kaleidoscope\");\n    \n    try {\n      // Create a simpler geometry for better compatibility\n      const geometry = new THREE.IcosahedronGeometry(2, 2);\n      \n      // Use MeshPhongMaterial for better color control\n      const material = new THREE.MeshPhongMaterial({\n        color: parameters.color || 0xffffff,\n        wireframe: true,\n        emissive: parameters.color ? new THREE.Color(parameters.color).multiplyScalar(0.5) : 0x444444,\n        specular: 0xffffff,\n        shininess: 100,\n      });\n      \n      const kaleidoscope = new THREE.Mesh(geometry, material);\n      \n      // Store base scale for reactivity\n      kaleidoscope.userData.baseScale = 0.5 + ((parameters.complexity || 50) / 100);\n      kaleidoscope.scale.set(\n        kaleidoscope.userData.baseScale,\n        kaleidoscope.userData.baseScale,\n        kaleidoscope.userData.baseScale\n      );\n      \n      // Store rotation speed\n      kaleidoscope.userData.rotationSpeed = {\n        x: 0.005 * ((parameters.speed || 50) / 50),\n        y: 0.01 * ((parameters.speed || 50) / 50)\n      };\n      \n      sceneRef.current.add(kaleidoscope);\n      particlesRef.current = kaleidoscope;\n      \n      console.log(\"Kaleidoscope created successfully\");\n    } catch (error) {\n      console.error(\"Error creating kaleidoscope:\", error);\n    }\n  };\n\n  // Apply parameters to the visualizations\n  useEffect(() => {\n    if (!isInitialized || !sceneRef.current || !particlesRef.current) return;\n    \n    console.log(\"Applying parameters to 3D visualization:\", parameters);\n    \n    try {\n      // Apply common parameters\n      const reactivity = (parameters.reactivity || 50) / 50; // Convert to 0-2 scale\n      const speed = (parameters.speed || 50) / 50; // Convert to 0-2 scale\n      \n      // Apply color if available\n      if (parameters.color && particlesRef.current.material) {\n        // Convert hex color to THREE.Color\n        const color = new THREE.Color(parameters.color);\n        \n        // Apply color based on material type\n        if (particlesRef.current.material.color) {\n          particlesRef.current.material.color.set(color);\n        } else if (particlesRef.current.material.emissive) {\n          particlesRef.current.material.emissive.set(color);\n        }\n      }\n      \n      // Apply template-specific parameters\n      switch (template) {\n        case 'particles':\n          // Apply particle count\n          if (parameters.count && particlesRef.current.geometry.attributes.size) {\n            // Can't change particle count dynamically, but we can hide some\n            const count = Math.floor((parameters.count / 100) * particlesRef.current.geometry.attributes.position.count);\n            const sizes = particlesRef.current.geometry.attributes.size.array;\n            \n            for (let i = 0; i < sizes.length; i++) {\n              sizes[i] = i < count ? (parameters.size || 50) / 5 : 0;\n            }\n            \n            particlesRef.current.geometry.attributes.size.needsUpdate = true;\n          }\n          \n          // Apply size\n          if (parameters.size && particlesRef.current.geometry.attributes.size) {\n            const sizes = particlesRef.current.geometry.attributes.size.array;\n            const count = Math.floor((parameters.count || 50) / 100 * sizes.length);\n            \n            for (let i = 0; i < count; i++) {\n              sizes[i] = (Math.random() * 0.5 + 0.5) * (parameters.size / 25);\n            }\n            \n            particlesRef.current.geometry.attributes.size.needsUpdate = true;\n          }\n          break;\n          \n        case 'kaleidoscope':\n          // Apply complexity\n          if (parameters.complexity && particlesRef.current.geometry) {\n            // Can't change geometry complexity dynamically, but we can scale it\n            const scale = 0.5 + (parameters.complexity / 100);\n            particlesRef.current.userData.baseScale = scale;\n            particlesRef.current.scale.set(scale, scale, scale);\n          }\n          break;\n          \n        case 'spiral':\n          // Apply arms count\n          if (parameters.arms && particlesRef.current.geometry) {\n            // Can't change arms dynamically, but we can adjust rotation speed\n            const rotationSpeed = 0.005 * (parameters.arms / 5);\n            particlesRef.current.userData.rotationSpeed = rotationSpeed;\n          }\n          \n          // Apply radius\n          if (parameters.radius && particlesRef.current.geometry) {\n            const scale = parameters.radius / 50;\n            particlesRef.current.scale.set(scale, scale, scale);\n          }\n          break;\n          \n        case 'waveform':\n          // Apply line width\n          if (parameters.lineWidth && particlesRef.current.material) {\n            particlesRef.current.material.linewidth = parameters.lineWidth;\n          }\n          break;\n      }\n      \n      // Store reactivity and speed in userData for use in animation\n      particlesRef.current.userData.reactivity = reactivity;\n      particlesRef.current.userData.speed = speed;\n      \n    } catch (error) {\n      console.error(\"Error applying parameters:\", error);\n    }\n  }, [parameters, template, isInitialized]);\n\n  // Animation loop\n  const animate = () => {\n    if (!sceneRef.current || !cameraRef.current || !rendererRef.current) {\n      console.log(\"Missing required refs for animation\");\n      return;\n    }\n    \n    try {\n      animationFrameRef.current = requestAnimationFrame(animate);\n      \n      timeRef.current += 0.01;\n      \n      // Update based on template\n      if (particlesRef.current) {\n        if (template === 'particles') {\n          // Use stored rotation speeds\n          const rotationSpeed = particlesRef.current.userData.rotationSpeed || { x: 0.001, y: 0.002 };\n          particlesRef.current.rotation.y += rotationSpeed.y;\n          particlesRef.current.rotation.x += rotationSpeed.x;\n          \n          // Apply audio reactivity if available\n          if (audioData && audioData.dataArray && particlesRef.current.geometry.attributes.size) {\n            const sizes = particlesRef.current.geometry.attributes.size.array;\n            const reactivity = particlesRef.current.userData.reactivity || 1;\n            \n            for (let i = 0; i < sizes.length; i++) {\n              const dataIndex = i % Math.min(128, audioData.dataArray.length);\n              const audioValue = audioData.dataArray[dataIndex] / 255;\n              const baseSize = sizes[i] / (1 + reactivity); // Get base size without reactivity\n              \n              // Apply reactivity\n              sizes[i] = baseSize * (1 + audioValue * reactivity);\n            }\n            \n            particlesRef.current.geometry.attributes.size.needsUpdate = true;\n          }\n        } else if (template === 'spiral') {\n          // Use stored rotation speed\n          const rotationSpeed = particlesRef.current.userData.rotationSpeed || 0.005;\n          particlesRef.current.rotation.z += rotationSpeed;\n          \n          // Apply audio reactivity if available\n          if (audioData && audioData.dataArray && particlesRef.current.geometry.attributes.position) {\n            const positions = particlesRef.current.geometry.attributes.position.array;\n            const originalPositions = particlesRef.current.userData.originalPositions;\n            const reactivity = particlesRef.current.userData.reactivity || 1;\n            \n            // Store original positions if not already stored\n            if (!originalPositions) {\n              particlesRef.current.userData.originalPositions = new Float32Array(positions.length);\n              for (let i = 0; i < positions.length; i++) {\n                particlesRef.current.userData.originalPositions[i] = positions[i];\n              }\n            }\n            \n            // Apply audio reactivity\n            for (let i = 0; i < positions.length / 3; i++) {\n              const dataIndex = i % Math.min(128, audioData.dataArray.length);\n              const audioValue = audioData.dataArray[dataIndex] / 255 * reactivity;\n              \n              if (originalPositions) {\n                positions[i * 3] = originalPositions[i * 3] * (1 + audioValue * 0.3);\n                positions[i * 3 + 1] = originalPositions[i * 3 + 1] * (1 + audioValue * 0.3);\n              }\n            }\n            \n            particlesRef.current.geometry.attributes.position.needsUpdate = true;\n          }\n        } else if (template === 'kaleidoscope') {\n          // Use stored rotation speeds\n          const rotationSpeed = particlesRef.current.userData.rotationSpeed || { x: 0.005, y: 0.01 };\n          particlesRef.current.rotation.x += rotationSpeed.x;\n          particlesRef.current.rotation.y += rotationSpeed.y;\n          \n          // Scale based on audio if available\n          if (audioData && audioData.dataArray) {\n            let avgAudio = 0;\n            for (let i = 0; i < Math.min(128, audioData.dataArray.length); i++) {\n              avgAudio += audioData.dataArray[i];\n            }\n            avgAudio = avgAudio / Math.min(128, audioData.dataArray.length) / 255;\n            \n            // Apply reactivity parameter\n            const reactivity = particlesRef.current.userData.reactivity || 1;\n            avgAudio *= reactivity;\n            \n            const baseScale = particlesRef.current.userData.baseScale || 1;\n            particlesRef.current.scale.set(\n              baseScale * (1 + avgAudio),\n              baseScale * (1 + avgAudio),\n              baseScale * (1 + avgAudio)\n            );\n          }\n        }\n      }\n      \n      // Update waveform if available\n      if (waveformRef.current && audioData && audioData.dataArray) {\n        const positions = waveformRef.current.geometry.attributes.position.array;\n        const reactivity = waveformRef.current.userData.reactivity || 1;\n        const height = waveformRef.current.userData.height || 1;\n        \n        for (let i = 0; i < Math.min(128, audioData.dataArray.length); i++) {\n          positions[i * 3 + 1] = (audioData.dataArray[i] / 128) * 2 * reactivity * height - 1;\n        }\n        \n        waveformRef.current.geometry.attributes.position.needsUpdate = true;\n      }\n      \n      // Update controls\n      if (controlsRef.current) {\n        controlsRef.current.update();\n      }\n      \n      // Render scene\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n    } catch (error) {\n      console.error(\"Error in animation loop:\", error);\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  };\n\n  return <div ref={mountRef} style={{ width: '100%', height: '100%' }} />;\n};\n\nexport default ThreeVisualizer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}