{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fkuce\\\\OneDrive\\\\Desktop\\\\Money Projects\\\\Visualizer\\\\frontend\\\\src\\\\components\\\\VideoExporter.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './VideoExporter.css';\n\n// Import RESOLUTIONS from Visualizer\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RESOLUTIONS = {\n  '4K': {\n    width: 3840,\n    height: 2160,\n    className: 'aspect-ratio-4k'\n  },\n  '1080p': {\n    width: 1920,\n    height: 1080,\n    className: 'aspect-ratio-1080p'\n  },\n  '720p': {\n    width: 1280,\n    height: 720,\n    className: 'aspect-ratio-720p'\n  },\n  'Square': {\n    width: 720,\n    height: 720,\n    className: 'aspect-ratio-square'\n  },\n  'Vertical': {\n    width: 1080,\n    height: 1920,\n    className: 'aspect-ratio-vertical'\n  }\n};\nconst VideoExporter = ({\n  visualizerRef,\n  audioFile,\n  isPlaying,\n  audioRef\n}) => {\n  _s();\n  const [isExporting, setIsExporting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startTimeRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioSourceRef = useRef(null);\n  const audioDestinationRef = useRef(null);\n  const streamRef = useRef(null);\n\n  // Cleanup function to ensure all resources are properly released\n  const cleanup = () => {\n    var _mediaRecorderRef$cur, _audioContextRef$curr;\n    if (((_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.state) === 'recording') {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current = null;\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    if (audioSourceRef.current) {\n      audioSourceRef.current.disconnect();\n      audioSourceRef.current = null;\n    }\n    if (audioDestinationRef.current) {\n      audioDestinationRef.current.disconnect();\n      audioDestinationRef.current = null;\n    }\n    if (((_audioContextRef$curr = audioContextRef.current) === null || _audioContextRef$curr === void 0 ? void 0 : _audioContextRef$curr.state) !== 'closed') {\n      var _audioContextRef$curr2;\n      (_audioContextRef$curr2 = audioContextRef.current) === null || _audioContextRef$curr2 === void 0 ? void 0 : _audioContextRef$curr2.close();\n      audioContextRef.current = null;\n    }\n    chunksRef.current = [];\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return cleanup;\n  }, []);\n  const ensureAudioReady = async audioElement => {\n    return new Promise((resolve, reject) => {\n      if (audioElement.readyState >= 2) {\n        console.log('Audio already ready');\n        resolve();\n        return;\n      }\n      const timeout = setTimeout(() => {\n        reject(new Error('Audio loading timeout'));\n      }, 5000); // 5 second timeout\n\n      const loadHandler = () => {\n        console.log('Audio loaded successfully');\n        clearTimeout(timeout);\n        resolve();\n      };\n      const errorHandler = error => {\n        console.error('Audio load error:', error);\n        clearTimeout(timeout);\n        reject(error);\n      };\n      audioElement.addEventListener('canplaythrough', loadHandler, {\n        once: true\n      });\n      audioElement.addEventListener('error', errorHandler, {\n        once: true\n      });\n\n      // Force load if not already loading\n      if (audioElement.readyState === 0) {\n        audioElement.load();\n      }\n    });\n  };\n  const exportVideo = async () => {\n    if (!(visualizerRef !== null && visualizerRef !== void 0 && visualizerRef.current) || !audioFile) {\n      setError('Please upload an audio file first');\n      return;\n    }\n    if (isExporting) {\n      setError('Export already in progress');\n      return;\n    }\n    try {\n      cleanup();\n      setIsExporting(true);\n      setProgress(0);\n      setError(null);\n      startTimeRef.current = Date.now();\n\n      // Get the canvas and its current resolution\n      const canvas = visualizerRef.current.getCanvas();\n      if (!canvas) {\n        throw new Error('Canvas not found');\n      }\n\n      // Get the current resolution from the visualizer\n      const resolution = visualizerRef.current.getCurrentResolution();\n      const {\n        width,\n        height\n      } = RESOLUTIONS[resolution];\n\n      // Set canvas to full resolution for export\n      const originalWidth = canvas.width;\n      const originalHeight = canvas.height;\n      canvas.width = width;\n      canvas.height = height;\n\n      // Get audio element from ref\n      const audioElement = audioRef.current;\n      if (!audioElement) {\n        throw new Error('Audio element not found. Please ensure audio is loaded and playing.');\n      }\n\n      // Ensure audio is ready\n      console.log('Audio element found, ensuring it\\'s ready...');\n      await ensureAudioReady(audioElement);\n      console.log('Audio is ready for export');\n\n      // Setup audio context and nodes\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      audioContextRef.current = audioContext;\n      const audioSource = audioContext.createMediaElementSource(audioElement);\n      audioSourceRef.current = audioSource;\n      const audioDestination = audioContext.createMediaStreamDestination();\n      audioDestinationRef.current = audioDestination;\n      audioSource.connect(audioDestination);\n\n      // Setup canvas stream\n      const canvasStream = canvas.captureStream(60); // 60 FPS for highest quality\n      streamRef.current = canvasStream;\n\n      // Combine video and audio streams\n      const combinedStream = new MediaStream([...canvasStream.getVideoTracks(), ...audioDestination.stream.getAudioTracks()]);\n\n      // Setup MediaRecorder with highest quality settings\n      const mediaRecorder = new MediaRecorder(combinedStream, {\n        mimeType: 'video/webm;codecs=vp9,opus',\n        videoBitsPerSecond: 8000000,\n        // 8 Mbps\n        audioBitsPerSecond: 320000 // 320 kbps\n      });\n      mediaRecorderRef.current = mediaRecorder;\n\n      // Handle data collection\n      mediaRecorder.ondataavailable = event => {\n        if (event.data && event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n\n      // Handle recording completion\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, {\n          type: 'video/webm'\n        });\n        const url = URL.createObjectURL(blob);\n\n        // Generate filename based on audio file name\n        const fileName = audioFile.name.replace(/\\.[^/.]+$/, '') + '_visualization.webm';\n\n        // Create download link\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = fileName;\n        a.click();\n\n        // Cleanup\n        URL.revokeObjectURL(url);\n        setIsExporting(false);\n        setProgress(100);\n\n        // Restore original canvas size\n        canvas.width = originalWidth;\n        canvas.height = originalHeight;\n        cleanup();\n      };\n\n      // Start recording\n      mediaRecorder.start(1000); // Collect data every second\n      setProgress(1);\n\n      // Update progress\n      const progressInterval = setInterval(() => {\n        if (audioElement.duration) {\n          const elapsed = (Date.now() - startTimeRef.current) / 1000;\n          const percentage = Math.min(Math.floor(elapsed / audioElement.duration * 100), 99);\n          setProgress(percentage);\n        }\n      }, 100);\n\n      // Handle audio end\n      audioElement.onended = () => {\n        clearInterval(progressInterval);\n        if (mediaRecorder.state === 'recording') {\n          mediaRecorder.stop();\n        }\n      };\n    } catch (error) {\n      console.error('Export error:', error);\n      setError(error.message);\n      setIsExporting(false);\n      cleanup();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-exporter\",\n    children: [isExporting ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-text\",\n        children: [progress, \"% Exporting...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"export-button\",\n      onClick: exportVideo,\n      disabled: !visualizerRef || !audioFile || isPlaying,\n      children: \"Export Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoExporter, \"V8Weq4Ne1q9JNo/ARjfwEXYELOQ=\");\n_c = VideoExporter;\nexport default VideoExporter;\nvar _c;\n$RefreshReg$(_c, \"VideoExporter\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","RESOLUTIONS","width","height","className","VideoExporter","visualizerRef","audioFile","isPlaying","audioRef","_s","isExporting","setIsExporting","progress","setProgress","error","setError","mediaRecorderRef","chunksRef","startTimeRef","audioContextRef","audioSourceRef","audioDestinationRef","streamRef","cleanup","_mediaRecorderRef$cur","_audioContextRef$curr","current","state","stop","getTracks","forEach","track","disconnect","_audioContextRef$curr2","close","ensureAudioReady","audioElement","Promise","resolve","reject","readyState","console","log","timeout","setTimeout","Error","loadHandler","clearTimeout","errorHandler","addEventListener","once","load","exportVideo","Date","now","canvas","getCanvas","resolution","getCurrentResolution","originalWidth","originalHeight","audioContext","window","AudioContext","webkitAudioContext","audioSource","createMediaElementSource","audioDestination","createMediaStreamDestination","connect","canvasStream","captureStream","combinedStream","MediaStream","getVideoTracks","stream","getAudioTracks","mediaRecorder","MediaRecorder","mimeType","videoBitsPerSecond","audioBitsPerSecond","ondataavailable","event","data","size","push","onstop","blob","Blob","type","url","URL","createObjectURL","fileName","name","replace","a","document","createElement","href","download","click","revokeObjectURL","start","progressInterval","setInterval","duration","elapsed","percentage","Math","min","floor","onended","clearInterval","message","children","style","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/fkuce/OneDrive/Desktop/Money Projects/Visualizer/frontend/src/components/VideoExporter.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport './VideoExporter.css';\r\n\r\n// Import RESOLUTIONS from Visualizer\r\nconst RESOLUTIONS = {\r\n  '4K': { width: 3840, height: 2160, className: 'aspect-ratio-4k' },\r\n  '1080p': { width: 1920, height: 1080, className: 'aspect-ratio-1080p' },\r\n  '720p': { width: 1280, height: 720, className: 'aspect-ratio-720p' },\r\n  'Square': { width: 720, height: 720, className: 'aspect-ratio-square' },\r\n  'Vertical': { width: 1080, height: 1920, className: 'aspect-ratio-vertical' }\r\n};\r\n\r\nconst VideoExporter = ({ visualizerRef, audioFile, isPlaying, audioRef }) => {\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  \r\n  const mediaRecorderRef = useRef(null);\r\n  const chunksRef = useRef([]);\r\n  const startTimeRef = useRef(null);\r\n  const audioContextRef = useRef(null);\r\n  const audioSourceRef = useRef(null);\r\n  const audioDestinationRef = useRef(null);\r\n  const streamRef = useRef(null);\r\n\r\n  // Cleanup function to ensure all resources are properly released\r\n  const cleanup = () => {\r\n    if (mediaRecorderRef.current?.state === 'recording') {\r\n      mediaRecorderRef.current.stop();\r\n      mediaRecorderRef.current = null;\r\n    }\r\n    \r\n    if (streamRef.current) {\r\n      streamRef.current.getTracks().forEach(track => track.stop());\r\n      streamRef.current = null;\r\n    }\r\n    \r\n    if (audioSourceRef.current) {\r\n      audioSourceRef.current.disconnect();\r\n      audioSourceRef.current = null;\r\n    }\r\n    \r\n    if (audioDestinationRef.current) {\r\n      audioDestinationRef.current.disconnect();\r\n      audioDestinationRef.current = null;\r\n    }\r\n    \r\n    if (audioContextRef.current?.state !== 'closed') {\r\n      audioContextRef.current?.close();\r\n      audioContextRef.current = null;\r\n    }\r\n    \r\n    chunksRef.current = [];\r\n  };\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return cleanup;\r\n  }, []);\r\n\r\n  const ensureAudioReady = async (audioElement) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (audioElement.readyState >= 2) {\r\n        console.log('Audio already ready');\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      const timeout = setTimeout(() => {\r\n        reject(new Error('Audio loading timeout'));\r\n      }, 5000); // 5 second timeout\r\n\r\n      const loadHandler = () => {\r\n        console.log('Audio loaded successfully');\r\n        clearTimeout(timeout);\r\n        resolve();\r\n      };\r\n\r\n      const errorHandler = (error) => {\r\n        console.error('Audio load error:', error);\r\n        clearTimeout(timeout);\r\n        reject(error);\r\n      };\r\n\r\n      audioElement.addEventListener('canplaythrough', loadHandler, { once: true });\r\n      audioElement.addEventListener('error', errorHandler, { once: true });\r\n      \r\n      // Force load if not already loading\r\n      if (audioElement.readyState === 0) {\r\n        audioElement.load();\r\n      }\r\n    });\r\n  };\r\n\r\n  const exportVideo = async () => {\r\n    if (!visualizerRef?.current || !audioFile) {\r\n      setError('Please upload an audio file first');\r\n      return;\r\n    }\r\n\r\n    if (isExporting) {\r\n      setError('Export already in progress');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      cleanup();\r\n      setIsExporting(true);\r\n      setProgress(0);\r\n      setError(null);\r\n      startTimeRef.current = Date.now();\r\n\r\n      // Get the canvas and its current resolution\r\n      const canvas = visualizerRef.current.getCanvas();\r\n      if (!canvas) {\r\n        throw new Error('Canvas not found');\r\n      }\r\n\r\n      // Get the current resolution from the visualizer\r\n      const resolution = visualizerRef.current.getCurrentResolution();\r\n      const { width, height } = RESOLUTIONS[resolution];\r\n\r\n      // Set canvas to full resolution for export\r\n      const originalWidth = canvas.width;\r\n      const originalHeight = canvas.height;\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n\r\n      // Get audio element from ref\r\n      const audioElement = audioRef.current;\r\n      if (!audioElement) {\r\n        throw new Error('Audio element not found. Please ensure audio is loaded and playing.');\r\n      }\r\n\r\n      // Ensure audio is ready\r\n      console.log('Audio element found, ensuring it\\'s ready...');\r\n      await ensureAudioReady(audioElement);\r\n      console.log('Audio is ready for export');\r\n\r\n      // Setup audio context and nodes\r\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      audioContextRef.current = audioContext;\r\n\r\n      const audioSource = audioContext.createMediaElementSource(audioElement);\r\n      audioSourceRef.current = audioSource;\r\n\r\n      const audioDestination = audioContext.createMediaStreamDestination();\r\n      audioDestinationRef.current = audioDestination;\r\n\r\n      audioSource.connect(audioDestination);\r\n\r\n      // Setup canvas stream\r\n      const canvasStream = canvas.captureStream(60); // 60 FPS for highest quality\r\n      streamRef.current = canvasStream;\r\n\r\n      // Combine video and audio streams\r\n      const combinedStream = new MediaStream([\r\n        ...canvasStream.getVideoTracks(),\r\n        ...audioDestination.stream.getAudioTracks()\r\n      ]);\r\n\r\n      // Setup MediaRecorder with highest quality settings\r\n      const mediaRecorder = new MediaRecorder(combinedStream, {\r\n        mimeType: 'video/webm;codecs=vp9,opus',\r\n        videoBitsPerSecond: 8000000, // 8 Mbps\r\n        audioBitsPerSecond: 320000    // 320 kbps\r\n      });\r\n\r\n      mediaRecorderRef.current = mediaRecorder;\r\n\r\n      // Handle data collection\r\n      mediaRecorder.ondataavailable = (event) => {\r\n        if (event.data && event.data.size > 0) {\r\n          chunksRef.current.push(event.data);\r\n        }\r\n      };\r\n\r\n      // Handle recording completion\r\n      mediaRecorder.onstop = () => {\r\n        const blob = new Blob(chunksRef.current, { type: 'video/webm' });\r\n        const url = URL.createObjectURL(blob);\r\n\r\n        // Generate filename based on audio file name\r\n        const fileName = audioFile.name.replace(/\\.[^/.]+$/, '') + '_visualization.webm';\r\n\r\n        // Create download link\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = fileName;\r\n        a.click();\r\n\r\n        // Cleanup\r\n        URL.revokeObjectURL(url);\r\n        setIsExporting(false);\r\n        setProgress(100);\r\n\r\n        // Restore original canvas size\r\n        canvas.width = originalWidth;\r\n        canvas.height = originalHeight;\r\n\r\n        cleanup();\r\n      };\r\n\r\n      // Start recording\r\n      mediaRecorder.start(1000); // Collect data every second\r\n      setProgress(1);\r\n\r\n      // Update progress\r\n      const progressInterval = setInterval(() => {\r\n        if (audioElement.duration) {\r\n          const elapsed = (Date.now() - startTimeRef.current) / 1000;\r\n          const percentage = Math.min(Math.floor((elapsed / audioElement.duration) * 100), 99);\r\n          setProgress(percentage);\r\n        }\r\n      }, 100);\r\n\r\n      // Handle audio end\r\n      audioElement.onended = () => {\r\n        clearInterval(progressInterval);\r\n        if (mediaRecorder.state === 'recording') {\r\n          mediaRecorder.stop();\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('Export error:', error);\r\n      setError(error.message);\r\n      setIsExporting(false);\r\n      cleanup();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"video-exporter\">\r\n      {isExporting ? (\r\n        <div className=\"export-progress\">\r\n          <div className=\"progress-bar\">\r\n            <div className=\"progress-fill\" style={{ width: `${progress}%` }}></div>\r\n          </div>\r\n          <div className=\"progress-text\">{progress}% Exporting...</div>\r\n        </div>\r\n      ) : (\r\n        <button\r\n          className=\"export-button\"\r\n          onClick={exportVideo}\r\n          disabled={!visualizerRef || !audioFile || isPlaying}\r\n        >\r\n          Export Video\r\n        </button>\r\n      )}\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoExporter; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}